{"ast":null,"code":"/*! firebase-admin v12.7.0 */\n\"use strict\";\n\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RemoteConfig = void 0;\nconst validator = require(\"../utils/validator\");\nconst remote_config_api_client_internal_1 = require(\"./remote-config-api-client-internal\");\nconst condition_evaluator_internal_1 = require(\"./condition-evaluator-internal\");\nconst value_impl_1 = require(\"./internal/value-impl\");\n/**\n * The Firebase `RemoteConfig` service interface.\n */\nclass RemoteConfig {\n  /**\n   * @param app - The app for this RemoteConfig service.\n   * @constructor\n   * @internal\n   */\n  constructor(app) {\n    this.app = app;\n    this.client = new remote_config_api_client_internal_1.RemoteConfigApiClient(app);\n  }\n  /**\n   * Gets the current active version of the {@link RemoteConfigTemplate} of the project.\n   *\n   * @returns A promise that fulfills with a `RemoteConfigTemplate`.\n   */\n  getTemplate() {\n    return this.client.getTemplate().then(templateResponse => {\n      return new RemoteConfigTemplateImpl(templateResponse);\n    });\n  }\n  /**\n   * Gets the requested version of the {@link RemoteConfigTemplate} of the project.\n   *\n   * @param versionNumber - Version number of the Remote Config template to look up.\n   *\n   * @returns A promise that fulfills with a `RemoteConfigTemplate`.\n   */\n  getTemplateAtVersion(versionNumber) {\n    return this.client.getTemplateAtVersion(versionNumber).then(templateResponse => {\n      return new RemoteConfigTemplateImpl(templateResponse);\n    });\n  }\n  /**\n   * Validates a {@link RemoteConfigTemplate}.\n   *\n   * @param template - The Remote Config template to be validated.\n   * @returns A promise that fulfills with the validated `RemoteConfigTemplate`.\n   */\n  validateTemplate(template) {\n    return this.client.validateTemplate(template).then(templateResponse => {\n      return new RemoteConfigTemplateImpl(templateResponse);\n    });\n  }\n  /**\n   * Publishes a Remote Config template.\n   *\n   * @param template - The Remote Config template to be published.\n   * @param options - Optional options object when publishing a Remote Config template:\n   *    - `force`: Setting this to `true` forces the Remote Config template to\n   *      be updated and circumvent the ETag. This approach is not recommended\n   *      because it risks causing the loss of updates to your Remote Config\n   *      template if multiple clients are updating the Remote Config template.\n   *      See {@link https://firebase.google.com/docs/remote-config/use-config-rest#etag_usage_and_forced_updates |\n   *      ETag usage and forced updates}.\n   *\n   * @returns A Promise that fulfills with the published `RemoteConfigTemplate`.\n   */\n  publishTemplate(template, options) {\n    return this.client.publishTemplate(template, options).then(templateResponse => {\n      return new RemoteConfigTemplateImpl(templateResponse);\n    });\n  }\n  /**\n   * Rolls back a project's published Remote Config template to the specified version.\n   * A rollback is equivalent to getting a previously published Remote Config\n   * template and re-publishing it using a force update.\n   *\n   * @param versionNumber - The version number of the Remote Config template to roll back to.\n   *    The specified version number must be lower than the current version number, and not have\n   *    been deleted due to staleness. Only the last 300 versions are stored.\n   *    All versions that correspond to non-active Remote Config templates (that is, all except the\n   *    template that is being fetched by clients) are also deleted if they are more than 90 days old.\n   * @returns A promise that fulfills with the published `RemoteConfigTemplate`.\n   */\n  rollback(versionNumber) {\n    return this.client.rollback(versionNumber).then(templateResponse => {\n      return new RemoteConfigTemplateImpl(templateResponse);\n    });\n  }\n  /**\n   * Gets a list of Remote Config template versions that have been published, sorted in reverse\n   * chronological order. Only the last 300 versions are stored.\n   * All versions that correspond to non-active Remote Config templates (i.e., all except the\n   * template that is being fetched by clients) are also deleted if they are older than 90 days.\n   *\n   * @param options - Optional options object for getting a list of versions.\n   * @returns A promise that fulfills with a `ListVersionsResult`.\n   */\n  listVersions(options) {\n    return this.client.listVersions(options).then(listVersionsResponse => {\n      return {\n        versions: listVersionsResponse.versions?.map(version => new VersionImpl(version)) ?? [],\n        nextPageToken: listVersionsResponse.nextPageToken\n      };\n    });\n  }\n  /**\n   * Creates and returns a new Remote Config template from a JSON string.\n   *\n   * @param json - The JSON string to populate a Remote Config template.\n   *\n   * @returns A new template instance.\n   */\n  createTemplateFromJSON(json) {\n    if (!validator.isNonEmptyString(json)) {\n      throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'JSON string must be a valid non-empty string');\n    }\n    let template;\n    try {\n      template = JSON.parse(json);\n    } catch (e) {\n      throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', `Failed to parse the JSON string: ${json}. ` + e);\n    }\n    return new RemoteConfigTemplateImpl(template);\n  }\n  /**\n   * Instantiates {@link ServerTemplate} and then fetches and caches the latest\n   * template version of the project.\n   */\n  async getServerTemplate(options) {\n    const template = this.initServerTemplate(options);\n    await template.load();\n    return template;\n  }\n  /**\n   * Synchronously instantiates {@link ServerTemplate}.\n   */\n  initServerTemplate(options) {\n    const template = new ServerTemplateImpl(this.client, new condition_evaluator_internal_1.ConditionEvaluator(), options?.defaultConfig);\n    if (options?.template) {\n      template.set(options?.template);\n    }\n    return template;\n  }\n}\nexports.RemoteConfig = RemoteConfig;\n/**\n * Remote Config template internal implementation.\n */\nclass RemoteConfigTemplateImpl {\n  constructor(config) {\n    if (!validator.isNonNullObject(config) || !validator.isNonEmptyString(config.etag)) {\n      throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', `Invalid Remote Config template: ${JSON.stringify(config)}`);\n    }\n    this.etagInternal = config.etag;\n    if (typeof config.parameters !== 'undefined') {\n      if (!validator.isNonNullObject(config.parameters)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\n      }\n      this.parameters = config.parameters;\n    } else {\n      this.parameters = {};\n    }\n    if (typeof config.parameterGroups !== 'undefined') {\n      if (!validator.isNonNullObject(config.parameterGroups)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameter groups must be a non-null object');\n      }\n      this.parameterGroups = config.parameterGroups;\n    } else {\n      this.parameterGroups = {};\n    }\n    if (typeof config.conditions !== 'undefined') {\n      if (!validator.isArray(config.conditions)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\n      }\n      this.conditions = config.conditions;\n    } else {\n      this.conditions = [];\n    }\n    if (typeof config.version !== 'undefined') {\n      this.version = new VersionImpl(config.version);\n    }\n  }\n  /**\n   * Gets the ETag of the template.\n   *\n   * @returns The ETag of the Remote Config template.\n   */\n  get etag() {\n    return this.etagInternal;\n  }\n  /**\n   * Returns a JSON-serializable representation of this object.\n   *\n   * @returns A JSON-serializable representation of this object.\n   */\n  toJSON() {\n    return {\n      conditions: this.conditions,\n      parameters: this.parameters,\n      parameterGroups: this.parameterGroups,\n      etag: this.etag,\n      version: this.version\n    };\n  }\n}\n/**\n * Remote Config dataplane template data implementation.\n */\nclass ServerTemplateImpl {\n  constructor(apiClient, conditionEvaluator) {\n    let defaultConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.apiClient = apiClient;\n    this.conditionEvaluator = conditionEvaluator;\n    this.defaultConfig = defaultConfig;\n    this.stringifiedDefaultConfig = {};\n    // RC stores all remote values as string, but it's more intuitive\n    // to declare default values with specific types, so this converts\n    // the external declaration to an internal string representation.\n    for (const key in defaultConfig) {\n      this.stringifiedDefaultConfig[key] = String(defaultConfig[key]);\n    }\n  }\n  /**\n   * Fetches and caches the current active version of the project's {@link ServerTemplate}.\n   */\n  load() {\n    return this.apiClient.getServerTemplate().then(template => {\n      this.cache = new ServerTemplateDataImpl(template);\n    });\n  }\n  /**\n   * Parses a {@link ServerTemplateDataType} and caches it.\n   */\n  set(template) {\n    let parsed;\n    if (validator.isString(template)) {\n      try {\n        parsed = JSON.parse(template);\n      } catch (e) {\n        // Transforms JSON parse errors to Firebase error.\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', `Failed to parse the JSON string: ${template}. ` + e);\n      }\n    } else {\n      parsed = template;\n    }\n    // Throws template parse errors.\n    this.cache = new ServerTemplateDataImpl(parsed);\n  }\n  /**\n   * Evaluates the current template in cache to produce a {@link ServerConfig}.\n   */\n  evaluate() {\n    let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.cache) {\n      // This is the only place we should throw during evaluation, since it's under the\n      // control of application logic. To preserve forward-compatibility, we should only\n      // return false in cases where the SDK is unsure how to evaluate the fetched template.\n      throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('failed-precondition', 'No Remote Config Server template in cache. Call load() before calling evaluate().');\n    }\n    const evaluatedConditions = this.conditionEvaluator.evaluateConditions(this.cache.conditions, context);\n    const configValues = {};\n    // Initializes config Value objects with default values.\n    for (const key in this.stringifiedDefaultConfig) {\n      configValues[key] = new value_impl_1.ValueImpl('default', this.stringifiedDefaultConfig[key]);\n    }\n    // Overlays config Value objects derived by evaluating the template.\n    for (const [key, parameter] of Object.entries(this.cache.parameters)) {\n      const {\n        conditionalValues,\n        defaultValue\n      } = parameter;\n      // Supports parameters with no conditional values.\n      const normalizedConditionalValues = conditionalValues || {};\n      let parameterValueWrapper = undefined;\n      // Iterates in order over condition list. If there is a value associated\n      // with a condition, this checks if the condition is true.\n      for (const [conditionName, conditionEvaluation] of evaluatedConditions) {\n        if (normalizedConditionalValues[conditionName] && conditionEvaluation) {\n          parameterValueWrapper = normalizedConditionalValues[conditionName];\n          break;\n        }\n      }\n      if (parameterValueWrapper && parameterValueWrapper.useInAppDefault) {\n        // TODO: add logging once we have a wrapped logger.\n        continue;\n      }\n      if (parameterValueWrapper) {\n        const parameterValue = parameterValueWrapper.value;\n        configValues[key] = new value_impl_1.ValueImpl('remote', parameterValue);\n        continue;\n      }\n      if (!defaultValue) {\n        // TODO: add logging once we have a wrapped logger.\n        continue;\n      }\n      if (defaultValue.useInAppDefault) {\n        // TODO: add logging once we have a wrapped logger.\n        continue;\n      }\n      const parameterDefaultValue = defaultValue.value;\n      configValues[key] = new value_impl_1.ValueImpl('remote', parameterDefaultValue);\n    }\n    return new ServerConfigImpl(configValues);\n  }\n  /**\n   * @returns JSON representation of the server template\n   */\n  toJSON() {\n    return this.cache;\n  }\n}\nclass ServerConfigImpl {\n  constructor(configValues) {\n    this.configValues = configValues;\n  }\n  getBoolean(key) {\n    return this.getValue(key).asBoolean();\n  }\n  getNumber(key) {\n    return this.getValue(key).asNumber();\n  }\n  getString(key) {\n    return this.getValue(key).asString();\n  }\n  getValue(key) {\n    return this.configValues[key] || new value_impl_1.ValueImpl('static');\n  }\n}\n/**\n * Remote Config dataplane template data implementation.\n */\nclass ServerTemplateDataImpl {\n  constructor(template) {\n    if (!validator.isNonNullObject(template) || !validator.isNonEmptyString(template.etag)) {\n      throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', `Invalid Remote Config template: ${JSON.stringify(template)}`);\n    }\n    this.etag = template.etag;\n    if (typeof template.parameters !== 'undefined') {\n      if (!validator.isNonNullObject(template.parameters)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\n      }\n      this.parameters = template.parameters;\n    } else {\n      this.parameters = {};\n    }\n    if (typeof template.conditions !== 'undefined') {\n      if (!validator.isArray(template.conditions)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\n      }\n      this.conditions = template.conditions;\n    } else {\n      this.conditions = [];\n    }\n    if (typeof template.version !== 'undefined') {\n      this.version = new VersionImpl(template.version);\n    }\n  }\n}\n/**\n* Remote Config Version internal implementation.\n*/\nclass VersionImpl {\n  constructor(version) {\n    if (!validator.isNonNullObject(version)) {\n      throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', `Invalid Remote Config version instance: ${JSON.stringify(version)}`);\n    }\n    if (typeof version.versionNumber !== 'undefined') {\n      if (!validator.isNonEmptyString(version.versionNumber) && !validator.isNumber(version.versionNumber)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version number must be a non-empty string in int64 format or a number');\n      }\n      if (!Number.isInteger(Number(version.versionNumber))) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version number must be an integer or a string in int64 format');\n      }\n      this.versionNumber = version.versionNumber;\n    }\n    if (typeof version.updateOrigin !== 'undefined') {\n      if (!validator.isNonEmptyString(version.updateOrigin)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update origin must be a non-empty string');\n      }\n      this.updateOrigin = version.updateOrigin;\n    }\n    if (typeof version.updateType !== 'undefined') {\n      if (!validator.isNonEmptyString(version.updateType)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update type must be a non-empty string');\n      }\n      this.updateType = version.updateType;\n    }\n    if (typeof version.updateUser !== 'undefined') {\n      if (!validator.isNonNullObject(version.updateUser)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update user must be a non-null object');\n      }\n      this.updateUser = version.updateUser;\n    }\n    if (typeof version.description !== 'undefined') {\n      if (!validator.isNonEmptyString(version.description)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version description must be a non-empty string');\n      }\n      this.description = version.description;\n    }\n    if (typeof version.rollbackSource !== 'undefined') {\n      if (!validator.isNonEmptyString(version.rollbackSource)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version rollback source must be a non-empty string');\n      }\n      this.rollbackSource = version.rollbackSource;\n    }\n    if (typeof version.isLegacy !== 'undefined') {\n      if (!validator.isBoolean(version.isLegacy)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version.isLegacy must be a boolean');\n      }\n      this.isLegacy = version.isLegacy;\n    }\n    // The backend API provides timestamps in ISO date strings. The Admin SDK exposes timestamps\n    // in UTC date strings. If a developer uses a previously obtained template with UTC timestamps\n    // we could still validate it below.\n    if (typeof version.updateTime !== 'undefined') {\n      if (!this.isValidTimestamp(version.updateTime)) {\n        throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update time must be a valid date string');\n      }\n      this.updateTime = new Date(version.updateTime).toUTCString();\n    }\n  }\n  /**\n   * @returns A JSON-serializable representation of this object.\n   */\n  toJSON() {\n    return {\n      versionNumber: this.versionNumber,\n      updateOrigin: this.updateOrigin,\n      updateType: this.updateType,\n      updateUser: this.updateUser,\n      description: this.description,\n      rollbackSource: this.rollbackSource,\n      isLegacy: this.isLegacy,\n      updateTime: this.updateTime\n    };\n  }\n  isValidTimestamp(timestamp) {\n    // This validation fails for timestamps earlier than January 1, 1970 and considers strings\n    // such as \"1.2\" as valid timestamps.\n    return validator.isNonEmptyString(timestamp) && new Date(timestamp).getTime() > 0;\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","RemoteConfig","validator","require","remote_config_api_client_internal_1","condition_evaluator_internal_1","value_impl_1","constructor","app","client","RemoteConfigApiClient","getTemplate","then","templateResponse","RemoteConfigTemplateImpl","getTemplateAtVersion","versionNumber","validateTemplate","template","publishTemplate","options","rollback","listVersions","listVersionsResponse","versions","map","version","VersionImpl","nextPageToken","createTemplateFromJSON","json","isNonEmptyString","FirebaseRemoteConfigError","JSON","parse","e","getServerTemplate","initServerTemplate","load","ServerTemplateImpl","ConditionEvaluator","defaultConfig","set","config","isNonNullObject","etag","stringify","etagInternal","parameters","parameterGroups","conditions","isArray","toJSON","apiClient","conditionEvaluator","stringifiedDefaultConfig","key","String","cache","ServerTemplateDataImpl","parsed","isString","evaluate","context","evaluatedConditions","evaluateConditions","configValues","ValueImpl","parameter","entries","conditionalValues","defaultValue","normalizedConditionalValues","parameterValueWrapper","undefined","conditionName","conditionEvaluation","useInAppDefault","parameterValue","parameterDefaultValue","ServerConfigImpl","getBoolean","getValue","asBoolean","getNumber","asNumber","getString","asString","isNumber","Number","isInteger","updateOrigin","updateType","updateUser","description","rollbackSource","isLegacy","isBoolean","updateTime","isValidTimestamp","Date","toUTCString","timestamp","getTime"],"sources":["/home/yadu/Music/Gifty/node_modules/firebase-admin/lib/remote-config/remote-config.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RemoteConfig = void 0;\nconst validator = require(\"../utils/validator\");\nconst remote_config_api_client_internal_1 = require(\"./remote-config-api-client-internal\");\nconst condition_evaluator_internal_1 = require(\"./condition-evaluator-internal\");\nconst value_impl_1 = require(\"./internal/value-impl\");\n/**\n * The Firebase `RemoteConfig` service interface.\n */\nclass RemoteConfig {\n    /**\n     * @param app - The app for this RemoteConfig service.\n     * @constructor\n     * @internal\n     */\n    constructor(app) {\n        this.app = app;\n        this.client = new remote_config_api_client_internal_1.RemoteConfigApiClient(app);\n    }\n    /**\n     * Gets the current active version of the {@link RemoteConfigTemplate} of the project.\n     *\n     * @returns A promise that fulfills with a `RemoteConfigTemplate`.\n     */\n    getTemplate() {\n        return this.client.getTemplate()\n            .then((templateResponse) => {\n            return new RemoteConfigTemplateImpl(templateResponse);\n        });\n    }\n    /**\n     * Gets the requested version of the {@link RemoteConfigTemplate} of the project.\n     *\n     * @param versionNumber - Version number of the Remote Config template to look up.\n     *\n     * @returns A promise that fulfills with a `RemoteConfigTemplate`.\n     */\n    getTemplateAtVersion(versionNumber) {\n        return this.client.getTemplateAtVersion(versionNumber)\n            .then((templateResponse) => {\n            return new RemoteConfigTemplateImpl(templateResponse);\n        });\n    }\n    /**\n     * Validates a {@link RemoteConfigTemplate}.\n     *\n     * @param template - The Remote Config template to be validated.\n     * @returns A promise that fulfills with the validated `RemoteConfigTemplate`.\n     */\n    validateTemplate(template) {\n        return this.client.validateTemplate(template)\n            .then((templateResponse) => {\n            return new RemoteConfigTemplateImpl(templateResponse);\n        });\n    }\n    /**\n     * Publishes a Remote Config template.\n     *\n     * @param template - The Remote Config template to be published.\n     * @param options - Optional options object when publishing a Remote Config template:\n     *    - `force`: Setting this to `true` forces the Remote Config template to\n     *      be updated and circumvent the ETag. This approach is not recommended\n     *      because it risks causing the loss of updates to your Remote Config\n     *      template if multiple clients are updating the Remote Config template.\n     *      See {@link https://firebase.google.com/docs/remote-config/use-config-rest#etag_usage_and_forced_updates |\n     *      ETag usage and forced updates}.\n     *\n     * @returns A Promise that fulfills with the published `RemoteConfigTemplate`.\n     */\n    publishTemplate(template, options) {\n        return this.client.publishTemplate(template, options)\n            .then((templateResponse) => {\n            return new RemoteConfigTemplateImpl(templateResponse);\n        });\n    }\n    /**\n     * Rolls back a project's published Remote Config template to the specified version.\n     * A rollback is equivalent to getting a previously published Remote Config\n     * template and re-publishing it using a force update.\n     *\n     * @param versionNumber - The version number of the Remote Config template to roll back to.\n     *    The specified version number must be lower than the current version number, and not have\n     *    been deleted due to staleness. Only the last 300 versions are stored.\n     *    All versions that correspond to non-active Remote Config templates (that is, all except the\n     *    template that is being fetched by clients) are also deleted if they are more than 90 days old.\n     * @returns A promise that fulfills with the published `RemoteConfigTemplate`.\n     */\n    rollback(versionNumber) {\n        return this.client.rollback(versionNumber)\n            .then((templateResponse) => {\n            return new RemoteConfigTemplateImpl(templateResponse);\n        });\n    }\n    /**\n     * Gets a list of Remote Config template versions that have been published, sorted in reverse\n     * chronological order. Only the last 300 versions are stored.\n     * All versions that correspond to non-active Remote Config templates (i.e., all except the\n     * template that is being fetched by clients) are also deleted if they are older than 90 days.\n     *\n     * @param options - Optional options object for getting a list of versions.\n     * @returns A promise that fulfills with a `ListVersionsResult`.\n     */\n    listVersions(options) {\n        return this.client.listVersions(options)\n            .then((listVersionsResponse) => {\n            return {\n                versions: listVersionsResponse.versions?.map(version => new VersionImpl(version)) ?? [],\n                nextPageToken: listVersionsResponse.nextPageToken,\n            };\n        });\n    }\n    /**\n     * Creates and returns a new Remote Config template from a JSON string.\n     *\n     * @param json - The JSON string to populate a Remote Config template.\n     *\n     * @returns A new template instance.\n     */\n    createTemplateFromJSON(json) {\n        if (!validator.isNonEmptyString(json)) {\n            throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'JSON string must be a valid non-empty string');\n        }\n        let template;\n        try {\n            template = JSON.parse(json);\n        }\n        catch (e) {\n            throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', `Failed to parse the JSON string: ${json}. ` + e);\n        }\n        return new RemoteConfigTemplateImpl(template);\n    }\n    /**\n     * Instantiates {@link ServerTemplate} and then fetches and caches the latest\n     * template version of the project.\n     */\n    async getServerTemplate(options) {\n        const template = this.initServerTemplate(options);\n        await template.load();\n        return template;\n    }\n    /**\n     * Synchronously instantiates {@link ServerTemplate}.\n     */\n    initServerTemplate(options) {\n        const template = new ServerTemplateImpl(this.client, new condition_evaluator_internal_1.ConditionEvaluator(), options?.defaultConfig);\n        if (options?.template) {\n            template.set(options?.template);\n        }\n        return template;\n    }\n}\nexports.RemoteConfig = RemoteConfig;\n/**\n * Remote Config template internal implementation.\n */\nclass RemoteConfigTemplateImpl {\n    constructor(config) {\n        if (!validator.isNonNullObject(config) ||\n            !validator.isNonEmptyString(config.etag)) {\n            throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', `Invalid Remote Config template: ${JSON.stringify(config)}`);\n        }\n        this.etagInternal = config.etag;\n        if (typeof config.parameters !== 'undefined') {\n            if (!validator.isNonNullObject(config.parameters)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\n            }\n            this.parameters = config.parameters;\n        }\n        else {\n            this.parameters = {};\n        }\n        if (typeof config.parameterGroups !== 'undefined') {\n            if (!validator.isNonNullObject(config.parameterGroups)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameter groups must be a non-null object');\n            }\n            this.parameterGroups = config.parameterGroups;\n        }\n        else {\n            this.parameterGroups = {};\n        }\n        if (typeof config.conditions !== 'undefined') {\n            if (!validator.isArray(config.conditions)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\n            }\n            this.conditions = config.conditions;\n        }\n        else {\n            this.conditions = [];\n        }\n        if (typeof config.version !== 'undefined') {\n            this.version = new VersionImpl(config.version);\n        }\n    }\n    /**\n     * Gets the ETag of the template.\n     *\n     * @returns The ETag of the Remote Config template.\n     */\n    get etag() {\n        return this.etagInternal;\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @returns A JSON-serializable representation of this object.\n     */\n    toJSON() {\n        return {\n            conditions: this.conditions,\n            parameters: this.parameters,\n            parameterGroups: this.parameterGroups,\n            etag: this.etag,\n            version: this.version,\n        };\n    }\n}\n/**\n * Remote Config dataplane template data implementation.\n */\nclass ServerTemplateImpl {\n    constructor(apiClient, conditionEvaluator, defaultConfig = {}) {\n        this.apiClient = apiClient;\n        this.conditionEvaluator = conditionEvaluator;\n        this.defaultConfig = defaultConfig;\n        this.stringifiedDefaultConfig = {};\n        // RC stores all remote values as string, but it's more intuitive\n        // to declare default values with specific types, so this converts\n        // the external declaration to an internal string representation.\n        for (const key in defaultConfig) {\n            this.stringifiedDefaultConfig[key] = String(defaultConfig[key]);\n        }\n    }\n    /**\n     * Fetches and caches the current active version of the project's {@link ServerTemplate}.\n     */\n    load() {\n        return this.apiClient.getServerTemplate()\n            .then((template) => {\n            this.cache = new ServerTemplateDataImpl(template);\n        });\n    }\n    /**\n     * Parses a {@link ServerTemplateDataType} and caches it.\n     */\n    set(template) {\n        let parsed;\n        if (validator.isString(template)) {\n            try {\n                parsed = JSON.parse(template);\n            }\n            catch (e) {\n                // Transforms JSON parse errors to Firebase error.\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', `Failed to parse the JSON string: ${template}. ` + e);\n            }\n        }\n        else {\n            parsed = template;\n        }\n        // Throws template parse errors.\n        this.cache = new ServerTemplateDataImpl(parsed);\n    }\n    /**\n     * Evaluates the current template in cache to produce a {@link ServerConfig}.\n     */\n    evaluate(context = {}) {\n        if (!this.cache) {\n            // This is the only place we should throw during evaluation, since it's under the\n            // control of application logic. To preserve forward-compatibility, we should only\n            // return false in cases where the SDK is unsure how to evaluate the fetched template.\n            throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('failed-precondition', 'No Remote Config Server template in cache. Call load() before calling evaluate().');\n        }\n        const evaluatedConditions = this.conditionEvaluator.evaluateConditions(this.cache.conditions, context);\n        const configValues = {};\n        // Initializes config Value objects with default values.\n        for (const key in this.stringifiedDefaultConfig) {\n            configValues[key] = new value_impl_1.ValueImpl('default', this.stringifiedDefaultConfig[key]);\n        }\n        // Overlays config Value objects derived by evaluating the template.\n        for (const [key, parameter] of Object.entries(this.cache.parameters)) {\n            const { conditionalValues, defaultValue } = parameter;\n            // Supports parameters with no conditional values.\n            const normalizedConditionalValues = conditionalValues || {};\n            let parameterValueWrapper = undefined;\n            // Iterates in order over condition list. If there is a value associated\n            // with a condition, this checks if the condition is true.\n            for (const [conditionName, conditionEvaluation] of evaluatedConditions) {\n                if (normalizedConditionalValues[conditionName] && conditionEvaluation) {\n                    parameterValueWrapper = normalizedConditionalValues[conditionName];\n                    break;\n                }\n            }\n            if (parameterValueWrapper && parameterValueWrapper.useInAppDefault) {\n                // TODO: add logging once we have a wrapped logger.\n                continue;\n            }\n            if (parameterValueWrapper) {\n                const parameterValue = parameterValueWrapper.value;\n                configValues[key] = new value_impl_1.ValueImpl('remote', parameterValue);\n                continue;\n            }\n            if (!defaultValue) {\n                // TODO: add logging once we have a wrapped logger.\n                continue;\n            }\n            if (defaultValue.useInAppDefault) {\n                // TODO: add logging once we have a wrapped logger.\n                continue;\n            }\n            const parameterDefaultValue = defaultValue.value;\n            configValues[key] = new value_impl_1.ValueImpl('remote', parameterDefaultValue);\n        }\n        return new ServerConfigImpl(configValues);\n    }\n    /**\n     * @returns JSON representation of the server template\n     */\n    toJSON() {\n        return this.cache;\n    }\n}\nclass ServerConfigImpl {\n    constructor(configValues) {\n        this.configValues = configValues;\n    }\n    getBoolean(key) {\n        return this.getValue(key).asBoolean();\n    }\n    getNumber(key) {\n        return this.getValue(key).asNumber();\n    }\n    getString(key) {\n        return this.getValue(key).asString();\n    }\n    getValue(key) {\n        return this.configValues[key] || new value_impl_1.ValueImpl('static');\n    }\n}\n/**\n * Remote Config dataplane template data implementation.\n */\nclass ServerTemplateDataImpl {\n    constructor(template) {\n        if (!validator.isNonNullObject(template) ||\n            !validator.isNonEmptyString(template.etag)) {\n            throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', `Invalid Remote Config template: ${JSON.stringify(template)}`);\n        }\n        this.etag = template.etag;\n        if (typeof template.parameters !== 'undefined') {\n            if (!validator.isNonNullObject(template.parameters)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\n            }\n            this.parameters = template.parameters;\n        }\n        else {\n            this.parameters = {};\n        }\n        if (typeof template.conditions !== 'undefined') {\n            if (!validator.isArray(template.conditions)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\n            }\n            this.conditions = template.conditions;\n        }\n        else {\n            this.conditions = [];\n        }\n        if (typeof template.version !== 'undefined') {\n            this.version = new VersionImpl(template.version);\n        }\n    }\n}\n/**\n* Remote Config Version internal implementation.\n*/\nclass VersionImpl {\n    constructor(version) {\n        if (!validator.isNonNullObject(version)) {\n            throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', `Invalid Remote Config version instance: ${JSON.stringify(version)}`);\n        }\n        if (typeof version.versionNumber !== 'undefined') {\n            if (!validator.isNonEmptyString(version.versionNumber) &&\n                !validator.isNumber(version.versionNumber)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version number must be a non-empty string in int64 format or a number');\n            }\n            if (!Number.isInteger(Number(version.versionNumber))) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version number must be an integer or a string in int64 format');\n            }\n            this.versionNumber = version.versionNumber;\n        }\n        if (typeof version.updateOrigin !== 'undefined') {\n            if (!validator.isNonEmptyString(version.updateOrigin)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update origin must be a non-empty string');\n            }\n            this.updateOrigin = version.updateOrigin;\n        }\n        if (typeof version.updateType !== 'undefined') {\n            if (!validator.isNonEmptyString(version.updateType)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update type must be a non-empty string');\n            }\n            this.updateType = version.updateType;\n        }\n        if (typeof version.updateUser !== 'undefined') {\n            if (!validator.isNonNullObject(version.updateUser)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update user must be a non-null object');\n            }\n            this.updateUser = version.updateUser;\n        }\n        if (typeof version.description !== 'undefined') {\n            if (!validator.isNonEmptyString(version.description)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version description must be a non-empty string');\n            }\n            this.description = version.description;\n        }\n        if (typeof version.rollbackSource !== 'undefined') {\n            if (!validator.isNonEmptyString(version.rollbackSource)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version rollback source must be a non-empty string');\n            }\n            this.rollbackSource = version.rollbackSource;\n        }\n        if (typeof version.isLegacy !== 'undefined') {\n            if (!validator.isBoolean(version.isLegacy)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version.isLegacy must be a boolean');\n            }\n            this.isLegacy = version.isLegacy;\n        }\n        // The backend API provides timestamps in ISO date strings. The Admin SDK exposes timestamps\n        // in UTC date strings. If a developer uses a previously obtained template with UTC timestamps\n        // we could still validate it below.\n        if (typeof version.updateTime !== 'undefined') {\n            if (!this.isValidTimestamp(version.updateTime)) {\n                throw new remote_config_api_client_internal_1.FirebaseRemoteConfigError('invalid-argument', 'Version update time must be a valid date string');\n            }\n            this.updateTime = new Date(version.updateTime).toUTCString();\n        }\n    }\n    /**\n     * @returns A JSON-serializable representation of this object.\n     */\n    toJSON() {\n        return {\n            versionNumber: this.versionNumber,\n            updateOrigin: this.updateOrigin,\n            updateType: this.updateType,\n            updateUser: this.updateUser,\n            description: this.description,\n            rollbackSource: this.rollbackSource,\n            isLegacy: this.isLegacy,\n            updateTime: this.updateTime,\n        };\n    }\n    isValidTimestamp(timestamp) {\n        // This validation fails for timestamps earlier than January 1, 1970 and considers strings\n        // such as \"1.2\" as valid timestamps.\n        return validator.isNonEmptyString(timestamp) && (new Date(timestamp)).getTime() > 0;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}