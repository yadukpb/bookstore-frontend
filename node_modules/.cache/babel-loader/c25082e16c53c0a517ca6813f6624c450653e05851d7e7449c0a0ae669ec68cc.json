{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DropDatabaseOperation = exports.DropCollectionOperation = void 0;\nconst error_1 = require(\"../error\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass DropCollectionOperation extends command_1.CommandOperation {\n  constructor(db, name) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(db, options);\n    this.db = db;\n    this.options = options;\n    this.name = name;\n  }\n  get commandName() {\n    return 'drop';\n  }\n  async execute(server, session) {\n    const db = this.db;\n    const options = this.options;\n    const name = this.name;\n    const encryptedFieldsMap = db.client.options.autoEncryption?.encryptedFieldsMap;\n    let encryptedFields = options.encryptedFields ?? encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n    if (!encryptedFields && encryptedFieldsMap) {\n      // If the MongoClient was configured with an encryptedFieldsMap,\n      // and no encryptedFields config was available in it or explicitly\n      // passed as an argument, the spec tells us to look one up using\n      // listCollections().\n      const listCollectionsResult = await db.listCollections({\n        name\n      }, {\n        nameOnly: false\n      }).toArray();\n      encryptedFields = listCollectionsResult?.[0]?.options?.encryptedFields;\n    }\n    if (encryptedFields) {\n      const escCollection = encryptedFields.escCollection || `enxcol_.${name}.esc`;\n      const ecocCollection = encryptedFields.ecocCollection || `enxcol_.${name}.ecoc`;\n      for (const collectionName of [escCollection, ecocCollection]) {\n        // Drop auxilliary collections, ignoring potential NamespaceNotFound errors.\n        const dropOp = new DropCollectionOperation(db, collectionName);\n        try {\n          await dropOp.executeWithoutEncryptedFieldsCheck(server, session);\n        } catch (err) {\n          if (!(err instanceof error_1.MongoServerError) || err.code !== error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            throw err;\n          }\n        }\n      }\n    }\n    return await this.executeWithoutEncryptedFieldsCheck(server, session);\n  }\n  async executeWithoutEncryptedFieldsCheck(server, session) {\n    await super.executeCommand(server, session, {\n      drop: this.name\n    });\n    return true;\n  }\n}\nexports.DropCollectionOperation = DropCollectionOperation;\n/** @internal */\nclass DropDatabaseOperation extends command_1.CommandOperation {\n  constructor(db, options) {\n    super(db, options);\n    this.options = options;\n  }\n  get commandName() {\n    return 'dropDatabase';\n  }\n  async execute(server, session) {\n    await super.executeCommand(server, session, {\n      dropDatabase: 1\n    });\n    return true;\n  }\n}\nexports.DropDatabaseOperation = DropDatabaseOperation;\n(0, operation_1.defineAspects)(DropCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropDatabaseOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"mappings":"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","names":["DropCollectionOperation","command_1","constructor","db","name","options","commandName","execute","server","session","encryptedFieldsMap","client","autoEncryption","encryptedFields","databaseName","listCollectionsResult","listCollections","nameOnly","toArray","escCollection","ecocCollection","collectionName","dropOp","executeWithoutEncryptedFieldsCheck","err","error_1","code","NamespaceNotFound","executeCommand","drop","exports","DropDatabaseOperation","dropDatabase","operation_1","WRITE_OPERATION"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/operations/drop.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Db } from '../db';\nimport { MONGODB_ERROR_CODES, MongoServerError } from '../error';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { CommandOperation, type CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/** @public */\nexport interface DropCollectionOptions extends CommandOperationOptions {\n  /** @experimental */\n  encryptedFields?: Document;\n}\n\n/** @internal */\nexport class DropCollectionOperation extends CommandOperation<boolean> {\n  override options: DropCollectionOptions;\n  db: Db;\n  name: string;\n\n  constructor(db: Db, name: string, options: DropCollectionOptions = {}) {\n    super(db, options);\n    this.db = db;\n    this.options = options;\n    this.name = name;\n  }\n\n  override get commandName() {\n    return 'drop' as const;\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<boolean> {\n    const db = this.db;\n    const options = this.options;\n    const name = this.name;\n\n    const encryptedFieldsMap = db.client.options.autoEncryption?.encryptedFieldsMap;\n    let encryptedFields: Document | undefined =\n      options.encryptedFields ?? encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n\n    if (!encryptedFields && encryptedFieldsMap) {\n      // If the MongoClient was configured with an encryptedFieldsMap,\n      // and no encryptedFields config was available in it or explicitly\n      // passed as an argument, the spec tells us to look one up using\n      // listCollections().\n      const listCollectionsResult = await db\n        .listCollections({ name }, { nameOnly: false })\n        .toArray();\n      encryptedFields = listCollectionsResult?.[0]?.options?.encryptedFields;\n    }\n\n    if (encryptedFields) {\n      const escCollection = encryptedFields.escCollection || `enxcol_.${name}.esc`;\n      const ecocCollection = encryptedFields.ecocCollection || `enxcol_.${name}.ecoc`;\n\n      for (const collectionName of [escCollection, ecocCollection]) {\n        // Drop auxilliary collections, ignoring potential NamespaceNotFound errors.\n        const dropOp = new DropCollectionOperation(db, collectionName);\n        try {\n          await dropOp.executeWithoutEncryptedFieldsCheck(server, session);\n        } catch (err) {\n          if (\n            !(err instanceof MongoServerError) ||\n            err.code !== MONGODB_ERROR_CODES.NamespaceNotFound\n          ) {\n            throw err;\n          }\n        }\n      }\n    }\n\n    return await this.executeWithoutEncryptedFieldsCheck(server, session);\n  }\n\n  private async executeWithoutEncryptedFieldsCheck(\n    server: Server,\n    session: ClientSession | undefined\n  ): Promise<boolean> {\n    await super.executeCommand(server, session, { drop: this.name });\n    return true;\n  }\n}\n\n/** @public */\nexport type DropDatabaseOptions = CommandOperationOptions;\n\n/** @internal */\nexport class DropDatabaseOperation extends CommandOperation<boolean> {\n  override options: DropDatabaseOptions;\n\n  constructor(db: Db, options: DropDatabaseOptions) {\n    super(db, options);\n    this.options = options;\n  }\n  override get commandName() {\n    return 'dropDatabase' as const;\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<boolean> {\n    await super.executeCommand(server, session, { dropDatabase: 1 });\n    return true;\n  }\n}\n\ndefineAspects(DropCollectionOperation, [Aspect.WRITE_OPERATION]);\ndefineAspects(DropDatabaseOperation, [Aspect.WRITE_OPERATION]);\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}