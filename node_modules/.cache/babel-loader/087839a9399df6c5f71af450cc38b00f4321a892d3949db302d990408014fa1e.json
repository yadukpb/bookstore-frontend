{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2022 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.util = exports.Util = exports.PartialFailureError = exports.ApiError = exports.GCCL_GCS_CMD_KEY = void 0;\n/*!\n * @module common/util\n */\nconst projectify_1 = require(\"@google-cloud/projectify\");\nconst htmlEntities = __importStar(require(\"html-entities\"));\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst retry_request_1 = __importDefault(require(\"retry-request\"));\nconst stream_1 = require(\"stream\");\nconst teeny_request_1 = require(\"teeny-request\");\nconst uuid = __importStar(require(\"uuid\"));\nconst service_js_1 = require(\"./service.js\");\nconst util_js_1 = require(\"../util.js\");\nconst duplexify_1 = __importDefault(require(\"duplexify\"));\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst package_json_helper_cjs_1 = require(\"../package-json-helper.cjs\");\nconst packageJson = (0, package_json_helper_cjs_1.getPackageJSON)();\n/**\n * A unique symbol for providing a `gccl-gcs-cmd` value\n * for the `X-Goog-API-Client` header.\n *\n * E.g. the `V` in `X-Goog-API-Client: gccl-gcs-cmd/V`\n **/\nexports.GCCL_GCS_CMD_KEY = Symbol.for('GCCL_GCS_CMD');\nconst requestDefaults = {\n  timeout: 60000,\n  gzip: true,\n  forever: true,\n  pool: {\n    maxSockets: Infinity\n  }\n};\n/**\n * Default behavior: Automatically retry retriable server errors.\n *\n * @const {boolean}\n * @private\n */\nconst AUTO_RETRY_DEFAULT = true;\n/**\n * Default behavior: Only attempt to retry retriable errors 3 times.\n *\n * @const {number}\n * @private\n */\nconst MAX_RETRY_DEFAULT = 3;\n/**\n * Custom error type for API errors.\n *\n * @param {object} errorBody - Error object.\n */\nclass ApiError extends Error {\n  constructor(errorBodyOrMessage) {\n    super();\n    if (typeof errorBodyOrMessage !== 'object') {\n      this.message = errorBodyOrMessage || '';\n      return;\n    }\n    const errorBody = errorBodyOrMessage;\n    this.code = errorBody.code;\n    this.errors = errorBody.errors;\n    this.response = errorBody.response;\n    try {\n      this.errors = JSON.parse(this.response.body).error.errors;\n    } catch (e) {\n      this.errors = errorBody.errors;\n    }\n    this.message = ApiError.createMultiErrorMessage(errorBody, this.errors);\n    Error.captureStackTrace(this);\n  }\n  /**\n   * Pieces together an error message by combining all unique error messages\n   * returned from a single GoogleError\n   *\n   * @private\n   *\n   * @param {GoogleErrorBody} err The original error.\n   * @param {GoogleInnerError[]} [errors] Inner errors, if any.\n   * @returns {string}\n   */\n  static createMultiErrorMessage(err, errors) {\n    const messages = new Set();\n    if (err.message) {\n      messages.add(err.message);\n    }\n    if (errors && errors.length) {\n      errors.forEach(_ref => {\n        let {\n          message\n        } = _ref;\n        return messages.add(message);\n      });\n    } else if (err.response && err.response.body) {\n      messages.add(htmlEntities.decode(err.response.body.toString()));\n    } else if (!err.message) {\n      messages.add('A failure occurred during this request.');\n    }\n    let messageArr = Array.from(messages);\n    if (messageArr.length > 1) {\n      messageArr = messageArr.map((message, i) => `    ${i + 1}. ${message}`);\n      messageArr.unshift('Multiple errors occurred during the request. Please see the `errors` array for complete details.\\n');\n      messageArr.push('\\n');\n    }\n    return messageArr.join('\\n');\n  }\n}\nexports.ApiError = ApiError;\n/**\n * Custom error type for partial errors returned from the API.\n *\n * @param {object} b - Error object.\n */\nclass PartialFailureError extends Error {\n  constructor(b) {\n    super();\n    const errorObject = b;\n    this.errors = errorObject.errors;\n    this.name = 'PartialFailureError';\n    this.response = errorObject.response;\n    this.message = ApiError.createMultiErrorMessage(errorObject, this.errors);\n  }\n}\nexports.PartialFailureError = PartialFailureError;\nclass Util {\n  constructor() {\n    this.ApiError = ApiError;\n    this.PartialFailureError = PartialFailureError;\n  }\n  /**\n   * No op.\n   *\n   * @example\n   * function doSomething(callback) {\n   *   callback = callback || noop;\n   * }\n   */\n  noop() {}\n  /**\n   * Uniformly process an API response.\n   *\n   * @param {*} err - Error value.\n   * @param {*} resp - Response value.\n   * @param {*} body - Body value.\n   * @param {function} callback - The callback function.\n   */\n  handleResp(err, resp, body, callback) {\n    callback = callback || util.noop;\n    const parsedResp = {\n      err: err || null,\n      ...(resp && util.parseHttpRespMessage(resp)),\n      ...(body && util.parseHttpRespBody(body))\n    };\n    // Assign the parsed body to resp.body, even if { json: false } was passed\n    // as a request option.\n    // We assume that nobody uses the previously unparsed value of resp.body.\n    if (!parsedResp.err && resp && typeof parsedResp.body === 'object') {\n      parsedResp.resp.body = parsedResp.body;\n    }\n    if (parsedResp.err && resp) {\n      parsedResp.err.response = resp;\n    }\n    callback(parsedResp.err, parsedResp.body, parsedResp.resp);\n  }\n  /**\n   * Sniff an incoming HTTP response message for errors.\n   *\n   * @param {object} httpRespMessage - An incoming HTTP response message from `request`.\n   * @return {object} parsedHttpRespMessage - The parsed response.\n   * @param {?error} parsedHttpRespMessage.err - An error detected.\n   * @param {object} parsedHttpRespMessage.resp - The original response object.\n   */\n  parseHttpRespMessage(httpRespMessage) {\n    const parsedHttpRespMessage = {\n      resp: httpRespMessage\n    };\n    if (httpRespMessage.statusCode < 200 || httpRespMessage.statusCode > 299) {\n      // Unknown error. Format according to ApiError standard.\n      parsedHttpRespMessage.err = new ApiError({\n        errors: new Array(),\n        code: httpRespMessage.statusCode,\n        message: httpRespMessage.statusMessage,\n        response: httpRespMessage\n      });\n    }\n    return parsedHttpRespMessage;\n  }\n  /**\n   * Parse the response body from an HTTP request.\n   *\n   * @param {object} body - The response body.\n   * @return {object} parsedHttpRespMessage - The parsed response.\n   * @param {?error} parsedHttpRespMessage.err - An error detected.\n   * @param {object} parsedHttpRespMessage.body - The original body value provided\n   *     will try to be JSON.parse'd. If it's successful, the parsed value will\n   * be returned here, otherwise the original value and an error will be returned.\n   */\n  parseHttpRespBody(body) {\n    const parsedHttpRespBody = {\n      body\n    };\n    if (typeof body === 'string') {\n      try {\n        parsedHttpRespBody.body = JSON.parse(body);\n      } catch (err) {\n        parsedHttpRespBody.body = body;\n      }\n    }\n    if (parsedHttpRespBody.body && parsedHttpRespBody.body.error) {\n      // Error from JSON API.\n      parsedHttpRespBody.err = new ApiError(parsedHttpRespBody.body.error);\n    }\n    return parsedHttpRespBody;\n  }\n  /**\n   * Take a Duplexify stream, fetch an authenticated connection header, and\n   * create an outgoing writable stream.\n   *\n   * @param {Duplexify} dup - Duplexify stream.\n   * @param {object} options - Configuration object.\n   * @param {module:common/connection} options.connection - A connection instance used to get a token with and send the request through.\n   * @param {object} options.metadata - Metadata to send at the head of the request.\n   * @param {object} options.request - Request object, in the format of a standard Node.js http.request() object.\n   * @param {string=} options.request.method - Default: \"POST\".\n   * @param {string=} options.request.qs.uploadType - Default: \"multipart\".\n   * @param {string=} options.streamContentType - Default: \"application/octet-stream\".\n   * @param {function} onComplete - Callback, executed after the writable Request stream has completed.\n   */\n  makeWritableStream(dup, options, onComplete) {\n    var _a;\n    onComplete = onComplete || util.noop;\n    const writeStream = new ProgressStream();\n    writeStream.on('progress', evt => dup.emit('progress', evt));\n    dup.setWritable(writeStream);\n    const defaultReqOpts = {\n      method: 'POST',\n      qs: {\n        uploadType: 'multipart'\n      },\n      timeout: 0,\n      maxRetries: 0\n    };\n    const metadata = options.metadata || {};\n    const reqOpts = {\n      ...defaultReqOpts,\n      ...options.request,\n      qs: {\n        ...defaultReqOpts.qs,\n        ...((_a = options.request) === null || _a === void 0 ? void 0 : _a.qs)\n      },\n      multipart: [{\n        'Content-Type': 'application/json',\n        body: JSON.stringify(metadata)\n      }, {\n        'Content-Type': metadata.contentType || 'application/octet-stream',\n        body: writeStream\n      }]\n    };\n    options.makeAuthenticatedRequest(reqOpts, {\n      onAuthenticated(err, authenticatedReqOpts) {\n        if (err) {\n          dup.destroy(err);\n          return;\n        }\n        requestDefaults.headers = util._getDefaultHeaders(reqOpts[exports.GCCL_GCS_CMD_KEY]);\n        const request = teeny_request_1.teenyRequest.defaults(requestDefaults);\n        request(authenticatedReqOpts, (err, resp, body) => {\n          util.handleResp(err, resp, body, (err, data) => {\n            if (err) {\n              dup.destroy(err);\n              return;\n            }\n            dup.emit('response', resp);\n            onComplete(data);\n          });\n        });\n      }\n    });\n  }\n  /**\n   * Returns true if the API request should be retried, given the error that was\n   * given the first time the request was attempted. This is used for rate limit\n   * related errors as well as intermittent server errors.\n   *\n   * @param {error} err - The API error to check if it is appropriate to retry.\n   * @return {boolean} True if the API request should be retried, false otherwise.\n   */\n  shouldRetryRequest(err) {\n    if (err) {\n      if ([408, 429, 500, 502, 503, 504].indexOf(err.code) !== -1) {\n        return true;\n      }\n      if (err.errors) {\n        for (const e of err.errors) {\n          const reason = e.reason;\n          if (reason === 'rateLimitExceeded') {\n            return true;\n          }\n          if (reason === 'userRateLimitExceeded') {\n            return true;\n          }\n          if (reason && reason.includes('EAI_AGAIN')) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n  /**\n   * Get a function for making authenticated requests.\n   *\n   * @param {object} config - Configuration object.\n   * @param {boolean=} config.autoRetry - Automatically retry requests if the\n   *     response is related to rate limits or certain intermittent server\n   * errors. We will exponentially backoff subsequent requests by default.\n   * (default: true)\n   * @param {object=} config.credentials - Credentials object.\n   * @param {boolean=} config.customEndpoint - If true, just return the provided request options. Default: false.\n   * @param {boolean=} config.useAuthWithCustomEndpoint - If true, will authenticate when using a custom endpoint. Default: false.\n   * @param {string=} config.email - Account email address, required for PEM/P12 usage.\n   * @param {number=} config.maxRetries - Maximum number of automatic retries attempted before returning the error. (default: 3)\n   * @param {string=} config.keyFile - Path to a .json, .pem, or .p12 keyfile.\n   * @param {array} config.scopes - Array of scopes required for the API.\n   */\n  makeAuthenticatedRequestFactory(config) {\n    const googleAutoAuthConfig = {\n      ...config\n    };\n    if (googleAutoAuthConfig.projectId === service_js_1.DEFAULT_PROJECT_ID_TOKEN) {\n      delete googleAutoAuthConfig.projectId;\n    }\n    let authClient;\n    if (googleAutoAuthConfig.authClient instanceof google_auth_library_1.GoogleAuth) {\n      // Use an existing `GoogleAuth`\n      authClient = googleAutoAuthConfig.authClient;\n    } else {\n      // Pass an `AuthClient` & `clientOptions` to `GoogleAuth`, if available\n      authClient = new google_auth_library_1.GoogleAuth({\n        ...googleAutoAuthConfig,\n        authClient: googleAutoAuthConfig.authClient,\n        clientOptions: googleAutoAuthConfig.clientOptions\n      });\n    }\n    function makeAuthenticatedRequest(reqOpts, optionsOrCallback) {\n      let stream;\n      let projectId;\n      const reqConfig = {\n        ...config\n      };\n      let activeRequest_;\n      if (!optionsOrCallback) {\n        stream = (0, duplexify_1.default)();\n        reqConfig.stream = stream;\n      }\n      const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : undefined;\n      const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : undefined;\n      async function setProjectId() {\n        projectId = await authClient.getProjectId();\n      }\n      const onAuthenticated = async (err, authenticatedReqOpts) => {\n        const authLibraryError = err;\n        const autoAuthFailed = err && typeof err.message === 'string' && err.message.indexOf('Could not load the default credentials') > -1;\n        if (autoAuthFailed) {\n          // Even though authentication failed, the API might not actually\n          // care.\n          authenticatedReqOpts = reqOpts;\n        }\n        if (!err || autoAuthFailed) {\n          try {\n            // Try with existing `projectId` value\n            authenticatedReqOpts = util.decorateRequest(authenticatedReqOpts, projectId);\n            err = null;\n          } catch (e) {\n            if (e instanceof projectify_1.MissingProjectIdError) {\n              // A `projectId` was required, but we don't have one.\n              try {\n                // Attempt to get the `projectId`\n                await setProjectId();\n                authenticatedReqOpts = util.decorateRequest(authenticatedReqOpts, projectId);\n                err = null;\n              } catch (e) {\n                // Re-use the \"Could not load the default credentials error\" if\n                // auto auth failed.\n                err = err || e;\n              }\n            } else {\n              // Some other error unrelated to missing `projectId`\n              err = err || e;\n            }\n          }\n        }\n        if (err) {\n          if (stream) {\n            stream.destroy(err);\n          } else {\n            const fn = options && options.onAuthenticated ? options.onAuthenticated : callback;\n            fn(err);\n          }\n          return;\n        }\n        if (options && options.onAuthenticated) {\n          options.onAuthenticated(null, authenticatedReqOpts);\n        } else {\n          activeRequest_ = util.makeRequest(authenticatedReqOpts, reqConfig, function (apiResponseError) {\n            if (apiResponseError && apiResponseError.code === 401 && authLibraryError) {\n              // Re-use the \"Could not load the default credentials error\" if\n              // the API request failed due to missing credentials.\n              apiResponseError = authLibraryError;\n            }\n            for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n              params[_key - 1] = arguments[_key];\n            }\n            callback(apiResponseError, ...params);\n          });\n        }\n      };\n      const prepareRequest = async () => {\n        try {\n          const getProjectId = async () => {\n            if (config.projectId && config.projectId !== service_js_1.DEFAULT_PROJECT_ID_TOKEN) {\n              // The user provided a project ID. We don't need to check with the\n              // auth client, it could be incorrect.\n              return config.projectId;\n            }\n            if (config.projectIdRequired === false) {\n              // A projectId is not required. Return the default.\n              return service_js_1.DEFAULT_PROJECT_ID_TOKEN;\n            }\n            return setProjectId();\n          };\n          const authorizeRequest = async () => {\n            if (reqConfig.customEndpoint && !reqConfig.useAuthWithCustomEndpoint) {\n              // Using a custom API override. Do not use `google-auth-library` for\n              // authentication. (ex: connecting to a local Datastore server)\n              return reqOpts;\n            } else {\n              return authClient.authorizeRequest(reqOpts);\n            }\n          };\n          const [_projectId, authorizedReqOpts] = await Promise.all([getProjectId(), authorizeRequest()]);\n          if (_projectId) {\n            projectId = _projectId;\n          }\n          return onAuthenticated(null, authorizedReqOpts);\n        } catch (e) {\n          return onAuthenticated(e);\n        }\n      };\n      prepareRequest();\n      if (stream) {\n        return stream;\n      }\n      return {\n        abort() {\n          setImmediate(() => {\n            if (activeRequest_) {\n              activeRequest_.abort();\n              activeRequest_ = null;\n            }\n          });\n        }\n      };\n    }\n    const mar = makeAuthenticatedRequest;\n    mar.getCredentials = authClient.getCredentials.bind(authClient);\n    mar.authClient = authClient;\n    return mar;\n  }\n  /**\n   * Make a request through the `retryRequest` module with built-in error\n   * handling and exponential back off.\n   *\n   * @param {object} reqOpts - Request options in the format `request` expects.\n   * @param {object=} config - Configuration object.\n   * @param {boolean=} config.autoRetry - Automatically retry requests if the\n   *     response is related to rate limits or certain intermittent server\n   * errors. We will exponentially backoff subsequent requests by default.\n   * (default: true)\n   * @param {number=} config.maxRetries - Maximum number of automatic retries\n   *     attempted before returning the error. (default: 3)\n   * @param {object=} config.request - HTTP module for request calls.\n   * @param {function} callback - The callback function.\n   */\n  makeRequest(reqOpts, config, callback) {\n    var _a, _b, _c, _d, _e;\n    let autoRetryValue = AUTO_RETRY_DEFAULT;\n    if (config.autoRetry !== undefined) {\n      autoRetryValue = config.autoRetry;\n    } else if (((_a = config.retryOptions) === null || _a === void 0 ? void 0 : _a.autoRetry) !== undefined) {\n      autoRetryValue = config.retryOptions.autoRetry;\n    }\n    let maxRetryValue = MAX_RETRY_DEFAULT;\n    if (config.maxRetries !== undefined) {\n      maxRetryValue = config.maxRetries;\n    } else if (((_b = config.retryOptions) === null || _b === void 0 ? void 0 : _b.maxRetries) !== undefined) {\n      maxRetryValue = config.retryOptions.maxRetries;\n    }\n    requestDefaults.headers = this._getDefaultHeaders(reqOpts[exports.GCCL_GCS_CMD_KEY]);\n    const options = {\n      request: teeny_request_1.teenyRequest.defaults(requestDefaults),\n      retries: autoRetryValue !== false ? maxRetryValue : 0,\n      noResponseRetries: autoRetryValue !== false ? maxRetryValue : 0,\n      shouldRetryFn(httpRespMessage) {\n        var _a, _b;\n        const err = util.parseHttpRespMessage(httpRespMessage).err;\n        if ((_a = config.retryOptions) === null || _a === void 0 ? void 0 : _a.retryableErrorFn) {\n          return err && ((_b = config.retryOptions) === null || _b === void 0 ? void 0 : _b.retryableErrorFn(err));\n        }\n        return err && util.shouldRetryRequest(err);\n      },\n      maxRetryDelay: (_c = config.retryOptions) === null || _c === void 0 ? void 0 : _c.maxRetryDelay,\n      retryDelayMultiplier: (_d = config.retryOptions) === null || _d === void 0 ? void 0 : _d.retryDelayMultiplier,\n      totalTimeout: (_e = config.retryOptions) === null || _e === void 0 ? void 0 : _e.totalTimeout\n    };\n    if (typeof reqOpts.maxRetries === 'number') {\n      options.retries = reqOpts.maxRetries;\n      options.noResponseRetries = reqOpts.maxRetries;\n    }\n    if (!config.stream) {\n      return (0, retry_request_1.default)(reqOpts, options,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (err, response, body) => {\n        util.handleResp(err, response, body, callback);\n      });\n    }\n    const dup = config.stream;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let requestStream;\n    const isGetRequest = (reqOpts.method || 'GET').toUpperCase() === 'GET';\n    if (isGetRequest) {\n      requestStream = (0, retry_request_1.default)(reqOpts, options);\n      dup.setReadable(requestStream);\n    } else {\n      // Streaming writable HTTP requests cannot be retried.\n      requestStream = options.request(reqOpts);\n      dup.setWritable(requestStream);\n    }\n    // Replay the Request events back to the stream.\n    requestStream.on('error', dup.destroy.bind(dup)).on('response', dup.emit.bind(dup, 'response')).on('complete', dup.emit.bind(dup, 'complete'));\n    dup.abort = requestStream.abort;\n    return dup;\n  }\n  /**\n   * Decorate the options about to be made in a request.\n   *\n   * @param {object} reqOpts - The options to be passed to `request`.\n   * @param {string} projectId - The project ID.\n   * @return {object} reqOpts - The decorated reqOpts.\n   */\n  decorateRequest(reqOpts, projectId) {\n    delete reqOpts.autoPaginate;\n    delete reqOpts.autoPaginateVal;\n    delete reqOpts.objectMode;\n    if (reqOpts.qs !== null && typeof reqOpts.qs === 'object') {\n      delete reqOpts.qs.autoPaginate;\n      delete reqOpts.qs.autoPaginateVal;\n      reqOpts.qs = (0, projectify_1.replaceProjectIdToken)(reqOpts.qs, projectId);\n    }\n    if (Array.isArray(reqOpts.multipart)) {\n      reqOpts.multipart = reqOpts.multipart.map(part => {\n        return (0, projectify_1.replaceProjectIdToken)(part, projectId);\n      });\n    }\n    if (reqOpts.json !== null && typeof reqOpts.json === 'object') {\n      delete reqOpts.json.autoPaginate;\n      delete reqOpts.json.autoPaginateVal;\n      reqOpts.json = (0, projectify_1.replaceProjectIdToken)(reqOpts.json, projectId);\n    }\n    reqOpts.uri = (0, projectify_1.replaceProjectIdToken)(reqOpts.uri, projectId);\n    return reqOpts;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  isCustomType(unknown, module) {\n    function getConstructorName(obj) {\n      return obj.constructor && obj.constructor.name.toLowerCase();\n    }\n    const moduleNameParts = module.split('/');\n    const parentModuleName = moduleNameParts[0] && moduleNameParts[0].toLowerCase();\n    const subModuleName = moduleNameParts[1] && moduleNameParts[1].toLowerCase();\n    if (subModuleName && getConstructorName(unknown) !== subModuleName) {\n      return false;\n    }\n    let walkingModule = unknown;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      if (getConstructorName(walkingModule) === parentModuleName) {\n        return true;\n      }\n      walkingModule = walkingModule.parent;\n      if (!walkingModule) {\n        return false;\n      }\n    }\n  }\n  /**\n   * Given two parameters, figure out if this is either:\n   *  - Just a callback function\n   *  - An options object, and then a callback function\n   * @param optionsOrCallback An options object or callback.\n   * @param cb A potentially undefined callback.\n   */\n  maybeOptionsOrCallback(optionsOrCallback, cb) {\n    return typeof optionsOrCallback === 'function' ? [{}, optionsOrCallback] : [optionsOrCallback, cb];\n  }\n  _getDefaultHeaders(gcclGcsCmd) {\n    const headers = {\n      'User-Agent': (0, util_js_1.getUserAgentString)(),\n      'x-goog-api-client': `${(0, util_js_1.getRuntimeTrackingString)()} gccl/${packageJson.version}-${(0, util_js_1.getModuleFormat)()} gccl-invocation-id/${uuid.v4()}`\n    };\n    if (gcclGcsCmd) {\n      headers['x-goog-api-client'] += ` gccl-gcs-cmd/${gcclGcsCmd}`;\n    }\n    return headers;\n  }\n}\nexports.Util = Util;\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */\nclass ProgressStream extends stream_1.Transform {\n  constructor() {\n    super(...arguments);\n    this.bytesRead = 0;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _transform(chunk, encoding, callback) {\n    this.bytesRead += chunk.length;\n    this.emit('progress', {\n      bytesWritten: this.bytesRead,\n      contentLength: '*'\n    });\n    this.push(chunk);\n    callback();\n  }\n}\nconst util = new Util();\nexports.util = util;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","util","Util","PartialFailureError","ApiError","GCCL_GCS_CMD_KEY","projectify_1","require","htmlEntities","google_auth_library_1","retry_request_1","stream_1","teeny_request_1","uuid","service_js_1","util_js_1","duplexify_1","package_json_helper_cjs_1","packageJson","getPackageJSON","Symbol","for","requestDefaults","timeout","gzip","forever","pool","maxSockets","Infinity","AUTO_RETRY_DEFAULT","MAX_RETRY_DEFAULT","Error","constructor","errorBodyOrMessage","message","errorBody","code","errors","response","JSON","parse","body","error","e","createMultiErrorMessage","captureStackTrace","err","messages","Set","add","length","forEach","decode","toString","messageArr","Array","from","map","i","unshift","push","join","b","errorObject","name","noop","handleResp","resp","callback","parsedResp","parseHttpRespMessage","parseHttpRespBody","httpRespMessage","parsedHttpRespMessage","statusCode","statusMessage","parsedHttpRespBody","makeWritableStream","dup","options","onComplete","_a","writeStream","ProgressStream","on","evt","emit","setWritable","defaultReqOpts","method","qs","uploadType","maxRetries","metadata","reqOpts","request","multipart","stringify","contentType","makeAuthenticatedRequest","onAuthenticated","authenticatedReqOpts","destroy","headers","_getDefaultHeaders","teenyRequest","defaults","data","shouldRetryRequest","indexOf","reason","includes","makeAuthenticatedRequestFactory","config","googleAutoAuthConfig","projectId","DEFAULT_PROJECT_ID_TOKEN","authClient","GoogleAuth","clientOptions","optionsOrCallback","stream","reqConfig","activeRequest_","default","setProjectId","getProjectId","authLibraryError","autoAuthFailed","decorateRequest","MissingProjectIdError","fn","makeRequest","apiResponseError","params","prepareRequest","projectIdRequired","authorizeRequest","customEndpoint","useAuthWithCustomEndpoint","_projectId","authorizedReqOpts","Promise","all","abort","setImmediate","mar","getCredentials","bind","_b","_c","_d","_e","autoRetryValue","autoRetry","retryOptions","maxRetryValue","retries","noResponseRetries","shouldRetryFn","retryableErrorFn","maxRetryDelay","retryDelayMultiplier","totalTimeout","requestStream","isGetRequest","toUpperCase","setReadable","autoPaginate","autoPaginateVal","objectMode","replaceProjectIdToken","isArray","part","json","uri","isCustomType","unknown","module","getConstructorName","obj","toLowerCase","moduleNameParts","split","parentModuleName","subModuleName","walkingModule","parent","maybeOptionsOrCallback","cb","gcclGcsCmd","getUserAgentString","getRuntimeTrackingString","version","getModuleFormat","v4","Transform","arguments","bytesRead","_transform","chunk","encoding","bytesWritten","contentLength"],"sources":["/home/yadu/Music/Gifty/node_modules/@google-cloud/storage/build/cjs/src/nodejs-common/util.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2022 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.util = exports.Util = exports.PartialFailureError = exports.ApiError = exports.GCCL_GCS_CMD_KEY = void 0;\n/*!\n * @module common/util\n */\nconst projectify_1 = require(\"@google-cloud/projectify\");\nconst htmlEntities = __importStar(require(\"html-entities\"));\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst retry_request_1 = __importDefault(require(\"retry-request\"));\nconst stream_1 = require(\"stream\");\nconst teeny_request_1 = require(\"teeny-request\");\nconst uuid = __importStar(require(\"uuid\"));\nconst service_js_1 = require(\"./service.js\");\nconst util_js_1 = require(\"../util.js\");\nconst duplexify_1 = __importDefault(require(\"duplexify\"));\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst package_json_helper_cjs_1 = require(\"../package-json-helper.cjs\");\nconst packageJson = (0, package_json_helper_cjs_1.getPackageJSON)();\n/**\n * A unique symbol for providing a `gccl-gcs-cmd` value\n * for the `X-Goog-API-Client` header.\n *\n * E.g. the `V` in `X-Goog-API-Client: gccl-gcs-cmd/V`\n **/\nexports.GCCL_GCS_CMD_KEY = Symbol.for('GCCL_GCS_CMD');\nconst requestDefaults = {\n    timeout: 60000,\n    gzip: true,\n    forever: true,\n    pool: {\n        maxSockets: Infinity,\n    },\n};\n/**\n * Default behavior: Automatically retry retriable server errors.\n *\n * @const {boolean}\n * @private\n */\nconst AUTO_RETRY_DEFAULT = true;\n/**\n * Default behavior: Only attempt to retry retriable errors 3 times.\n *\n * @const {number}\n * @private\n */\nconst MAX_RETRY_DEFAULT = 3;\n/**\n * Custom error type for API errors.\n *\n * @param {object} errorBody - Error object.\n */\nclass ApiError extends Error {\n    constructor(errorBodyOrMessage) {\n        super();\n        if (typeof errorBodyOrMessage !== 'object') {\n            this.message = errorBodyOrMessage || '';\n            return;\n        }\n        const errorBody = errorBodyOrMessage;\n        this.code = errorBody.code;\n        this.errors = errorBody.errors;\n        this.response = errorBody.response;\n        try {\n            this.errors = JSON.parse(this.response.body).error.errors;\n        }\n        catch (e) {\n            this.errors = errorBody.errors;\n        }\n        this.message = ApiError.createMultiErrorMessage(errorBody, this.errors);\n        Error.captureStackTrace(this);\n    }\n    /**\n     * Pieces together an error message by combining all unique error messages\n     * returned from a single GoogleError\n     *\n     * @private\n     *\n     * @param {GoogleErrorBody} err The original error.\n     * @param {GoogleInnerError[]} [errors] Inner errors, if any.\n     * @returns {string}\n     */\n    static createMultiErrorMessage(err, errors) {\n        const messages = new Set();\n        if (err.message) {\n            messages.add(err.message);\n        }\n        if (errors && errors.length) {\n            errors.forEach(({ message }) => messages.add(message));\n        }\n        else if (err.response && err.response.body) {\n            messages.add(htmlEntities.decode(err.response.body.toString()));\n        }\n        else if (!err.message) {\n            messages.add('A failure occurred during this request.');\n        }\n        let messageArr = Array.from(messages);\n        if (messageArr.length > 1) {\n            messageArr = messageArr.map((message, i) => `    ${i + 1}. ${message}`);\n            messageArr.unshift('Multiple errors occurred during the request. Please see the `errors` array for complete details.\\n');\n            messageArr.push('\\n');\n        }\n        return messageArr.join('\\n');\n    }\n}\nexports.ApiError = ApiError;\n/**\n * Custom error type for partial errors returned from the API.\n *\n * @param {object} b - Error object.\n */\nclass PartialFailureError extends Error {\n    constructor(b) {\n        super();\n        const errorObject = b;\n        this.errors = errorObject.errors;\n        this.name = 'PartialFailureError';\n        this.response = errorObject.response;\n        this.message = ApiError.createMultiErrorMessage(errorObject, this.errors);\n    }\n}\nexports.PartialFailureError = PartialFailureError;\nclass Util {\n    constructor() {\n        this.ApiError = ApiError;\n        this.PartialFailureError = PartialFailureError;\n    }\n    /**\n     * No op.\n     *\n     * @example\n     * function doSomething(callback) {\n     *   callback = callback || noop;\n     * }\n     */\n    noop() { }\n    /**\n     * Uniformly process an API response.\n     *\n     * @param {*} err - Error value.\n     * @param {*} resp - Response value.\n     * @param {*} body - Body value.\n     * @param {function} callback - The callback function.\n     */\n    handleResp(err, resp, body, callback) {\n        callback = callback || util.noop;\n        const parsedResp = {\n            err: err || null,\n            ...(resp && util.parseHttpRespMessage(resp)),\n            ...(body && util.parseHttpRespBody(body)),\n        };\n        // Assign the parsed body to resp.body, even if { json: false } was passed\n        // as a request option.\n        // We assume that nobody uses the previously unparsed value of resp.body.\n        if (!parsedResp.err && resp && typeof parsedResp.body === 'object') {\n            parsedResp.resp.body = parsedResp.body;\n        }\n        if (parsedResp.err && resp) {\n            parsedResp.err.response = resp;\n        }\n        callback(parsedResp.err, parsedResp.body, parsedResp.resp);\n    }\n    /**\n     * Sniff an incoming HTTP response message for errors.\n     *\n     * @param {object} httpRespMessage - An incoming HTTP response message from `request`.\n     * @return {object} parsedHttpRespMessage - The parsed response.\n     * @param {?error} parsedHttpRespMessage.err - An error detected.\n     * @param {object} parsedHttpRespMessage.resp - The original response object.\n     */\n    parseHttpRespMessage(httpRespMessage) {\n        const parsedHttpRespMessage = {\n            resp: httpRespMessage,\n        };\n        if (httpRespMessage.statusCode < 200 || httpRespMessage.statusCode > 299) {\n            // Unknown error. Format according to ApiError standard.\n            parsedHttpRespMessage.err = new ApiError({\n                errors: new Array(),\n                code: httpRespMessage.statusCode,\n                message: httpRespMessage.statusMessage,\n                response: httpRespMessage,\n            });\n        }\n        return parsedHttpRespMessage;\n    }\n    /**\n     * Parse the response body from an HTTP request.\n     *\n     * @param {object} body - The response body.\n     * @return {object} parsedHttpRespMessage - The parsed response.\n     * @param {?error} parsedHttpRespMessage.err - An error detected.\n     * @param {object} parsedHttpRespMessage.body - The original body value provided\n     *     will try to be JSON.parse'd. If it's successful, the parsed value will\n     * be returned here, otherwise the original value and an error will be returned.\n     */\n    parseHttpRespBody(body) {\n        const parsedHttpRespBody = {\n            body,\n        };\n        if (typeof body === 'string') {\n            try {\n                parsedHttpRespBody.body = JSON.parse(body);\n            }\n            catch (err) {\n                parsedHttpRespBody.body = body;\n            }\n        }\n        if (parsedHttpRespBody.body && parsedHttpRespBody.body.error) {\n            // Error from JSON API.\n            parsedHttpRespBody.err = new ApiError(parsedHttpRespBody.body.error);\n        }\n        return parsedHttpRespBody;\n    }\n    /**\n     * Take a Duplexify stream, fetch an authenticated connection header, and\n     * create an outgoing writable stream.\n     *\n     * @param {Duplexify} dup - Duplexify stream.\n     * @param {object} options - Configuration object.\n     * @param {module:common/connection} options.connection - A connection instance used to get a token with and send the request through.\n     * @param {object} options.metadata - Metadata to send at the head of the request.\n     * @param {object} options.request - Request object, in the format of a standard Node.js http.request() object.\n     * @param {string=} options.request.method - Default: \"POST\".\n     * @param {string=} options.request.qs.uploadType - Default: \"multipart\".\n     * @param {string=} options.streamContentType - Default: \"application/octet-stream\".\n     * @param {function} onComplete - Callback, executed after the writable Request stream has completed.\n     */\n    makeWritableStream(dup, options, onComplete) {\n        var _a;\n        onComplete = onComplete || util.noop;\n        const writeStream = new ProgressStream();\n        writeStream.on('progress', evt => dup.emit('progress', evt));\n        dup.setWritable(writeStream);\n        const defaultReqOpts = {\n            method: 'POST',\n            qs: {\n                uploadType: 'multipart',\n            },\n            timeout: 0,\n            maxRetries: 0,\n        };\n        const metadata = options.metadata || {};\n        const reqOpts = {\n            ...defaultReqOpts,\n            ...options.request,\n            qs: {\n                ...defaultReqOpts.qs,\n                ...(_a = options.request) === null || _a === void 0 ? void 0 : _a.qs,\n            },\n            multipart: [\n                {\n                    'Content-Type': 'application/json',\n                    body: JSON.stringify(metadata),\n                },\n                {\n                    'Content-Type': metadata.contentType || 'application/octet-stream',\n                    body: writeStream,\n                },\n            ],\n        };\n        options.makeAuthenticatedRequest(reqOpts, {\n            onAuthenticated(err, authenticatedReqOpts) {\n                if (err) {\n                    dup.destroy(err);\n                    return;\n                }\n                requestDefaults.headers = util._getDefaultHeaders(reqOpts[exports.GCCL_GCS_CMD_KEY]);\n                const request = teeny_request_1.teenyRequest.defaults(requestDefaults);\n                request(authenticatedReqOpts, (err, resp, body) => {\n                    util.handleResp(err, resp, body, (err, data) => {\n                        if (err) {\n                            dup.destroy(err);\n                            return;\n                        }\n                        dup.emit('response', resp);\n                        onComplete(data);\n                    });\n                });\n            },\n        });\n    }\n    /**\n     * Returns true if the API request should be retried, given the error that was\n     * given the first time the request was attempted. This is used for rate limit\n     * related errors as well as intermittent server errors.\n     *\n     * @param {error} err - The API error to check if it is appropriate to retry.\n     * @return {boolean} True if the API request should be retried, false otherwise.\n     */\n    shouldRetryRequest(err) {\n        if (err) {\n            if ([408, 429, 500, 502, 503, 504].indexOf(err.code) !== -1) {\n                return true;\n            }\n            if (err.errors) {\n                for (const e of err.errors) {\n                    const reason = e.reason;\n                    if (reason === 'rateLimitExceeded') {\n                        return true;\n                    }\n                    if (reason === 'userRateLimitExceeded') {\n                        return true;\n                    }\n                    if (reason && reason.includes('EAI_AGAIN')) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    /**\n     * Get a function for making authenticated requests.\n     *\n     * @param {object} config - Configuration object.\n     * @param {boolean=} config.autoRetry - Automatically retry requests if the\n     *     response is related to rate limits or certain intermittent server\n     * errors. We will exponentially backoff subsequent requests by default.\n     * (default: true)\n     * @param {object=} config.credentials - Credentials object.\n     * @param {boolean=} config.customEndpoint - If true, just return the provided request options. Default: false.\n     * @param {boolean=} config.useAuthWithCustomEndpoint - If true, will authenticate when using a custom endpoint. Default: false.\n     * @param {string=} config.email - Account email address, required for PEM/P12 usage.\n     * @param {number=} config.maxRetries - Maximum number of automatic retries attempted before returning the error. (default: 3)\n     * @param {string=} config.keyFile - Path to a .json, .pem, or .p12 keyfile.\n     * @param {array} config.scopes - Array of scopes required for the API.\n     */\n    makeAuthenticatedRequestFactory(config) {\n        const googleAutoAuthConfig = { ...config };\n        if (googleAutoAuthConfig.projectId === service_js_1.DEFAULT_PROJECT_ID_TOKEN) {\n            delete googleAutoAuthConfig.projectId;\n        }\n        let authClient;\n        if (googleAutoAuthConfig.authClient instanceof google_auth_library_1.GoogleAuth) {\n            // Use an existing `GoogleAuth`\n            authClient = googleAutoAuthConfig.authClient;\n        }\n        else {\n            // Pass an `AuthClient` & `clientOptions` to `GoogleAuth`, if available\n            authClient = new google_auth_library_1.GoogleAuth({\n                ...googleAutoAuthConfig,\n                authClient: googleAutoAuthConfig.authClient,\n                clientOptions: googleAutoAuthConfig.clientOptions,\n            });\n        }\n        function makeAuthenticatedRequest(reqOpts, optionsOrCallback) {\n            let stream;\n            let projectId;\n            const reqConfig = { ...config };\n            let activeRequest_;\n            if (!optionsOrCallback) {\n                stream = (0, duplexify_1.default)();\n                reqConfig.stream = stream;\n            }\n            const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : undefined;\n            const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : undefined;\n            async function setProjectId() {\n                projectId = await authClient.getProjectId();\n            }\n            const onAuthenticated = async (err, authenticatedReqOpts) => {\n                const authLibraryError = err;\n                const autoAuthFailed = err &&\n                    typeof err.message === 'string' &&\n                    err.message.indexOf('Could not load the default credentials') > -1;\n                if (autoAuthFailed) {\n                    // Even though authentication failed, the API might not actually\n                    // care.\n                    authenticatedReqOpts = reqOpts;\n                }\n                if (!err || autoAuthFailed) {\n                    try {\n                        // Try with existing `projectId` value\n                        authenticatedReqOpts = util.decorateRequest(authenticatedReqOpts, projectId);\n                        err = null;\n                    }\n                    catch (e) {\n                        if (e instanceof projectify_1.MissingProjectIdError) {\n                            // A `projectId` was required, but we don't have one.\n                            try {\n                                // Attempt to get the `projectId`\n                                await setProjectId();\n                                authenticatedReqOpts = util.decorateRequest(authenticatedReqOpts, projectId);\n                                err = null;\n                            }\n                            catch (e) {\n                                // Re-use the \"Could not load the default credentials error\" if\n                                // auto auth failed.\n                                err = err || e;\n                            }\n                        }\n                        else {\n                            // Some other error unrelated to missing `projectId`\n                            err = err || e;\n                        }\n                    }\n                }\n                if (err) {\n                    if (stream) {\n                        stream.destroy(err);\n                    }\n                    else {\n                        const fn = options && options.onAuthenticated\n                            ? options.onAuthenticated\n                            : callback;\n                        fn(err);\n                    }\n                    return;\n                }\n                if (options && options.onAuthenticated) {\n                    options.onAuthenticated(null, authenticatedReqOpts);\n                }\n                else {\n                    activeRequest_ = util.makeRequest(authenticatedReqOpts, reqConfig, (apiResponseError, ...params) => {\n                        if (apiResponseError &&\n                            apiResponseError.code === 401 &&\n                            authLibraryError) {\n                            // Re-use the \"Could not load the default credentials error\" if\n                            // the API request failed due to missing credentials.\n                            apiResponseError = authLibraryError;\n                        }\n                        callback(apiResponseError, ...params);\n                    });\n                }\n            };\n            const prepareRequest = async () => {\n                try {\n                    const getProjectId = async () => {\n                        if (config.projectId &&\n                            config.projectId !== service_js_1.DEFAULT_PROJECT_ID_TOKEN) {\n                            // The user provided a project ID. We don't need to check with the\n                            // auth client, it could be incorrect.\n                            return config.projectId;\n                        }\n                        if (config.projectIdRequired === false) {\n                            // A projectId is not required. Return the default.\n                            return service_js_1.DEFAULT_PROJECT_ID_TOKEN;\n                        }\n                        return setProjectId();\n                    };\n                    const authorizeRequest = async () => {\n                        if (reqConfig.customEndpoint &&\n                            !reqConfig.useAuthWithCustomEndpoint) {\n                            // Using a custom API override. Do not use `google-auth-library` for\n                            // authentication. (ex: connecting to a local Datastore server)\n                            return reqOpts;\n                        }\n                        else {\n                            return authClient.authorizeRequest(reqOpts);\n                        }\n                    };\n                    const [_projectId, authorizedReqOpts] = await Promise.all([\n                        getProjectId(),\n                        authorizeRequest(),\n                    ]);\n                    if (_projectId) {\n                        projectId = _projectId;\n                    }\n                    return onAuthenticated(null, authorizedReqOpts);\n                }\n                catch (e) {\n                    return onAuthenticated(e);\n                }\n            };\n            prepareRequest();\n            if (stream) {\n                return stream;\n            }\n            return {\n                abort() {\n                    setImmediate(() => {\n                        if (activeRequest_) {\n                            activeRequest_.abort();\n                            activeRequest_ = null;\n                        }\n                    });\n                },\n            };\n        }\n        const mar = makeAuthenticatedRequest;\n        mar.getCredentials = authClient.getCredentials.bind(authClient);\n        mar.authClient = authClient;\n        return mar;\n    }\n    /**\n     * Make a request through the `retryRequest` module with built-in error\n     * handling and exponential back off.\n     *\n     * @param {object} reqOpts - Request options in the format `request` expects.\n     * @param {object=} config - Configuration object.\n     * @param {boolean=} config.autoRetry - Automatically retry requests if the\n     *     response is related to rate limits or certain intermittent server\n     * errors. We will exponentially backoff subsequent requests by default.\n     * (default: true)\n     * @param {number=} config.maxRetries - Maximum number of automatic retries\n     *     attempted before returning the error. (default: 3)\n     * @param {object=} config.request - HTTP module for request calls.\n     * @param {function} callback - The callback function.\n     */\n    makeRequest(reqOpts, config, callback) {\n        var _a, _b, _c, _d, _e;\n        let autoRetryValue = AUTO_RETRY_DEFAULT;\n        if (config.autoRetry !== undefined) {\n            autoRetryValue = config.autoRetry;\n        }\n        else if (((_a = config.retryOptions) === null || _a === void 0 ? void 0 : _a.autoRetry) !== undefined) {\n            autoRetryValue = config.retryOptions.autoRetry;\n        }\n        let maxRetryValue = MAX_RETRY_DEFAULT;\n        if (config.maxRetries !== undefined) {\n            maxRetryValue = config.maxRetries;\n        }\n        else if (((_b = config.retryOptions) === null || _b === void 0 ? void 0 : _b.maxRetries) !== undefined) {\n            maxRetryValue = config.retryOptions.maxRetries;\n        }\n        requestDefaults.headers = this._getDefaultHeaders(reqOpts[exports.GCCL_GCS_CMD_KEY]);\n        const options = {\n            request: teeny_request_1.teenyRequest.defaults(requestDefaults),\n            retries: autoRetryValue !== false ? maxRetryValue : 0,\n            noResponseRetries: autoRetryValue !== false ? maxRetryValue : 0,\n            shouldRetryFn(httpRespMessage) {\n                var _a, _b;\n                const err = util.parseHttpRespMessage(httpRespMessage).err;\n                if ((_a = config.retryOptions) === null || _a === void 0 ? void 0 : _a.retryableErrorFn) {\n                    return err && ((_b = config.retryOptions) === null || _b === void 0 ? void 0 : _b.retryableErrorFn(err));\n                }\n                return err && util.shouldRetryRequest(err);\n            },\n            maxRetryDelay: (_c = config.retryOptions) === null || _c === void 0 ? void 0 : _c.maxRetryDelay,\n            retryDelayMultiplier: (_d = config.retryOptions) === null || _d === void 0 ? void 0 : _d.retryDelayMultiplier,\n            totalTimeout: (_e = config.retryOptions) === null || _e === void 0 ? void 0 : _e.totalTimeout,\n        };\n        if (typeof reqOpts.maxRetries === 'number') {\n            options.retries = reqOpts.maxRetries;\n            options.noResponseRetries = reqOpts.maxRetries;\n        }\n        if (!config.stream) {\n            return (0, retry_request_1.default)(reqOpts, options, \n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (err, response, body) => {\n                util.handleResp(err, response, body, callback);\n            });\n        }\n        const dup = config.stream;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let requestStream;\n        const isGetRequest = (reqOpts.method || 'GET').toUpperCase() === 'GET';\n        if (isGetRequest) {\n            requestStream = (0, retry_request_1.default)(reqOpts, options);\n            dup.setReadable(requestStream);\n        }\n        else {\n            // Streaming writable HTTP requests cannot be retried.\n            requestStream = options.request(reqOpts);\n            dup.setWritable(requestStream);\n        }\n        // Replay the Request events back to the stream.\n        requestStream\n            .on('error', dup.destroy.bind(dup))\n            .on('response', dup.emit.bind(dup, 'response'))\n            .on('complete', dup.emit.bind(dup, 'complete'));\n        dup.abort = requestStream.abort;\n        return dup;\n    }\n    /**\n     * Decorate the options about to be made in a request.\n     *\n     * @param {object} reqOpts - The options to be passed to `request`.\n     * @param {string} projectId - The project ID.\n     * @return {object} reqOpts - The decorated reqOpts.\n     */\n    decorateRequest(reqOpts, projectId) {\n        delete reqOpts.autoPaginate;\n        delete reqOpts.autoPaginateVal;\n        delete reqOpts.objectMode;\n        if (reqOpts.qs !== null && typeof reqOpts.qs === 'object') {\n            delete reqOpts.qs.autoPaginate;\n            delete reqOpts.qs.autoPaginateVal;\n            reqOpts.qs = (0, projectify_1.replaceProjectIdToken)(reqOpts.qs, projectId);\n        }\n        if (Array.isArray(reqOpts.multipart)) {\n            reqOpts.multipart = reqOpts.multipart.map(part => {\n                return (0, projectify_1.replaceProjectIdToken)(part, projectId);\n            });\n        }\n        if (reqOpts.json !== null && typeof reqOpts.json === 'object') {\n            delete reqOpts.json.autoPaginate;\n            delete reqOpts.json.autoPaginateVal;\n            reqOpts.json = (0, projectify_1.replaceProjectIdToken)(reqOpts.json, projectId);\n        }\n        reqOpts.uri = (0, projectify_1.replaceProjectIdToken)(reqOpts.uri, projectId);\n        return reqOpts;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    isCustomType(unknown, module) {\n        function getConstructorName(obj) {\n            return obj.constructor && obj.constructor.name.toLowerCase();\n        }\n        const moduleNameParts = module.split('/');\n        const parentModuleName = moduleNameParts[0] && moduleNameParts[0].toLowerCase();\n        const subModuleName = moduleNameParts[1] && moduleNameParts[1].toLowerCase();\n        if (subModuleName && getConstructorName(unknown) !== subModuleName) {\n            return false;\n        }\n        let walkingModule = unknown;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            if (getConstructorName(walkingModule) === parentModuleName) {\n                return true;\n            }\n            walkingModule = walkingModule.parent;\n            if (!walkingModule) {\n                return false;\n            }\n        }\n    }\n    /**\n     * Given two parameters, figure out if this is either:\n     *  - Just a callback function\n     *  - An options object, and then a callback function\n     * @param optionsOrCallback An options object or callback.\n     * @param cb A potentially undefined callback.\n     */\n    maybeOptionsOrCallback(optionsOrCallback, cb) {\n        return typeof optionsOrCallback === 'function'\n            ? [{}, optionsOrCallback]\n            : [optionsOrCallback, cb];\n    }\n    _getDefaultHeaders(gcclGcsCmd) {\n        const headers = {\n            'User-Agent': (0, util_js_1.getUserAgentString)(),\n            'x-goog-api-client': `${(0, util_js_1.getRuntimeTrackingString)()} gccl/${packageJson.version}-${(0, util_js_1.getModuleFormat)()} gccl-invocation-id/${uuid.v4()}`,\n        };\n        if (gcclGcsCmd) {\n            headers['x-goog-api-client'] += ` gccl-gcs-cmd/${gcclGcsCmd}`;\n        }\n        return headers;\n    }\n}\nexports.Util = Util;\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */\nclass ProgressStream extends stream_1.Transform {\n    constructor() {\n        super(...arguments);\n        this.bytesRead = 0;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _transform(chunk, encoding, callback) {\n        this.bytesRead += chunk.length;\n        this.emit('progress', { bytesWritten: this.bytesRead, contentLength: '*' });\n        this.push(chunk);\n        callback();\n    }\n}\nconst util = new Util();\nexports.util = util;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,KAAMC,MAAM,CAACC,MAAM,GAAI,UAASC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAE;EAC5F,IAAIA,EAAE,KAAKC,SAAS,EAAED,EAAE,GAAGD,CAAC;EAC5B,IAAIG,IAAI,GAAGP,MAAM,CAACQ,wBAAwB,CAACL,CAAC,EAAEC,CAAC,CAAC;EAChD,IAAI,CAACG,IAAI,KAAK,KAAK,IAAIA,IAAI,GAAG,CAACJ,CAAC,CAACM,UAAU,GAAGF,IAAI,CAACG,QAAQ,IAAIH,IAAI,CAACI,YAAY,CAAC,EAAE;IACjFJ,IAAI,GAAG;MAAEK,UAAU,EAAE,IAAI;MAAEC,GAAG,EAAE,YAAW;QAAE,OAAOV,CAAC,CAACC,CAAC,CAAC;MAAE;IAAE,CAAC;EAC/D;EACAJ,MAAM,CAACc,cAAc,CAACZ,CAAC,EAAEG,EAAE,EAAEE,IAAI,CAAC;AACtC,CAAC,GAAK,UAASL,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAE;EACxB,IAAIA,EAAE,KAAKC,SAAS,EAAED,EAAE,GAAGD,CAAC;EAC5BF,CAAC,CAACG,EAAE,CAAC,GAAGF,CAAC,CAACC,CAAC,CAAC;AAChB,CAAE,CAAC;AACH,IAAIW,kBAAkB,GAAI,IAAI,IAAI,IAAI,CAACA,kBAAkB,KAAMf,MAAM,CAACC,MAAM,GAAI,UAASC,CAAC,EAAEc,CAAC,EAAE;EAC3FhB,MAAM,CAACc,cAAc,CAACZ,CAAC,EAAE,SAAS,EAAE;IAAEU,UAAU,EAAE,IAAI;IAAEK,KAAK,EAAED;EAAE,CAAC,CAAC;AACvE,CAAC,GAAI,UAASd,CAAC,EAAEc,CAAC,EAAE;EAChBd,CAAC,CAAC,SAAS,CAAC,GAAGc,CAAC;AACpB,CAAC,CAAC;AACF,IAAIE,YAAY,GAAI,IAAI,IAAI,IAAI,CAACA,YAAY,IAAK,UAAUC,GAAG,EAAE;EAC7D,IAAIA,GAAG,IAAIA,GAAG,CAACV,UAAU,EAAE,OAAOU,GAAG;EACrC,IAAIC,MAAM,GAAG,CAAC,CAAC;EACf,IAAID,GAAG,IAAI,IAAI,EAAE,KAAK,IAAIf,CAAC,IAAIe,GAAG,EAAE,IAAIf,CAAC,KAAK,SAAS,IAAIJ,MAAM,CAACqB,SAAS,CAACC,cAAc,CAACC,IAAI,CAACJ,GAAG,EAAEf,CAAC,CAAC,EAAEL,eAAe,CAACqB,MAAM,EAAED,GAAG,EAAEf,CAAC,CAAC;EACxIW,kBAAkB,CAACK,MAAM,EAAED,GAAG,CAAC;EAC/B,OAAOC,MAAM;AACjB,CAAC;AACD,IAAII,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUL,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACV,UAAU,GAAIU,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDnB,MAAM,CAACc,cAAc,CAACW,OAAO,EAAE,YAAY,EAAE;EAAER,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DQ,OAAO,CAACC,IAAI,GAAGD,OAAO,CAACE,IAAI,GAAGF,OAAO,CAACG,mBAAmB,GAAGH,OAAO,CAACI,QAAQ,GAAGJ,OAAO,CAACK,gBAAgB,GAAG,KAAK,CAAC;AAChH;AACA;AACA;AACA,MAAMC,YAAY,GAAGC,OAAO,CAAC,0BAA0B,CAAC;AACxD,MAAMC,YAAY,GAAGf,YAAY,CAACc,OAAO,CAAC,eAAe,CAAC,CAAC;AAC3D,MAAME,qBAAqB,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AAC5D,MAAMG,eAAe,GAAGX,eAAe,CAACQ,OAAO,CAAC,eAAe,CAAC,CAAC;AACjE,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,QAAQ,CAAC;AAClC,MAAMK,eAAe,GAAGL,OAAO,CAAC,eAAe,CAAC;AAChD,MAAMM,IAAI,GAAGpB,YAAY,CAACc,OAAO,CAAC,MAAM,CAAC,CAAC;AAC1C,MAAMO,YAAY,GAAGP,OAAO,CAAC,cAAc,CAAC;AAC5C,MAAMQ,SAAS,GAAGR,OAAO,CAAC,YAAY,CAAC;AACvC,MAAMS,WAAW,GAAGjB,eAAe,CAACQ,OAAO,CAAC,WAAW,CAAC,CAAC;AACzD;AACA;AACA,MAAMU,yBAAyB,GAAGV,OAAO,CAAC,4BAA4B,CAAC;AACvE,MAAMW,WAAW,GAAG,CAAC,CAAC,EAAED,yBAAyB,CAACE,cAAc,GAAG;AACnE;AACA;AACA;AACA;AACA;AACA;AACAnB,OAAO,CAACK,gBAAgB,GAAGe,MAAM,CAACC,GAAG,CAAC,cAAc,CAAC;AACrD,MAAMC,eAAe,GAAG;EACpBC,OAAO,EAAE,KAAK;EACdC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,IAAI;EACbC,IAAI,EAAE;IACFC,UAAU,EAAEC;EAChB;AACJ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,IAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA,MAAM1B,QAAQ,SAAS2B,KAAK,CAAC;EACzBC,WAAW,CAACC,kBAAkB,EAAE;IAC5B,KAAK,EAAE;IACP,IAAI,OAAOA,kBAAkB,KAAK,QAAQ,EAAE;MACxC,IAAI,CAACC,OAAO,GAAGD,kBAAkB,IAAI,EAAE;MACvC;IACJ;IACA,MAAME,SAAS,GAAGF,kBAAkB;IACpC,IAAI,CAACG,IAAI,GAAGD,SAAS,CAACC,IAAI;IAC1B,IAAI,CAACC,MAAM,GAAGF,SAAS,CAACE,MAAM;IAC9B,IAAI,CAACC,QAAQ,GAAGH,SAAS,CAACG,QAAQ;IAClC,IAAI;MACA,IAAI,CAACD,MAAM,GAAGE,IAAI,CAACC,KAAK,CAAC,IAAI,CAACF,QAAQ,CAACG,IAAI,CAAC,CAACC,KAAK,CAACL,MAAM;IAC7D,CAAC,CACD,OAAOM,CAAC,EAAE;MACN,IAAI,CAACN,MAAM,GAAGF,SAAS,CAACE,MAAM;IAClC;IACA,IAAI,CAACH,OAAO,GAAG9B,QAAQ,CAACwC,uBAAuB,CAACT,SAAS,EAAE,IAAI,CAACE,MAAM,CAAC;IACvEN,KAAK,CAACc,iBAAiB,CAAC,IAAI,CAAC;EACjC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOD,uBAAuB,CAACE,GAAG,EAAET,MAAM,EAAE;IACxC,MAAMU,QAAQ,GAAG,IAAIC,GAAG,EAAE;IAC1B,IAAIF,GAAG,CAACZ,OAAO,EAAE;MACba,QAAQ,CAACE,GAAG,CAACH,GAAG,CAACZ,OAAO,CAAC;IAC7B;IACA,IAAIG,MAAM,IAAIA,MAAM,CAACa,MAAM,EAAE;MACzBb,MAAM,CAACc,OAAO,CAAC;QAAA,IAAC;UAAEjB;QAAQ,CAAC;QAAA,OAAKa,QAAQ,CAACE,GAAG,CAACf,OAAO,CAAC;MAAA,EAAC;IAC1D,CAAC,MACI,IAAIY,GAAG,CAACR,QAAQ,IAAIQ,GAAG,CAACR,QAAQ,CAACG,IAAI,EAAE;MACxCM,QAAQ,CAACE,GAAG,CAACzC,YAAY,CAAC4C,MAAM,CAACN,GAAG,CAACR,QAAQ,CAACG,IAAI,CAACY,QAAQ,EAAE,CAAC,CAAC;IACnE,CAAC,MACI,IAAI,CAACP,GAAG,CAACZ,OAAO,EAAE;MACnBa,QAAQ,CAACE,GAAG,CAAC,yCAAyC,CAAC;IAC3D;IACA,IAAIK,UAAU,GAAGC,KAAK,CAACC,IAAI,CAACT,QAAQ,CAAC;IACrC,IAAIO,UAAU,CAACJ,MAAM,GAAG,CAAC,EAAE;MACvBI,UAAU,GAAGA,UAAU,CAACG,GAAG,CAAC,CAACvB,OAAO,EAAEwB,CAAC,KAAM,OAAMA,CAAC,GAAG,CAAE,KAAIxB,OAAQ,EAAC,CAAC;MACvEoB,UAAU,CAACK,OAAO,CAAC,oGAAoG,CAAC;MACxHL,UAAU,CAACM,IAAI,CAAC,IAAI,CAAC;IACzB;IACA,OAAON,UAAU,CAACO,IAAI,CAAC,IAAI,CAAC;EAChC;AACJ;AACA7D,OAAO,CAACI,QAAQ,GAAGA,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA,MAAMD,mBAAmB,SAAS4B,KAAK,CAAC;EACpCC,WAAW,CAAC8B,CAAC,EAAE;IACX,KAAK,EAAE;IACP,MAAMC,WAAW,GAAGD,CAAC;IACrB,IAAI,CAACzB,MAAM,GAAG0B,WAAW,CAAC1B,MAAM;IAChC,IAAI,CAAC2B,IAAI,GAAG,qBAAqB;IACjC,IAAI,CAAC1B,QAAQ,GAAGyB,WAAW,CAACzB,QAAQ;IACpC,IAAI,CAACJ,OAAO,GAAG9B,QAAQ,CAACwC,uBAAuB,CAACmB,WAAW,EAAE,IAAI,CAAC1B,MAAM,CAAC;EAC7E;AACJ;AACArC,OAAO,CAACG,mBAAmB,GAAGA,mBAAmB;AACjD,MAAMD,IAAI,CAAC;EACP8B,WAAW,GAAG;IACV,IAAI,CAAC5B,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACD,mBAAmB,GAAGA,mBAAmB;EAClD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI8D,IAAI,GAAG,CAAE;EACT;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,UAAU,CAACpB,GAAG,EAAEqB,IAAI,EAAE1B,IAAI,EAAE2B,QAAQ,EAAE;IAClCA,QAAQ,GAAGA,QAAQ,IAAInE,IAAI,CAACgE,IAAI;IAChC,MAAMI,UAAU,GAAG;MACfvB,GAAG,EAAEA,GAAG,IAAI,IAAI;MAChB,IAAIqB,IAAI,IAAIlE,IAAI,CAACqE,oBAAoB,CAACH,IAAI,CAAC,CAAC;MAC5C,IAAI1B,IAAI,IAAIxC,IAAI,CAACsE,iBAAiB,CAAC9B,IAAI,CAAC;IAC5C,CAAC;IACD;IACA;IACA;IACA,IAAI,CAAC4B,UAAU,CAACvB,GAAG,IAAIqB,IAAI,IAAI,OAAOE,UAAU,CAAC5B,IAAI,KAAK,QAAQ,EAAE;MAChE4B,UAAU,CAACF,IAAI,CAAC1B,IAAI,GAAG4B,UAAU,CAAC5B,IAAI;IAC1C;IACA,IAAI4B,UAAU,CAACvB,GAAG,IAAIqB,IAAI,EAAE;MACxBE,UAAU,CAACvB,GAAG,CAACR,QAAQ,GAAG6B,IAAI;IAClC;IACAC,QAAQ,CAACC,UAAU,CAACvB,GAAG,EAAEuB,UAAU,CAAC5B,IAAI,EAAE4B,UAAU,CAACF,IAAI,CAAC;EAC9D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,oBAAoB,CAACE,eAAe,EAAE;IAClC,MAAMC,qBAAqB,GAAG;MAC1BN,IAAI,EAAEK;IACV,CAAC;IACD,IAAIA,eAAe,CAACE,UAAU,GAAG,GAAG,IAAIF,eAAe,CAACE,UAAU,GAAG,GAAG,EAAE;MACtE;MACAD,qBAAqB,CAAC3B,GAAG,GAAG,IAAI1C,QAAQ,CAAC;QACrCiC,MAAM,EAAE,IAAIkB,KAAK,EAAE;QACnBnB,IAAI,EAAEoC,eAAe,CAACE,UAAU;QAChCxC,OAAO,EAAEsC,eAAe,CAACG,aAAa;QACtCrC,QAAQ,EAAEkC;MACd,CAAC,CAAC;IACN;IACA,OAAOC,qBAAqB;EAChC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIF,iBAAiB,CAAC9B,IAAI,EAAE;IACpB,MAAMmC,kBAAkB,GAAG;MACvBnC;IACJ,CAAC;IACD,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC1B,IAAI;QACAmC,kBAAkB,CAACnC,IAAI,GAAGF,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC;MAC9C,CAAC,CACD,OAAOK,GAAG,EAAE;QACR8B,kBAAkB,CAACnC,IAAI,GAAGA,IAAI;MAClC;IACJ;IACA,IAAImC,kBAAkB,CAACnC,IAAI,IAAImC,kBAAkB,CAACnC,IAAI,CAACC,KAAK,EAAE;MAC1D;MACAkC,kBAAkB,CAAC9B,GAAG,GAAG,IAAI1C,QAAQ,CAACwE,kBAAkB,CAACnC,IAAI,CAACC,KAAK,CAAC;IACxE;IACA,OAAOkC,kBAAkB;EAC7B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,kBAAkB,CAACC,GAAG,EAAEC,OAAO,EAAEC,UAAU,EAAE;IACzC,IAAIC,EAAE;IACND,UAAU,GAAGA,UAAU,IAAI/E,IAAI,CAACgE,IAAI;IACpC,MAAMiB,WAAW,GAAG,IAAIC,cAAc,EAAE;IACxCD,WAAW,CAACE,EAAE,CAAC,UAAU,EAAEC,GAAG,IAAIP,GAAG,CAACQ,IAAI,CAAC,UAAU,EAAED,GAAG,CAAC,CAAC;IAC5DP,GAAG,CAACS,WAAW,CAACL,WAAW,CAAC;IAC5B,MAAMM,cAAc,GAAG;MACnBC,MAAM,EAAE,MAAM;MACdC,EAAE,EAAE;QACAC,UAAU,EAAE;MAChB,CAAC;MACDpE,OAAO,EAAE,CAAC;MACVqE,UAAU,EAAE;IAChB,CAAC;IACD,MAAMC,QAAQ,GAAGd,OAAO,CAACc,QAAQ,IAAI,CAAC,CAAC;IACvC,MAAMC,OAAO,GAAG;MACZ,GAAGN,cAAc;MACjB,GAAGT,OAAO,CAACgB,OAAO;MAClBL,EAAE,EAAE;QACA,GAAGF,cAAc,CAACE,EAAE;QACpB,IAAG,CAACT,EAAE,GAAGF,OAAO,CAACgB,OAAO,MAAM,IAAI,IAAId,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACS,EAAE;MACxE,CAAC;MACDM,SAAS,EAAE,CACP;QACI,cAAc,EAAE,kBAAkB;QAClCvD,IAAI,EAAEF,IAAI,CAAC0D,SAAS,CAACJ,QAAQ;MACjC,CAAC,EACD;QACI,cAAc,EAAEA,QAAQ,CAACK,WAAW,IAAI,0BAA0B;QAClEzD,IAAI,EAAEyC;MACV,CAAC;IAET,CAAC;IACDH,OAAO,CAACoB,wBAAwB,CAACL,OAAO,EAAE;MACtCM,eAAe,CAACtD,GAAG,EAAEuD,oBAAoB,EAAE;QACvC,IAAIvD,GAAG,EAAE;UACLgC,GAAG,CAACwB,OAAO,CAACxD,GAAG,CAAC;UAChB;QACJ;QACAxB,eAAe,CAACiF,OAAO,GAAGtG,IAAI,CAACuG,kBAAkB,CAACV,OAAO,CAAC9F,OAAO,CAACK,gBAAgB,CAAC,CAAC;QACpF,MAAM0F,OAAO,GAAGnF,eAAe,CAAC6F,YAAY,CAACC,QAAQ,CAACpF,eAAe,CAAC;QACtEyE,OAAO,CAACM,oBAAoB,EAAE,CAACvD,GAAG,EAAEqB,IAAI,EAAE1B,IAAI,KAAK;UAC/CxC,IAAI,CAACiE,UAAU,CAACpB,GAAG,EAAEqB,IAAI,EAAE1B,IAAI,EAAE,CAACK,GAAG,EAAE6D,IAAI,KAAK;YAC5C,IAAI7D,GAAG,EAAE;cACLgC,GAAG,CAACwB,OAAO,CAACxD,GAAG,CAAC;cAChB;YACJ;YACAgC,GAAG,CAACQ,IAAI,CAAC,UAAU,EAAEnB,IAAI,CAAC;YAC1Ba,UAAU,CAAC2B,IAAI,CAAC;UACpB,CAAC,CAAC;QACN,CAAC,CAAC;MACN;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,kBAAkB,CAAC9D,GAAG,EAAE;IACpB,IAAIA,GAAG,EAAE;MACL,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC+D,OAAO,CAAC/D,GAAG,CAACV,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QACzD,OAAO,IAAI;MACf;MACA,IAAIU,GAAG,CAACT,MAAM,EAAE;QACZ,KAAK,MAAMM,CAAC,IAAIG,GAAG,CAACT,MAAM,EAAE;UACxB,MAAMyE,MAAM,GAAGnE,CAAC,CAACmE,MAAM;UACvB,IAAIA,MAAM,KAAK,mBAAmB,EAAE;YAChC,OAAO,IAAI;UACf;UACA,IAAIA,MAAM,KAAK,uBAAuB,EAAE;YACpC,OAAO,IAAI;UACf;UACA,IAAIA,MAAM,IAAIA,MAAM,CAACC,QAAQ,CAAC,WAAW,CAAC,EAAE;YACxC,OAAO,IAAI;UACf;QACJ;MACJ;IACJ;IACA,OAAO,KAAK;EAChB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,+BAA+B,CAACC,MAAM,EAAE;IACpC,MAAMC,oBAAoB,GAAG;MAAE,GAAGD;IAAO,CAAC;IAC1C,IAAIC,oBAAoB,CAACC,SAAS,KAAKrG,YAAY,CAACsG,wBAAwB,EAAE;MAC1E,OAAOF,oBAAoB,CAACC,SAAS;IACzC;IACA,IAAIE,UAAU;IACd,IAAIH,oBAAoB,CAACG,UAAU,YAAY5G,qBAAqB,CAAC6G,UAAU,EAAE;MAC7E;MACAD,UAAU,GAAGH,oBAAoB,CAACG,UAAU;IAChD,CAAC,MACI;MACD;MACAA,UAAU,GAAG,IAAI5G,qBAAqB,CAAC6G,UAAU,CAAC;QAC9C,GAAGJ,oBAAoB;QACvBG,UAAU,EAAEH,oBAAoB,CAACG,UAAU;QAC3CE,aAAa,EAAEL,oBAAoB,CAACK;MACxC,CAAC,CAAC;IACN;IACA,SAASpB,wBAAwB,CAACL,OAAO,EAAE0B,iBAAiB,EAAE;MAC1D,IAAIC,MAAM;MACV,IAAIN,SAAS;MACb,MAAMO,SAAS,GAAG;QAAE,GAAGT;MAAO,CAAC;MAC/B,IAAIU,cAAc;MAClB,IAAI,CAACH,iBAAiB,EAAE;QACpBC,MAAM,GAAG,CAAC,CAAC,EAAEzG,WAAW,CAAC4G,OAAO,GAAG;QACnCF,SAAS,CAACD,MAAM,GAAGA,MAAM;MAC7B;MACA,MAAM1C,OAAO,GAAG,OAAOyC,iBAAiB,KAAK,QAAQ,GAAGA,iBAAiB,GAAG3I,SAAS;MACrF,MAAMuF,QAAQ,GAAG,OAAOoD,iBAAiB,KAAK,UAAU,GAAGA,iBAAiB,GAAG3I,SAAS;MACxF,eAAegJ,YAAY,GAAG;QAC1BV,SAAS,GAAG,MAAME,UAAU,CAACS,YAAY,EAAE;MAC/C;MACA,MAAM1B,eAAe,GAAG,OAAOtD,GAAG,EAAEuD,oBAAoB,KAAK;QACzD,MAAM0B,gBAAgB,GAAGjF,GAAG;QAC5B,MAAMkF,cAAc,GAAGlF,GAAG,IACtB,OAAOA,GAAG,CAACZ,OAAO,KAAK,QAAQ,IAC/BY,GAAG,CAACZ,OAAO,CAAC2E,OAAO,CAAC,wCAAwC,CAAC,GAAG,CAAC,CAAC;QACtE,IAAImB,cAAc,EAAE;UAChB;UACA;UACA3B,oBAAoB,GAAGP,OAAO;QAClC;QACA,IAAI,CAAChD,GAAG,IAAIkF,cAAc,EAAE;UACxB,IAAI;YACA;YACA3B,oBAAoB,GAAGpG,IAAI,CAACgI,eAAe,CAAC5B,oBAAoB,EAAEc,SAAS,CAAC;YAC5ErE,GAAG,GAAG,IAAI;UACd,CAAC,CACD,OAAOH,CAAC,EAAE;YACN,IAAIA,CAAC,YAAYrC,YAAY,CAAC4H,qBAAqB,EAAE;cACjD;cACA,IAAI;gBACA;gBACA,MAAML,YAAY,EAAE;gBACpBxB,oBAAoB,GAAGpG,IAAI,CAACgI,eAAe,CAAC5B,oBAAoB,EAAEc,SAAS,CAAC;gBAC5ErE,GAAG,GAAG,IAAI;cACd,CAAC,CACD,OAAOH,CAAC,EAAE;gBACN;gBACA;gBACAG,GAAG,GAAGA,GAAG,IAAIH,CAAC;cAClB;YACJ,CAAC,MACI;cACD;cACAG,GAAG,GAAGA,GAAG,IAAIH,CAAC;YAClB;UACJ;QACJ;QACA,IAAIG,GAAG,EAAE;UACL,IAAI2E,MAAM,EAAE;YACRA,MAAM,CAACnB,OAAO,CAACxD,GAAG,CAAC;UACvB,CAAC,MACI;YACD,MAAMqF,EAAE,GAAGpD,OAAO,IAAIA,OAAO,CAACqB,eAAe,GACvCrB,OAAO,CAACqB,eAAe,GACvBhC,QAAQ;YACd+D,EAAE,CAACrF,GAAG,CAAC;UACX;UACA;QACJ;QACA,IAAIiC,OAAO,IAAIA,OAAO,CAACqB,eAAe,EAAE;UACpCrB,OAAO,CAACqB,eAAe,CAAC,IAAI,EAAEC,oBAAoB,CAAC;QACvD,CAAC,MACI;UACDsB,cAAc,GAAG1H,IAAI,CAACmI,WAAW,CAAC/B,oBAAoB,EAAEqB,SAAS,EAAE,UAACW,gBAAgB,EAAgB;YAChG,IAAIA,gBAAgB,IAChBA,gBAAgB,CAACjG,IAAI,KAAK,GAAG,IAC7B2F,gBAAgB,EAAE;cAClB;cACA;cACAM,gBAAgB,GAAGN,gBAAgB;YACvC;YAAC,kCAPoFO,MAAM;cAANA,MAAM;YAAA;YAQ3FlE,QAAQ,CAACiE,gBAAgB,EAAE,GAAGC,MAAM,CAAC;UACzC,CAAC,CAAC;QACN;MACJ,CAAC;MACD,MAAMC,cAAc,GAAG,YAAY;QAC/B,IAAI;UACA,MAAMT,YAAY,GAAG,YAAY;YAC7B,IAAIb,MAAM,CAACE,SAAS,IAChBF,MAAM,CAACE,SAAS,KAAKrG,YAAY,CAACsG,wBAAwB,EAAE;cAC5D;cACA;cACA,OAAOH,MAAM,CAACE,SAAS;YAC3B;YACA,IAAIF,MAAM,CAACuB,iBAAiB,KAAK,KAAK,EAAE;cACpC;cACA,OAAO1H,YAAY,CAACsG,wBAAwB;YAChD;YACA,OAAOS,YAAY,EAAE;UACzB,CAAC;UACD,MAAMY,gBAAgB,GAAG,YAAY;YACjC,IAAIf,SAAS,CAACgB,cAAc,IACxB,CAAChB,SAAS,CAACiB,yBAAyB,EAAE;cACtC;cACA;cACA,OAAO7C,OAAO;YAClB,CAAC,MACI;cACD,OAAOuB,UAAU,CAACoB,gBAAgB,CAAC3C,OAAO,CAAC;YAC/C;UACJ,CAAC;UACD,MAAM,CAAC8C,UAAU,EAAEC,iBAAiB,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACtDjB,YAAY,EAAE,EACdW,gBAAgB,EAAE,CACrB,CAAC;UACF,IAAIG,UAAU,EAAE;YACZzB,SAAS,GAAGyB,UAAU;UAC1B;UACA,OAAOxC,eAAe,CAAC,IAAI,EAAEyC,iBAAiB,CAAC;QACnD,CAAC,CACD,OAAOlG,CAAC,EAAE;UACN,OAAOyD,eAAe,CAACzD,CAAC,CAAC;QAC7B;MACJ,CAAC;MACD4F,cAAc,EAAE;MAChB,IAAId,MAAM,EAAE;QACR,OAAOA,MAAM;MACjB;MACA,OAAO;QACHuB,KAAK,GAAG;UACJC,YAAY,CAAC,MAAM;YACf,IAAItB,cAAc,EAAE;cAChBA,cAAc,CAACqB,KAAK,EAAE;cACtBrB,cAAc,GAAG,IAAI;YACzB;UACJ,CAAC,CAAC;QACN;MACJ,CAAC;IACL;IACA,MAAMuB,GAAG,GAAG/C,wBAAwB;IACpC+C,GAAG,CAACC,cAAc,GAAG9B,UAAU,CAAC8B,cAAc,CAACC,IAAI,CAAC/B,UAAU,CAAC;IAC/D6B,GAAG,CAAC7B,UAAU,GAAGA,UAAU;IAC3B,OAAO6B,GAAG;EACd;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACId,WAAW,CAACtC,OAAO,EAAEmB,MAAM,EAAE7C,QAAQ,EAAE;IACnC,IAAIa,EAAE,EAAEoE,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;IACtB,IAAIC,cAAc,GAAG5H,kBAAkB;IACvC,IAAIoF,MAAM,CAACyC,SAAS,KAAK7K,SAAS,EAAE;MAChC4K,cAAc,GAAGxC,MAAM,CAACyC,SAAS;IACrC,CAAC,MACI,IAAI,CAAC,CAACzE,EAAE,GAAGgC,MAAM,CAAC0C,YAAY,MAAM,IAAI,IAAI1E,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACyE,SAAS,MAAM7K,SAAS,EAAE;MACnG4K,cAAc,GAAGxC,MAAM,CAAC0C,YAAY,CAACD,SAAS;IAClD;IACA,IAAIE,aAAa,GAAG9H,iBAAiB;IACrC,IAAImF,MAAM,CAACrB,UAAU,KAAK/G,SAAS,EAAE;MACjC+K,aAAa,GAAG3C,MAAM,CAACrB,UAAU;IACrC,CAAC,MACI,IAAI,CAAC,CAACyD,EAAE,GAAGpC,MAAM,CAAC0C,YAAY,MAAM,IAAI,IAAIN,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACzD,UAAU,MAAM/G,SAAS,EAAE;MACpG+K,aAAa,GAAG3C,MAAM,CAAC0C,YAAY,CAAC/D,UAAU;IAClD;IACAtE,eAAe,CAACiF,OAAO,GAAG,IAAI,CAACC,kBAAkB,CAACV,OAAO,CAAC9F,OAAO,CAACK,gBAAgB,CAAC,CAAC;IACpF,MAAM0E,OAAO,GAAG;MACZgB,OAAO,EAAEnF,eAAe,CAAC6F,YAAY,CAACC,QAAQ,CAACpF,eAAe,CAAC;MAC/DuI,OAAO,EAAEJ,cAAc,KAAK,KAAK,GAAGG,aAAa,GAAG,CAAC;MACrDE,iBAAiB,EAAEL,cAAc,KAAK,KAAK,GAAGG,aAAa,GAAG,CAAC;MAC/DG,aAAa,CAACvF,eAAe,EAAE;QAC3B,IAAIS,EAAE,EAAEoE,EAAE;QACV,MAAMvG,GAAG,GAAG7C,IAAI,CAACqE,oBAAoB,CAACE,eAAe,CAAC,CAAC1B,GAAG;QAC1D,IAAI,CAACmC,EAAE,GAAGgC,MAAM,CAAC0C,YAAY,MAAM,IAAI,IAAI1E,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC+E,gBAAgB,EAAE;UACrF,OAAOlH,GAAG,KAAK,CAACuG,EAAE,GAAGpC,MAAM,CAAC0C,YAAY,MAAM,IAAI,IAAIN,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACW,gBAAgB,CAAClH,GAAG,CAAC,CAAC;QAC5G;QACA,OAAOA,GAAG,IAAI7C,IAAI,CAAC2G,kBAAkB,CAAC9D,GAAG,CAAC;MAC9C,CAAC;MACDmH,aAAa,EAAE,CAACX,EAAE,GAAGrC,MAAM,CAAC0C,YAAY,MAAM,IAAI,IAAIL,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACW,aAAa;MAC/FC,oBAAoB,EAAE,CAACX,EAAE,GAAGtC,MAAM,CAAC0C,YAAY,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACW,oBAAoB;MAC7GC,YAAY,EAAE,CAACX,EAAE,GAAGvC,MAAM,CAAC0C,YAAY,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACW;IACrF,CAAC;IACD,IAAI,OAAOrE,OAAO,CAACF,UAAU,KAAK,QAAQ,EAAE;MACxCb,OAAO,CAAC8E,OAAO,GAAG/D,OAAO,CAACF,UAAU;MACpCb,OAAO,CAAC+E,iBAAiB,GAAGhE,OAAO,CAACF,UAAU;IAClD;IACA,IAAI,CAACqB,MAAM,CAACQ,MAAM,EAAE;MAChB,OAAO,CAAC,CAAC,EAAE/G,eAAe,CAACkH,OAAO,EAAE9B,OAAO,EAAEf,OAAO;MACpD;MACA,CAACjC,GAAG,EAAER,QAAQ,EAAEG,IAAI,KAAK;QACrBxC,IAAI,CAACiE,UAAU,CAACpB,GAAG,EAAER,QAAQ,EAAEG,IAAI,EAAE2B,QAAQ,CAAC;MAClD,CAAC,CAAC;IACN;IACA,MAAMU,GAAG,GAAGmC,MAAM,CAACQ,MAAM;IACzB;IACA,IAAI2C,aAAa;IACjB,MAAMC,YAAY,GAAG,CAACvE,OAAO,CAACL,MAAM,IAAI,KAAK,EAAE6E,WAAW,EAAE,KAAK,KAAK;IACtE,IAAID,YAAY,EAAE;MACdD,aAAa,GAAG,CAAC,CAAC,EAAE1J,eAAe,CAACkH,OAAO,EAAE9B,OAAO,EAAEf,OAAO,CAAC;MAC9DD,GAAG,CAACyF,WAAW,CAACH,aAAa,CAAC;IAClC,CAAC,MACI;MACD;MACAA,aAAa,GAAGrF,OAAO,CAACgB,OAAO,CAACD,OAAO,CAAC;MACxChB,GAAG,CAACS,WAAW,CAAC6E,aAAa,CAAC;IAClC;IACA;IACAA,aAAa,CACRhF,EAAE,CAAC,OAAO,EAAEN,GAAG,CAACwB,OAAO,CAAC8C,IAAI,CAACtE,GAAG,CAAC,CAAC,CAClCM,EAAE,CAAC,UAAU,EAAEN,GAAG,CAACQ,IAAI,CAAC8D,IAAI,CAACtE,GAAG,EAAE,UAAU,CAAC,CAAC,CAC9CM,EAAE,CAAC,UAAU,EAAEN,GAAG,CAACQ,IAAI,CAAC8D,IAAI,CAACtE,GAAG,EAAE,UAAU,CAAC,CAAC;IACnDA,GAAG,CAACkE,KAAK,GAAGoB,aAAa,CAACpB,KAAK;IAC/B,OAAOlE,GAAG;EACd;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACImD,eAAe,CAACnC,OAAO,EAAEqB,SAAS,EAAE;IAChC,OAAOrB,OAAO,CAAC0E,YAAY;IAC3B,OAAO1E,OAAO,CAAC2E,eAAe;IAC9B,OAAO3E,OAAO,CAAC4E,UAAU;IACzB,IAAI5E,OAAO,CAACJ,EAAE,KAAK,IAAI,IAAI,OAAOI,OAAO,CAACJ,EAAE,KAAK,QAAQ,EAAE;MACvD,OAAOI,OAAO,CAACJ,EAAE,CAAC8E,YAAY;MAC9B,OAAO1E,OAAO,CAACJ,EAAE,CAAC+E,eAAe;MACjC3E,OAAO,CAACJ,EAAE,GAAG,CAAC,CAAC,EAAEpF,YAAY,CAACqK,qBAAqB,EAAE7E,OAAO,CAACJ,EAAE,EAAEyB,SAAS,CAAC;IAC/E;IACA,IAAI5D,KAAK,CAACqH,OAAO,CAAC9E,OAAO,CAACE,SAAS,CAAC,EAAE;MAClCF,OAAO,CAACE,SAAS,GAAGF,OAAO,CAACE,SAAS,CAACvC,GAAG,CAACoH,IAAI,IAAI;QAC9C,OAAO,CAAC,CAAC,EAAEvK,YAAY,CAACqK,qBAAqB,EAAEE,IAAI,EAAE1D,SAAS,CAAC;MACnE,CAAC,CAAC;IACN;IACA,IAAIrB,OAAO,CAACgF,IAAI,KAAK,IAAI,IAAI,OAAOhF,OAAO,CAACgF,IAAI,KAAK,QAAQ,EAAE;MAC3D,OAAOhF,OAAO,CAACgF,IAAI,CAACN,YAAY;MAChC,OAAO1E,OAAO,CAACgF,IAAI,CAACL,eAAe;MACnC3E,OAAO,CAACgF,IAAI,GAAG,CAAC,CAAC,EAAExK,YAAY,CAACqK,qBAAqB,EAAE7E,OAAO,CAACgF,IAAI,EAAE3D,SAAS,CAAC;IACnF;IACArB,OAAO,CAACiF,GAAG,GAAG,CAAC,CAAC,EAAEzK,YAAY,CAACqK,qBAAqB,EAAE7E,OAAO,CAACiF,GAAG,EAAE5D,SAAS,CAAC;IAC7E,OAAOrB,OAAO;EAClB;EACA;EACAkF,YAAY,CAACC,OAAO,EAAEC,MAAM,EAAE;IAC1B,SAASC,kBAAkB,CAACC,GAAG,EAAE;MAC7B,OAAOA,GAAG,CAACpJ,WAAW,IAAIoJ,GAAG,CAACpJ,WAAW,CAACgC,IAAI,CAACqH,WAAW,EAAE;IAChE;IACA,MAAMC,eAAe,GAAGJ,MAAM,CAACK,KAAK,CAAC,GAAG,CAAC;IACzC,MAAMC,gBAAgB,GAAGF,eAAe,CAAC,CAAC,CAAC,IAAIA,eAAe,CAAC,CAAC,CAAC,CAACD,WAAW,EAAE;IAC/E,MAAMI,aAAa,GAAGH,eAAe,CAAC,CAAC,CAAC,IAAIA,eAAe,CAAC,CAAC,CAAC,CAACD,WAAW,EAAE;IAC5E,IAAII,aAAa,IAAIN,kBAAkB,CAACF,OAAO,CAAC,KAAKQ,aAAa,EAAE;MAChE,OAAO,KAAK;IAChB;IACA,IAAIC,aAAa,GAAGT,OAAO;IAC3B;IACA,OAAO,IAAI,EAAE;MACT,IAAIE,kBAAkB,CAACO,aAAa,CAAC,KAAKF,gBAAgB,EAAE;QACxD,OAAO,IAAI;MACf;MACAE,aAAa,GAAGA,aAAa,CAACC,MAAM;MACpC,IAAI,CAACD,aAAa,EAAE;QAChB,OAAO,KAAK;MAChB;IACJ;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,sBAAsB,CAACpE,iBAAiB,EAAEqE,EAAE,EAAE;IAC1C,OAAO,OAAOrE,iBAAiB,KAAK,UAAU,GACxC,CAAC,CAAC,CAAC,EAAEA,iBAAiB,CAAC,GACvB,CAACA,iBAAiB,EAAEqE,EAAE,CAAC;EACjC;EACArF,kBAAkB,CAACsF,UAAU,EAAE;IAC3B,MAAMvF,OAAO,GAAG;MACZ,YAAY,EAAE,CAAC,CAAC,EAAExF,SAAS,CAACgL,kBAAkB,GAAG;MACjD,mBAAmB,EAAG,GAAE,CAAC,CAAC,EAAEhL,SAAS,CAACiL,wBAAwB,GAAI,SAAQ9K,WAAW,CAAC+K,OAAQ,IAAG,CAAC,CAAC,EAAElL,SAAS,CAACmL,eAAe,GAAI,uBAAsBrL,IAAI,CAACsL,EAAE,EAAG;IACtK,CAAC;IACD,IAAIL,UAAU,EAAE;MACZvF,OAAO,CAAC,mBAAmB,CAAC,IAAK,iBAAgBuF,UAAW,EAAC;IACjE;IACA,OAAOvF,OAAO;EAClB;AACJ;AACAvG,OAAO,CAACE,IAAI,GAAGA,IAAI;AACnB;AACA;AACA;AACA;AACA,MAAMiF,cAAc,SAASxE,QAAQ,CAACyL,SAAS,CAAC;EAC5CpK,WAAW,GAAG;IACV,KAAK,CAAC,GAAGqK,SAAS,CAAC;IACnB,IAAI,CAACC,SAAS,GAAG,CAAC;EACtB;EACA;EACAC,UAAU,CAACC,KAAK,EAAEC,QAAQ,EAAErI,QAAQ,EAAE;IAClC,IAAI,CAACkI,SAAS,IAAIE,KAAK,CAACtJ,MAAM;IAC9B,IAAI,CAACoC,IAAI,CAAC,UAAU,EAAE;MAAEoH,YAAY,EAAE,IAAI,CAACJ,SAAS;MAAEK,aAAa,EAAE;IAAI,CAAC,CAAC;IAC3E,IAAI,CAAC/I,IAAI,CAAC4I,KAAK,CAAC;IAChBpI,QAAQ,EAAE;EACd;AACJ;AACA,MAAMnE,IAAI,GAAG,IAAIC,IAAI,EAAE;AACvBF,OAAO,CAACC,IAAI,GAAGA,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}