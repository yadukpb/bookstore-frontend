{"ast":null,"code":"'use strict';\n\n///@ts-check\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\nconst getIgnoreAttributesFn = require('../ignoreAttributes');\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser {\n  constructor(options) {\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\": {\n        regex: /&(apos|#39|#x27);/g,\n        val: \"'\"\n      },\n      \"gt\": {\n        regex: /&(gt|#62|#x3E);/g,\n        val: \">\"\n      },\n      \"lt\": {\n        regex: /&(lt|#60|#x3C);/g,\n        val: \"<\"\n      },\n      \"quot\": {\n        regex: /&(quot|#34|#x22);/g,\n        val: \"\\\"\"\n      }\n    };\n    this.ampEntity = {\n      regex: /&(amp|#38|#x26);/g,\n      val: \"&\"\n    };\n    this.htmlEntities = {\n      \"space\": {\n        regex: /&(nbsp|#160);/g,\n        val: \" \"\n      },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\": {\n        regex: /&(cent|#162);/g,\n        val: \"¢\"\n      },\n      \"pound\": {\n        regex: /&(pound|#163);/g,\n        val: \"£\"\n      },\n      \"yen\": {\n        regex: /&(yen|#165);/g,\n        val: \"¥\"\n      },\n      \"euro\": {\n        regex: /&(euro|#8364);/g,\n        val: \"€\"\n      },\n      \"copyright\": {\n        regex: /&(copy|#169);/g,\n        val: \"©\"\n      },\n      \"reg\": {\n        regex: /&(reg|#174);/g,\n        val: \"®\"\n      },\n      \"inr\": {\n        regex: /&(inr|#8377);/g,\n        val: \"₹\"\n      },\n      \"num_dec\": {\n        regex: /&#([0-9]{1,7});/g,\n        val: (_, str) => String.fromCharCode(Number.parseInt(str, 10))\n      },\n      \"num_hex\": {\n        regex: /&#x([0-9a-fA-F]{1,6});/g,\n        val: (_, str) => String.fromCharCode(Number.parseInt(str, 16))\n      }\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes);\n  }\n}\nfunction addExternalEntities(externalEntities) {\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n      regex: new RegExp(\"&\" + ent + \";\", \"g\"),\n      val: externalEntities[ent]\n    };\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if (val.length > 0) {\n      if (!escapeEntities) val = this.replaceEntitiesValue(val);\n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if (newval === null || newval === undefined) {\n        //don't parse\n        return val;\n      } else if (typeof newval !== typeof val || newval !== val) {\n        //overwrite\n        return newval;\n      } else if (this.options.trimValues) {\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      } else {\n        const trimmedVal = val.trim();\n        if (trimmedVal === val) {\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        } else {\n          return val;\n        }\n      }\n    }\n  }\n}\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (this.options.ignoreAttributes !== true && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      if (this.ignoreAttributesFn(attrName, jPath)) {\n        continue;\n      }\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if (aName === \"__proto__\") aName = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if (newVal === null || newVal === undefined) {\n            //don't parse\n            attrs[aName] = oldVal;\n          } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {\n            //overwrite\n            attrs[aName] = newVal;\n          } else {\n            //parse\n            attrs[aName] = parseValue(oldVal, this.options.parseAttributeValue, this.options.numberParseOptions);\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\nconst parseXml = function (xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for (let i = 0; i < xmlData.length; i++) {\n    //for each char in XML data\n    const ch = xmlData[i];\n    if (ch === '<') {\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if (xmlData[i + 1] === '/') {\n        //Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\");\n        let tagName = xmlData.substring(i + 2, closeIndex).trim();\n        if (this.options.removeNSPrefix) {\n          const colonIndex = tagName.indexOf(\":\");\n          if (colonIndex !== -1) {\n            tagName = tagName.substr(colonIndex + 1);\n          }\n        }\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        if (currentNode) {\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\") + 1);\n        if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0;\n        if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.') - 1);\n          this.tagsNodeStack.pop();\n        } else {\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n        currentNode = this.tagsNodeStack.pop(); //avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if (xmlData[i + 1] === '?') {\n        let tagData = readTagExp(xmlData, i, false, \"?>\");\n        if (!tagData) throw new Error(\"Pi Tag is not closed.\");\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if (this.options.ignoreDeclaration && tagData.tagName === \"?xml\" || this.options.ignorePiTags) {} else {\n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath);\n        }\n        i = tagData.closeIndex + 1;\n      } else if (xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i + 4, \"Comment is not closed.\");\n        if (this.options.commentPropName) {\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n          currentNode.add(this.options.commentPropName, [{\n            [this.options.textNodeName]: comment\n          }]);\n        }\n        i = endIndex;\n      } else if (xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      } else if (xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9, closeIndex);\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if (val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if (this.options.cdataPropName) {\n          currentNode.add(this.options.cdataPropName, [{\n            [this.options.textNodeName]: tagExp\n          }]);\n        } else {\n          currentNode.add(this.options.textNodeName, val);\n        }\n        i = closeIndex + 2;\n      } else {\n        //Opening tag\n        let result = readTagExp(xmlData, i, this.options.removeNSPrefix);\n        let tagName = result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        //save text as child node\n        if (currentNode && textData) {\n          if (currentNode.tagname !== '!xml') {\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if (tagName !== xmlObj.tagname) {\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if (tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1) {\n            if (tagName[tagName.length - 1] === \"/\") {\n              //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            } else {\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if (this.options.unpairedTags.indexOf(tagName) !== -1) {\n            i = result.closeIndex;\n          }\n          //normal tag\n          else {\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if (!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n          const childNode = new xmlNode(tagName);\n          if (tagName !== tagExp && attrExpPresent) {\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if (tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          this.addChild(currentNode, childNode, jPath);\n        } else {\n          //selfClosing tag\n          if (tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1) {\n            if (tagName[tagName.length - 1] === \"/\") {\n              //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            } else {\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            if (this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n            const childNode = new xmlNode(tagName);\n            if (tagName !== tagExp && attrExpPresent) {\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath);\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n          //opening tag\n          else {\n            const childNode = new xmlNode(tagName);\n            this.tagsNodeStack.push(currentNode);\n            if (tagName !== tagExp && attrExpPresent) {\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath);\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    } else {\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n};\nfunction addChild(currentNode, childNode, jPath) {\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"]);\n  if (result === false) {} else if (typeof result === \"string\") {\n    childNode.tagname = result;\n    currentNode.addChild(childNode);\n  } else {\n    currentNode.addChild(childNode);\n  }\n}\nconst replaceEntitiesValue = function (val) {\n  if (this.options.processEntities) {\n    for (let entityName in this.docTypeEntities) {\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace(entity.regx, entity.val);\n    }\n    for (let entityName in this.lastEntities) {\n      const entity = this.lastEntities[entityName];\n      val = val.replace(entity.regex, entity.val);\n    }\n    if (this.options.htmlEntities) {\n      for (let entityName in this.htmlEntities) {\n        const entity = this.htmlEntities[entityName];\n        val = val.replace(entity.regex, entity.val);\n      }\n    }\n    val = val.replace(this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n};\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) {\n    //store previously collected data as textNode\n    if (isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0;\n    textData = this.parseTextData(textData, currentNode.tagname, jPath, false, currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false, isLeafNode);\n    if (textData !== undefined && textData !== \"\") currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName) {\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if (allNodesExp === stopNodeExp || jPath === stopNodeExp) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i) {\n  let closingChar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \">\";\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n      if (ch === attrBoundary) attrBoundary = \"\"; //reset\n    } else if (ch === '\"' || ch === \"'\") {\n      attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if (closingChar[1]) {\n        if (xmlData[index + 1] === closingChar[1]) {\n          return {\n            data: tagExp,\n            index: index\n          };\n        }\n      } else {\n        return {\n          data: tagExp,\n          index: index\n        };\n      }\n    } else if (ch === '\\t') {\n      ch = \" \";\n    }\n    tagExp += ch;\n  }\n}\nfunction findClosingIndex(xmlData, str, i, errMsg) {\n  const closingIndex = xmlData.indexOf(str, i);\n  if (closingIndex === -1) {\n    throw new Error(errMsg);\n  } else {\n    return closingIndex + str.length - 1;\n  }\n}\nfunction readTagExp(xmlData, i, removeNSPrefix) {\n  let closingChar = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \">\";\n  const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);\n  if (!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if (separatorIndex !== -1) {\n    //separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n  const rawTagName = tagName;\n  if (removeNSPrefix) {\n    const colonIndex = tagName.indexOf(\":\");\n    if (colonIndex !== -1) {\n      tagName = tagName.substr(colonIndex + 1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName\n  };\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i) {\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === \"<\") {\n      if (xmlData[i + 1] === \"/\") {\n        //close tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n        let closeTagName = xmlData.substring(i + 2, closeIndex).trim();\n        if (closeTagName === tagName) {\n          openTagCount--;\n          if (openTagCount === 0) {\n            return {\n              tagContent: xmlData.substring(startIndex, i),\n              i: closeIndex\n            };\n          }\n        }\n        i = closeIndex;\n      } else if (xmlData[i + 1] === '?') {\n        const closeIndex = findClosingIndex(xmlData, \"?>\", i + 1, \"StopNode is not closed.\");\n        i = closeIndex;\n      } else if (xmlData.substr(i + 1, 3) === '!--') {\n        const closeIndex = findClosingIndex(xmlData, \"-->\", i + 3, \"StopNode is not closed.\");\n        i = closeIndex;\n      } else if (xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n        i = closeIndex;\n      } else {\n        const tagData = readTagExp(xmlData, i, '>');\n        if (tagData) {\n          const openTagName = tagData && tagData.tagName;\n          if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== \"/\") {\n            openTagCount++;\n          }\n          i = tagData.closeIndex;\n        }\n      }\n    }\n  } //end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if (newval === 'true') return true;else if (newval === 'false') return false;else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\nmodule.exports = OrderedObjParser;","map":{"version":3,"names":["util","require","xmlNode","readDocType","toNumber","getIgnoreAttributesFn","OrderedObjParser","constructor","options","currentNode","tagsNodeStack","docTypeEntities","lastEntities","regex","val","ampEntity","htmlEntities","_","str","String","fromCharCode","Number","parseInt","addExternalEntities","parseXml","parseTextData","resolveNameSpace","buildAttributesMap","isItStopNode","replaceEntitiesValue","readStopNodeData","saveTextToParentTag","addChild","ignoreAttributesFn","ignoreAttributes","externalEntities","entKeys","Object","keys","i","length","ent","RegExp","tagName","jPath","dontTrim","hasAttributes","isLeafNode","escapeEntities","undefined","trimValues","trim","newval","tagValueProcessor","parseValue","parseTagValue","numberParseOptions","trimmedVal","tagname","removeNSPrefix","tags","split","prefix","charAt","attrsRegx","attrStr","matches","getAllMatches","len","attrs","attrName","oldVal","aName","attributeNamePrefix","transformAttributeName","newVal","attributeValueProcessor","parseAttributeValue","allowBooleanAttributes","attributesGroupName","attrCollection","xmlData","replace","xmlObj","textData","ch","closeIndex","findClosingIndex","substring","colonIndex","indexOf","substr","transformTagName","lastTagName","lastIndexOf","unpairedTags","Error","propIndex","pop","tagData","readTagExp","ignoreDeclaration","ignorePiTags","childNode","add","textNodeName","tagExp","attrExpPresent","endIndex","commentPropName","comment","result","entities","cdataPropName","rawTagName","lastTag","stopNodes","tagContent","push","child","updateTag","processEntities","entityName","entity","regx","currentTagName","allNodesExp","stopNodePath","stopNodeExp","tagExpWithClosingIndex","closingChar","attrBoundary","index","data","errMsg","closingIndex","separatorIndex","search","trimStart","startIndex","openTagCount","closeTagName","openTagName","shouldParse","isExist","module","exports"],"sources":["/home/yadu/Music/Gifty/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"],"sourcesContent":["'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\nconst getIgnoreAttributesFn = require('../ignoreAttributes')\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (this.options.ignoreAttributes !== true && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      if (this.ignoreAttributesFn(attrName, jPath)) {\n        continue\n      }\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            \n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}