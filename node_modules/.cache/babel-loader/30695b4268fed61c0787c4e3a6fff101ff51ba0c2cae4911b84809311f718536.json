{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VectorQuery = void 0;\nconst field_value_1 = require(\"../field-value\");\nconst path_1 = require(\"../path\");\nconst util_1 = require(\"../util\");\nconst query_util_1 = require(\"./query-util\");\nconst vector_query_snapshot_1 = require(\"./vector-query-snapshot\");\nconst query_profile_1 = require(\"../query-profile\");\n/**\n * A query that finds the documents whose vector fields are closest to a certain query vector.\n * Create an instance of `VectorQuery` with {@link Query.findNearest}.\n */\nclass VectorQuery {\n  /**\n   * @private\n   * @internal\n   */\n  constructor(_query, _options) {\n    this._query = _query;\n    this._options = _options;\n    this._queryUtil = new query_util_1.QueryUtil(_query._firestore, _query._queryOptions, _query._serializer);\n  }\n  /** The query whose results participants in the vector search. Filtering\n   * performed by the query will apply before the vector search.\n   **/\n  get query() {\n    return this._query;\n  }\n  /**\n   * @private\n   * @internal\n   */\n  get _rawVectorField() {\n    return typeof this._options.vectorField === 'string' ? this._options.vectorField : this._options.vectorField.toString();\n  }\n  /**\n   * @private\n   * @internal\n   */\n  get _rawDistanceResultField() {\n    if (typeof this._options.distanceResultField === 'undefined') return;\n    return typeof this._options.distanceResultField === 'string' ? this._options.distanceResultField : this._options.distanceResultField.toString();\n  }\n  /**\n   * @private\n   * @internal\n   */\n  get _rawQueryVector() {\n    return Array.isArray(this._options.queryVector) ? this._options.queryVector : this._options.queryVector.toArray();\n  }\n  /**\n   * Plans and optionally executes this vector search query. Returns a Promise that will be\n   * resolved with the planner information, statistics from the query execution (if any),\n   * and the query results (if any).\n   *\n   * @return A Promise that will be resolved with the planner information, statistics\n   *  from the query execution (if any), and the query results (if any).\n   */\n  async explain(options) {\n    if (options === undefined) {\n      options = {};\n    }\n    const {\n      result,\n      explainMetrics\n    } = await this._getResponse(options);\n    if (!explainMetrics) {\n      throw new Error('No explain results');\n    }\n    return new query_profile_1.ExplainResults(explainMetrics, result || null);\n  }\n  /**\n   * Executes this vector search query.\n   *\n   * @returns A promise that will be resolved with the results of the query.\n   */\n  async get() {\n    const {\n      result\n    } = await this._getResponse();\n    if (!result) {\n      throw new Error('No VectorQuerySnapshot result');\n    }\n    return result;\n  }\n  _getResponse(explainOptions) {\n    return this._queryUtil._getResponse(this, /*transactionOrReadTime*/undefined,\n    // VectorQuery cannot be retried with cursors as they do not support cursors yet.\n    /*retryWithCursor*/\n    false, explainOptions);\n  }\n  /**\n   * Internal streaming method that accepts an optional transaction ID.\n   *\n   * @param transactionId - A transaction ID.\n   * @private\n   * @internal\n   * @returns A stream of document results.\n   */\n  _stream(transactionId) {\n    return this._queryUtil._stream(this, transactionId, /*retryWithCursor*/false);\n  }\n  /**\n   * Internal method for serializing a query to its proto\n   * representation with an optional transaction id.\n   *\n   * @private\n   * @internal\n   * @returns Serialized JSON for the query.\n   */\n  toProto(transactionOrReadTime, explainOptions) {\n    var _a, _b, _c;\n    const queryProto = this._query.toProto(transactionOrReadTime);\n    const queryVector = Array.isArray(this._options.queryVector) ? new field_value_1.VectorValue(this._options.queryVector) : this._options.queryVector;\n    queryProto.structuredQuery.findNearest = {\n      limit: {\n        value: this._options.limit\n      },\n      distanceMeasure: this._options.distanceMeasure,\n      vectorField: {\n        fieldPath: path_1.FieldPath.fromArgument(this._options.vectorField).formattedName\n      },\n      queryVector: queryVector._toProto(this._query._serializer),\n      distanceResultField: ((_a = this._options) === null || _a === void 0 ? void 0 : _a.distanceResultField) ? path_1.FieldPath.fromArgument(this._options.distanceResultField).formattedName : undefined,\n      distanceThreshold: ((_b = this._options) === null || _b === void 0 ? void 0 : _b.distanceThreshold) ? {\n        value: (_c = this._options) === null || _c === void 0 ? void 0 : _c.distanceThreshold\n      } : undefined\n    };\n    if (explainOptions) {\n      queryProto.explainOptions = explainOptions;\n    }\n    return queryProto;\n  }\n  /**\n   * Construct the resulting vector snapshot for this query with given documents.\n   *\n   * @private\n   * @internal\n   */\n  _createSnapshot(readTime, size, docs, changes) {\n    return new vector_query_snapshot_1.VectorQuerySnapshot(this, readTime, size, docs, changes);\n  }\n  /**\n   * Construct a new vector query whose result will start after To support stream().\n   * This now throws an exception because cursors are not supported from the backend for vector queries yet.\n   *\n   * @private\n   * @internal\n   * @returns Serialized JSON for the query.\n   */\n  startAfter() {\n    throw new Error('Unimplemented: Vector query does not support cursors yet.');\n  }\n  /**\n   * Compares this object with the given object for equality.\n   *\n   * This object is considered \"equal\" to the other object if and only if\n   * `other` performs the same vector distance search as this `VectorQuery` and\n   * the underlying Query of `other` compares equal to that of this object\n   * using `Query.isEqual()`.\n   *\n   * @param other - The object to compare to this object for equality.\n   * @returns `true` if this object is \"equal\" to the given object, as\n   * defined above, or `false` otherwise.\n   */\n  isEqual(other) {\n    if (this === other) {\n      return true;\n    }\n    if (!(other instanceof VectorQuery)) {\n      return false;\n    }\n    if (!this.query.isEqual(other.query)) {\n      return false;\n    }\n    return this._rawVectorField === other._rawVectorField && (0, util_1.isPrimitiveArrayEqual)(this._rawQueryVector, other._rawQueryVector) && this._options.limit === other._options.limit && this._options.distanceMeasure === other._options.distanceMeasure && this._options.distanceThreshold === other._options.distanceThreshold && this._rawDistanceResultField === other._rawDistanceResultField;\n  }\n}\nexports.VectorQuery = VectorQuery;","map":{"version":3,"names":["Object","defineProperty","exports","value","VectorQuery","field_value_1","require","path_1","util_1","query_util_1","vector_query_snapshot_1","query_profile_1","constructor","_query","_options","_queryUtil","QueryUtil","_firestore","_queryOptions","_serializer","query","_rawVectorField","vectorField","toString","_rawDistanceResultField","distanceResultField","_rawQueryVector","Array","isArray","queryVector","toArray","explain","options","undefined","result","explainMetrics","_getResponse","Error","ExplainResults","get","explainOptions","_stream","transactionId","toProto","transactionOrReadTime","_a","_b","_c","queryProto","VectorValue","structuredQuery","findNearest","limit","distanceMeasure","fieldPath","FieldPath","fromArgument","formattedName","_toProto","distanceThreshold","_createSnapshot","readTime","size","docs","changes","VectorQuerySnapshot","startAfter","isEqual","other","isPrimitiveArrayEqual"],"sources":["/home/yadu/Music/Gifty/node_modules/@google-cloud/firestore/build/src/reference/vector-query.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VectorQuery = void 0;\nconst field_value_1 = require(\"../field-value\");\nconst path_1 = require(\"../path\");\nconst util_1 = require(\"../util\");\nconst query_util_1 = require(\"./query-util\");\nconst vector_query_snapshot_1 = require(\"./vector-query-snapshot\");\nconst query_profile_1 = require(\"../query-profile\");\n/**\n * A query that finds the documents whose vector fields are closest to a certain query vector.\n * Create an instance of `VectorQuery` with {@link Query.findNearest}.\n */\nclass VectorQuery {\n    /**\n     * @private\n     * @internal\n     */\n    constructor(_query, _options) {\n        this._query = _query;\n        this._options = _options;\n        this._queryUtil = new query_util_1.QueryUtil(_query._firestore, _query._queryOptions, _query._serializer);\n    }\n    /** The query whose results participants in the vector search. Filtering\n     * performed by the query will apply before the vector search.\n     **/\n    get query() {\n        return this._query;\n    }\n    /**\n     * @private\n     * @internal\n     */\n    get _rawVectorField() {\n        return typeof this._options.vectorField === 'string'\n            ? this._options.vectorField\n            : this._options.vectorField.toString();\n    }\n    /**\n     * @private\n     * @internal\n     */\n    get _rawDistanceResultField() {\n        if (typeof this._options.distanceResultField === 'undefined')\n            return;\n        return typeof this._options.distanceResultField === 'string'\n            ? this._options.distanceResultField\n            : this._options.distanceResultField.toString();\n    }\n    /**\n     * @private\n     * @internal\n     */\n    get _rawQueryVector() {\n        return Array.isArray(this._options.queryVector)\n            ? this._options.queryVector\n            : this._options.queryVector.toArray();\n    }\n    /**\n     * Plans and optionally executes this vector search query. Returns a Promise that will be\n     * resolved with the planner information, statistics from the query execution (if any),\n     * and the query results (if any).\n     *\n     * @return A Promise that will be resolved with the planner information, statistics\n     *  from the query execution (if any), and the query results (if any).\n     */\n    async explain(options) {\n        if (options === undefined) {\n            options = {};\n        }\n        const { result, explainMetrics } = await this._getResponse(options);\n        if (!explainMetrics) {\n            throw new Error('No explain results');\n        }\n        return new query_profile_1.ExplainResults(explainMetrics, result || null);\n    }\n    /**\n     * Executes this vector search query.\n     *\n     * @returns A promise that will be resolved with the results of the query.\n     */\n    async get() {\n        const { result } = await this._getResponse();\n        if (!result) {\n            throw new Error('No VectorQuerySnapshot result');\n        }\n        return result;\n    }\n    _getResponse(explainOptions) {\n        return this._queryUtil._getResponse(this, \n        /*transactionOrReadTime*/ undefined, \n        // VectorQuery cannot be retried with cursors as they do not support cursors yet.\n        /*retryWithCursor*/ false, explainOptions);\n    }\n    /**\n     * Internal streaming method that accepts an optional transaction ID.\n     *\n     * @param transactionId - A transaction ID.\n     * @private\n     * @internal\n     * @returns A stream of document results.\n     */\n    _stream(transactionId) {\n        return this._queryUtil._stream(this, transactionId, \n        /*retryWithCursor*/ false);\n    }\n    /**\n     * Internal method for serializing a query to its proto\n     * representation with an optional transaction id.\n     *\n     * @private\n     * @internal\n     * @returns Serialized JSON for the query.\n     */\n    toProto(transactionOrReadTime, explainOptions) {\n        var _a, _b, _c;\n        const queryProto = this._query.toProto(transactionOrReadTime);\n        const queryVector = Array.isArray(this._options.queryVector)\n            ? new field_value_1.VectorValue(this._options.queryVector)\n            : this._options.queryVector;\n        queryProto.structuredQuery.findNearest = {\n            limit: { value: this._options.limit },\n            distanceMeasure: this._options.distanceMeasure,\n            vectorField: {\n                fieldPath: path_1.FieldPath.fromArgument(this._options.vectorField)\n                    .formattedName,\n            },\n            queryVector: queryVector._toProto(this._query._serializer),\n            distanceResultField: ((_a = this._options) === null || _a === void 0 ? void 0 : _a.distanceResultField)\n                ? path_1.FieldPath.fromArgument(this._options.distanceResultField)\n                    .formattedName\n                : undefined,\n            distanceThreshold: ((_b = this._options) === null || _b === void 0 ? void 0 : _b.distanceThreshold)\n                ? { value: (_c = this._options) === null || _c === void 0 ? void 0 : _c.distanceThreshold }\n                : undefined,\n        };\n        if (explainOptions) {\n            queryProto.explainOptions = explainOptions;\n        }\n        return queryProto;\n    }\n    /**\n     * Construct the resulting vector snapshot for this query with given documents.\n     *\n     * @private\n     * @internal\n     */\n    _createSnapshot(readTime, size, docs, changes) {\n        return new vector_query_snapshot_1.VectorQuerySnapshot(this, readTime, size, docs, changes);\n    }\n    /**\n     * Construct a new vector query whose result will start after To support stream().\n     * This now throws an exception because cursors are not supported from the backend for vector queries yet.\n     *\n     * @private\n     * @internal\n     * @returns Serialized JSON for the query.\n     */\n    startAfter(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ...fieldValuesOrDocumentSnapshot) {\n        throw new Error('Unimplemented: Vector query does not support cursors yet.');\n    }\n    /**\n     * Compares this object with the given object for equality.\n     *\n     * This object is considered \"equal\" to the other object if and only if\n     * `other` performs the same vector distance search as this `VectorQuery` and\n     * the underlying Query of `other` compares equal to that of this object\n     * using `Query.isEqual()`.\n     *\n     * @param other - The object to compare to this object for equality.\n     * @returns `true` if this object is \"equal\" to the given object, as\n     * defined above, or `false` otherwise.\n     */\n    isEqual(other) {\n        if (this === other) {\n            return true;\n        }\n        if (!(other instanceof VectorQuery)) {\n            return false;\n        }\n        if (!this.query.isEqual(other.query)) {\n            return false;\n        }\n        return (this._rawVectorField === other._rawVectorField &&\n            (0, util_1.isPrimitiveArrayEqual)(this._rawQueryVector, other._rawQueryVector) &&\n            this._options.limit === other._options.limit &&\n            this._options.distanceMeasure === other._options.distanceMeasure &&\n            this._options.distanceThreshold === other._options.distanceThreshold &&\n            this._rawDistanceResultField === other._rawDistanceResultField);\n    }\n}\nexports.VectorQuery = VectorQuery;\n//# sourceMappingURL=vector-query.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}