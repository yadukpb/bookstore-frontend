{"ast":null,"code":"const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i) {\n  const entities = {};\n  if (xmlData[i + 3] === 'O' && xmlData[i + 4] === 'C' && xmlData[i + 5] === 'T' && xmlData[i + 6] === 'Y' && xmlData[i + 7] === 'P' && xmlData[i + 8] === 'E') {\n    i = i + 9;\n    let angleBracketsCount = 1;\n    let hasBody = false,\n      comment = false;\n    let exp = \"\";\n    for (; i < xmlData.length; i++) {\n      if (xmlData[i] === '<' && !comment) {\n        //Determine the tag type\n        if (hasBody && isEntity(xmlData, i)) {\n          i += 7;\n          [entityName, val, i] = readEntityExp(xmlData, i + 1);\n          if (val.indexOf(\"&\") === -1)\n            //Parameter entities are not supported\n            entities[validateEntityName(entityName)] = {\n              regx: RegExp(`&${entityName};`, \"g\"),\n              val: val\n            };\n        } else if (hasBody && isElement(xmlData, i)) i += 8; //Not supported\n        else if (hasBody && isAttlist(xmlData, i)) i += 8; //Not supported\n        else if (hasBody && isNotation(xmlData, i)) i += 9; //Not supported\n        else if (isComment) comment = true;else throw new Error(\"Invalid DOCTYPE\");\n        angleBracketsCount++;\n        exp = \"\";\n      } else if (xmlData[i] === '>') {\n        //Read tag content\n        if (comment) {\n          if (xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\") {\n            comment = false;\n            angleBracketsCount--;\n          }\n        } else {\n          angleBracketsCount--;\n        }\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      } else if (xmlData[i] === '[') {\n        hasBody = true;\n      } else {\n        exp += xmlData[i];\n      }\n    }\n    if (angleBracketsCount !== 0) {\n      throw new Error(`Unclosed DOCTYPE`);\n    }\n  } else {\n    throw new Error(`Invalid Tag instead of DOCTYPE`);\n  }\n  return {\n    entities,\n    i\n  };\n}\nfunction readEntityExp(xmlData, i) {\n  //External entities are not supported\n  //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n  //Parameter entities are not supported\n  //    <!ENTITY entityname \"&anotherElement;\">\n\n  //Internal entities are supported\n  //    <!ENTITY entityname \"replacement text\">\n\n  //read EntityName\n  let entityName = \"\";\n  for (; i < xmlData.length && xmlData[i] !== \"'\" && xmlData[i] !== '\"'; i++) {\n    // if(xmlData[i] === \" \") continue;\n    // else \n    entityName += xmlData[i];\n  }\n  entityName = entityName.trim();\n  if (entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n  //read Entity Value\n  const startChar = xmlData[i++];\n  let val = \"\";\n  for (; i < xmlData.length && xmlData[i] !== startChar; i++) {\n    val += xmlData[i];\n  }\n  return [entityName, val, i];\n}\nfunction isComment(xmlData, i) {\n  if (xmlData[i + 1] === '!' && xmlData[i + 2] === '-' && xmlData[i + 3] === '-') return true;\n  return false;\n}\nfunction isEntity(xmlData, i) {\n  if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'E' && xmlData[i + 3] === 'N' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'I' && xmlData[i + 6] === 'T' && xmlData[i + 7] === 'Y') return true;\n  return false;\n}\nfunction isElement(xmlData, i) {\n  if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'E' && xmlData[i + 3] === 'L' && xmlData[i + 4] === 'E' && xmlData[i + 5] === 'M' && xmlData[i + 6] === 'E' && xmlData[i + 7] === 'N' && xmlData[i + 8] === 'T') return true;\n  return false;\n}\nfunction isAttlist(xmlData, i) {\n  if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'A' && xmlData[i + 3] === 'T' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'L' && xmlData[i + 6] === 'I' && xmlData[i + 7] === 'S' && xmlData[i + 8] === 'T') return true;\n  return false;\n}\nfunction isNotation(xmlData, i) {\n  if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'N' && xmlData[i + 3] === 'O' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'A' && xmlData[i + 6] === 'T' && xmlData[i + 7] === 'I' && xmlData[i + 8] === 'O' && xmlData[i + 9] === 'N') return true;\n  return false;\n}\nfunction validateEntityName(name) {\n  if (util.isName(name)) return name;else throw new Error(`Invalid entity name ${name}`);\n}\nmodule.exports = readDocType;","map":{"version":3,"names":["util","require","readDocType","xmlData","i","entities","angleBracketsCount","hasBody","comment","exp","length","isEntity","entityName","val","readEntityExp","indexOf","validateEntityName","regx","RegExp","isElement","isAttlist","isNotation","isComment","Error","trim","startChar","name","isName","module","exports"],"sources":["/home/yadu/Music/Gifty/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"],"sourcesContent":["const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}