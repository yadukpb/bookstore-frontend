{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DropSearchIndexOperation = void 0;\nconst error_1 = require(\"../../error\");\nconst operation_1 = require(\"../operation\");\n/** @internal */\nclass DropSearchIndexOperation extends operation_1.AbstractOperation {\n  constructor(collection, name) {\n    super();\n    this.collection = collection;\n    this.name = name;\n  }\n  get commandName() {\n    return 'dropSearchIndex';\n  }\n  async execute(server, session) {\n    const namespace = this.collection.fullNamespace;\n    const command = {\n      dropSearchIndex: namespace.collection\n    };\n    if (typeof this.name === 'string') {\n      command.name = this.name;\n    }\n    try {\n      await server.command(namespace, command, {\n        session\n      });\n    } catch (error) {\n      const isNamespaceNotFoundError = error instanceof error_1.MongoServerError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound;\n      if (!isNamespaceNotFoundError) {\n        throw error;\n      }\n    }\n  }\n}\nexports.DropSearchIndexOperation = DropSearchIndexOperation;","map":{"version":3,"mappings":";;;;;;AAEA;AAGA;AAEA;AACA,MAAaA,wBAAyB,SAAQC,6BAAuB;EACnEC,YACmBC,UAAsB,EACtBC,IAAY;IAE7B,KAAK,EAAE;IAHU,eAAU,GAAVD,UAAU;IACV,SAAI,GAAJC,IAAI;EAGvB;EAEA,IAAaC,WAAW;IACtB,OAAO,iBAA0B;EACnC;EAES,MAAMC,OAAO,CAACC,MAAc,EAAEC,OAAkC;IACvE,MAAMC,SAAS,GAAG,IAAI,CAACN,UAAU,CAACO,aAAa;IAE/C,MAAMC,OAAO,GAAa;MACxBC,eAAe,EAAEH,SAAS,CAACN;KAC5B;IAED,IAAI,OAAO,IAAI,CAACC,IAAI,KAAK,QAAQ,EAAE;MACjCO,OAAO,CAACP,IAAI,GAAG,IAAI,CAACA,IAAI;IAC1B;IAEA,IAAI;MACF,MAAMG,MAAM,CAACI,OAAO,CAACF,SAAS,EAAEE,OAAO,EAAE;QAAEH;MAAO,CAAE,CAAC;IACvD,CAAC,CAAC,OAAOK,KAAK,EAAE;MACd,MAAMC,wBAAwB,GAC5BD,KAAK,YAAYE,wBAAgB,IAAIF,KAAK,CAACG,IAAI,KAAKD,2BAAmB,CAACE,iBAAiB;MAC3F,IAAI,CAACH,wBAAwB,EAAE;QAC7B,MAAMD,KAAK;MACb;IACF;EACF;;AAhCFK","names":["DropSearchIndexOperation","operation_1","constructor","collection","name","commandName","execute","server","session","namespace","fullNamespace","command","dropSearchIndex","error","isNamespaceNotFoundError","error_1","code","NamespaceNotFound","exports"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/operations/search_indexes/drop.ts"],"sourcesContent":["import type { Document } from '../../bson';\nimport type { Collection } from '../../collection';\nimport { MONGODB_ERROR_CODES, MongoServerError } from '../../error';\nimport type { Server } from '../../sdam/server';\nimport type { ClientSession } from '../../sessions';\nimport { AbstractOperation } from '../operation';\n\n/** @internal */\nexport class DropSearchIndexOperation extends AbstractOperation<void> {\n  constructor(\n    private readonly collection: Collection,\n    private readonly name: string\n  ) {\n    super();\n  }\n\n  override get commandName() {\n    return 'dropSearchIndex' as const;\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<void> {\n    const namespace = this.collection.fullNamespace;\n\n    const command: Document = {\n      dropSearchIndex: namespace.collection\n    };\n\n    if (typeof this.name === 'string') {\n      command.name = this.name;\n    }\n\n    try {\n      await server.command(namespace, command, { session });\n    } catch (error) {\n      const isNamespaceNotFoundError =\n        error instanceof MongoServerError && error.code === MONGODB_ERROR_CODES.NamespaceNotFound;\n      if (!isNamespaceNotFoundError) {\n        throw error;\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}