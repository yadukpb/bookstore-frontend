{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar tslib = require('tslib');\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar _a;\n/**\r\n * A container for all of the Logger instances\r\n */\nvar instances = [];\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\nexports.LogLevel = void 0;\n(function (LogLevel) {\n  LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\n  LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n  LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\n  LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\n  LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\n})(exports.LogLevel || (exports.LogLevel = {}));\nvar levelStringToEnum = {\n  'debug': exports.LogLevel.DEBUG,\n  'verbose': exports.LogLevel.VERBOSE,\n  'info': exports.LogLevel.INFO,\n  'warn': exports.LogLevel.WARN,\n  'error': exports.LogLevel.ERROR,\n  'silent': exports.LogLevel.SILENT\n};\n/**\r\n * The default log level\r\n */\nvar defaultLogLevel = exports.LogLevel.INFO;\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\nvar ConsoleMethod = (_a = {}, _a[exports.LogLevel.DEBUG] = 'log', _a[exports.LogLevel.VERBOSE] = 'log', _a[exports.LogLevel.INFO] = 'info', _a[exports.LogLevel.WARN] = 'warn', _a[exports.LogLevel.ERROR] = 'error', _a);\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\nvar defaultLogHandler = function (instance, logType) {\n  var args = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n  if (logType < instance.logLevel) {\n    return;\n  }\n  var now = new Date().toISOString();\n  var method = ConsoleMethod[logType];\n  if (method) {\n    console[method].apply(console, tslib.__spreadArray([\"[\".concat(now, \"]  \").concat(instance.name, \":\")], args, false));\n  } else {\n    throw new Error(\"Attempted to log a message with an invalid logType (value: \".concat(logType, \")\"));\n  }\n};\nvar Logger = /** @class */function () {\n  /**\r\n   * Gives you an instance of a Logger to capture messages according to\r\n   * Firebase's logging scheme.\r\n   *\r\n   * @param name The name that the logs will be associated with\r\n   */\n  function Logger(name) {\n    this.name = name;\n    /**\r\n     * The log level of the given Logger instance.\r\n     */\n    this._logLevel = defaultLogLevel;\n    /**\r\n     * The main (internal) log handler for the Logger instance.\r\n     * Can be set to a new function in internal package code but not by user.\r\n     */\n    this._logHandler = defaultLogHandler;\n    /**\r\n     * The optional, additional, user-defined log handler for the Logger instance.\r\n     */\n    this._userLogHandler = null;\n    /**\r\n     * Capture the current instance for later use\r\n     */\n    instances.push(this);\n  }\n  Object.defineProperty(Logger.prototype, \"logLevel\", {\n    get: function () {\n      return this._logLevel;\n    },\n    set: function (val) {\n      if (!(val in exports.LogLevel)) {\n        throw new TypeError(\"Invalid value \\\"\".concat(val, \"\\\" assigned to `logLevel`\"));\n      }\n      this._logLevel = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  // Workaround for setter/getter having to be the same type.\n  Logger.prototype.setLogLevel = function (val) {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  };\n  Object.defineProperty(Logger.prototype, \"logHandler\", {\n    get: function () {\n      return this._logHandler;\n    },\n    set: function (val) {\n      if (typeof val !== 'function') {\n        throw new TypeError('Value assigned to `logHandler` must be a function');\n      }\n      this._logHandler = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Logger.prototype, \"userLogHandler\", {\n    get: function () {\n      return this._userLogHandler;\n    },\n    set: function (val) {\n      this._userLogHandler = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * The functions below are all based on the `console` interface\r\n   */\n  Logger.prototype.debug = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this._userLogHandler && this._userLogHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.DEBUG], args, false));\n    this._logHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.DEBUG], args, false));\n  };\n  Logger.prototype.log = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this._userLogHandler && this._userLogHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.VERBOSE], args, false));\n    this._logHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.VERBOSE], args, false));\n  };\n  Logger.prototype.info = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this._userLogHandler && this._userLogHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.INFO], args, false));\n    this._logHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.INFO], args, false));\n  };\n  Logger.prototype.warn = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this._userLogHandler && this._userLogHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.WARN], args, false));\n    this._logHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.WARN], args, false));\n  };\n  Logger.prototype.error = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    this._userLogHandler && this._userLogHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.ERROR], args, false));\n    this._logHandler.apply(this, tslib.__spreadArray([this, exports.LogLevel.ERROR], args, false));\n  };\n  return Logger;\n}();\nfunction setLogLevel(level) {\n  instances.forEach(function (inst) {\n    inst.setLogLevel(level);\n  });\n}\nfunction setUserLogHandler(logCallback, options) {\n  var _loop_1 = function (instance) {\n    var customLogLevel = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = function (instance, level) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n          args[_i - 2] = arguments[_i];\n        }\n        var message = args.map(function (arg) {\n          if (arg == null) {\n            return null;\n          } else if (typeof arg === 'string') {\n            return arg;\n          } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n            return arg.toString();\n          } else if (arg instanceof Error) {\n            return arg.message;\n          } else {\n            try {\n              return JSON.stringify(arg);\n            } catch (ignored) {\n              return null;\n            }\n          }\n        }).filter(function (arg) {\n          return arg;\n        }).join(' ');\n        if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\n          logCallback({\n            level: exports.LogLevel[level].toLowerCase(),\n            message: message,\n            args: args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  };\n  for (var _i = 0, instances_1 = instances; _i < instances_1.length; _i++) {\n    var instance = instances_1[_i];\n    _loop_1(instance);\n  }\n}\nexports.Logger = Logger;\nexports.setLogLevel = setLogLevel;\nexports.setUserLogHandler = setUserLogHandler;","map":{"version":3,"mappings":"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","names":["instances","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","_a","defaultLogHandler","instance","logType","args","_i","logLevel","now","Date","toISOString","method","console","__spreadArray","name","Error","push","Object","Logger","get","_logLevel","set","val","TypeError","_logHandler","_userLogHandler","apply","setLogLevel","level","forEach","inst","logCallback","options","customLogLevel","userLogHandler","message","map","arg","toString","JSON","stringify","ignored","filter","join","toLowerCase","type","instances_1"],"sources":["/home/yadu/Music/Gifty/node_modules/@firebase/logger/src/logger.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}