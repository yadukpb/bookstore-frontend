{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractOperation = exports.Aspect = void 0;\nexports.defineAspects = defineAspects;\nconst bson_1 = require(\"../bson\");\nconst read_preference_1 = require(\"../read_preference\");\nexports.Aspect = {\n  READ_OPERATION: Symbol('READ_OPERATION'),\n  WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n  RETRYABLE: Symbol('RETRYABLE'),\n  EXPLAINABLE: Symbol('EXPLAINABLE'),\n  SKIP_COLLATION: Symbol('SKIP_COLLATION'),\n  CURSOR_CREATING: Symbol('CURSOR_CREATING'),\n  MUST_SELECT_SAME_SERVER: Symbol('MUST_SELECT_SAME_SERVER'),\n  COMMAND_BATCHING: Symbol('COMMAND_BATCHING')\n};\n/** @internal */\nconst kSession = Symbol('session');\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n * @internal\n */\nclass AbstractOperation {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.readPreference = this.hasAspect(exports.Aspect.WRITE_OPERATION) ? read_preference_1.ReadPreference.primary : read_preference_1.ReadPreference.fromOptions(options) ?? read_preference_1.ReadPreference.primary;\n    // Pull the BSON serialize options from the already-resolved options\n    this.bsonOptions = (0, bson_1.resolveBSONOptions)(options);\n    this[kSession] = options.session != null ? options.session : undefined;\n    this.options = options;\n    this.bypassPinningCheck = !!options.bypassPinningCheck;\n    this.trySecondaryWrite = false;\n  }\n  hasAspect(aspect) {\n    const ctor = this.constructor;\n    if (ctor.aspects == null) {\n      return false;\n    }\n    return ctor.aspects.has(aspect);\n  }\n  get session() {\n    return this[kSession];\n  }\n  clearSession() {\n    this[kSession] = undefined;\n  }\n  resetBatch() {\n    return true;\n  }\n  get canRetryRead() {\n    return this.hasAspect(exports.Aspect.RETRYABLE) && this.hasAspect(exports.Aspect.READ_OPERATION);\n  }\n  get canRetryWrite() {\n    return this.hasAspect(exports.Aspect.RETRYABLE) && this.hasAspect(exports.Aspect.WRITE_OPERATION);\n  }\n}\nexports.AbstractOperation = AbstractOperation;\nfunction defineAspects(operation, aspects) {\n  if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n    aspects = [aspects];\n  }\n  aspects = new Set(aspects);\n  Object.defineProperty(operation, 'aspects', {\n    value: aspects,\n    writable: false\n  });\n  return aspects;\n}","map":{"version":3,"mappings":";;;;;;AAkHAA;AAlHA;AACA;AAKaA,cAAM,GAAG;EACpBC,cAAc,EAAEC,MAAM,CAAC,gBAAgB,CAAC;EACxCC,eAAe,EAAED,MAAM,CAAC,iBAAiB,CAAC;EAC1CE,SAAS,EAAEF,MAAM,CAAC,WAAW,CAAC;EAC9BG,WAAW,EAAEH,MAAM,CAAC,aAAa,CAAC;EAClCI,cAAc,EAAEJ,MAAM,CAAC,gBAAgB,CAAC;EACxCK,eAAe,EAAEL,MAAM,CAAC,iBAAiB,CAAC;EAC1CM,uBAAuB,EAAEN,MAAM,CAAC,yBAAyB,CAAC;EAC1DO,gBAAgB,EAAEP,MAAM,CAAC,kBAAkB;CACnC;AAsBV;AACA,MAAMQ,QAAQ,GAAGR,MAAM,CAAC,SAAS,CAAC;AAElC;;;;;;;AAOA,MAAsBS,iBAAiB;EAgBrCC,cAA0C;IAAA,IAA9BC,8EAA4B,EAAE;IACxC,IAAI,CAACC,cAAc,GAAG,IAAI,CAACC,SAAS,CAACf,cAAM,CAACG,eAAe,CAAC,GACxDa,gCAAc,CAACC,OAAO,GACrBD,gCAAc,CAACE,WAAW,CAACL,OAAO,CAAC,IAAIG,gCAAc,CAACC,OAAQ;IAEnE;IACA,IAAI,CAACE,WAAW,GAAG,6BAAkB,EAACN,OAAO,CAAC;IAE9C,IAAI,CAACH,QAAQ,CAAC,GAAGG,OAAO,CAACO,OAAO,IAAI,IAAI,GAAGP,OAAO,CAACO,OAAO,GAAGC,SAAS;IAEtE,IAAI,CAACR,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACS,kBAAkB,GAAG,CAAC,CAACT,OAAO,CAACS,kBAAkB;IACtD,IAAI,CAACC,iBAAiB,GAAG,KAAK;EAChC;EAQAR,SAAS,CAACS,MAAc;IACtB,MAAMC,IAAI,GAAG,IAAI,CAACb,WAAwC;IAC1D,IAAIa,IAAI,CAACC,OAAO,IAAI,IAAI,EAAE;MACxB,OAAO,KAAK;IACd;IAEA,OAAOD,IAAI,CAACC,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;EACjC;EAEA,IAAIJ,OAAO;IACT,OAAO,IAAI,CAACV,QAAQ,CAAC;EACvB;EAEAkB,YAAY;IACV,IAAI,CAAClB,QAAQ,CAAC,GAAGW,SAAS;EAC5B;EAEAQ,UAAU;IACR,OAAO,IAAI;EACb;EAEA,IAAIC,YAAY;IACd,OAAO,IAAI,CAACf,SAAS,CAACf,cAAM,CAACI,SAAS,CAAC,IAAI,IAAI,CAACW,SAAS,CAACf,cAAM,CAACC,cAAc,CAAC;EAClF;EAEA,IAAI8B,aAAa;IACf,OAAO,IAAI,CAAChB,SAAS,CAACf,cAAM,CAACI,SAAS,CAAC,IAAI,IAAI,CAACW,SAAS,CAACf,cAAM,CAACG,eAAe,CAAC;EACnF;;AAhEFH;AAmEA,SAAgBgC,aAAa,CAC3BC,SAAoC,EACpCP,OAAwC;EAExC,IAAI,CAACQ,KAAK,CAACC,OAAO,CAACT,OAAO,CAAC,IAAI,EAAEA,OAAO,YAAYU,GAAG,CAAC,EAAE;IACxDV,OAAO,GAAG,CAACA,OAAO,CAAC;EACrB;EAEAA,OAAO,GAAG,IAAIU,GAAG,CAACV,OAAO,CAAC;EAC1BW,MAAM,CAACC,cAAc,CAACL,SAAS,EAAE,SAAS,EAAE;IAC1CM,KAAK,EAAEb,OAAO;IACdc,QAAQ,EAAE;GACX,CAAC;EAEF,OAAOd,OAAO;AAChB","names":["exports","READ_OPERATION","Symbol","WRITE_OPERATION","RETRYABLE","EXPLAINABLE","SKIP_COLLATION","CURSOR_CREATING","MUST_SELECT_SAME_SERVER","COMMAND_BATCHING","kSession","AbstractOperation","constructor","options","readPreference","hasAspect","read_preference_1","primary","fromOptions","bsonOptions","session","undefined","bypassPinningCheck","trySecondaryWrite","aspect","ctor","aspects","has","clearSession","resetBatch","canRetryRead","canRetryWrite","defineAspects","operation","Array","isArray","Set","Object","defineProperty","value","writable"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/operations/operation.ts"],"sourcesContent":["import { type BSONSerializeOptions, type Document, resolveBSONOptions } from '../bson';\nimport { ReadPreference, type ReadPreferenceLike } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport type { MongoDBNamespace } from '../utils';\n\nexport const Aspect = {\n  READ_OPERATION: Symbol('READ_OPERATION'),\n  WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n  RETRYABLE: Symbol('RETRYABLE'),\n  EXPLAINABLE: Symbol('EXPLAINABLE'),\n  SKIP_COLLATION: Symbol('SKIP_COLLATION'),\n  CURSOR_CREATING: Symbol('CURSOR_CREATING'),\n  MUST_SELECT_SAME_SERVER: Symbol('MUST_SELECT_SAME_SERVER'),\n  COMMAND_BATCHING: Symbol('COMMAND_BATCHING')\n} as const;\n\n/** @public */\nexport type Hint = string | Document;\n\n/** @public */\nexport interface OperationOptions extends BSONSerializeOptions {\n  /** Specify ClientSession for this command */\n  session?: ClientSession;\n  willRetryWrite?: boolean;\n\n  /** The preferred read preference (ReadPreference.primary, ReadPreference.primary_preferred, ReadPreference.secondary, ReadPreference.secondary_preferred, ReadPreference.nearest). */\n  readPreference?: ReadPreferenceLike;\n\n  /** @internal Hints to `executeOperation` that this operation should not unpin on an ended transaction */\n  bypassPinningCheck?: boolean;\n  omitReadPreference?: boolean;\n\n  /** @internal TODO(NODE-5688): make this public */\n  timeoutMS?: number;\n}\n\n/** @internal */\nconst kSession = Symbol('session');\n\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n * @internal\n */\nexport abstract class AbstractOperation<TResult = any> {\n  ns!: MongoDBNamespace;\n  readPreference: ReadPreference;\n  server!: Server;\n  bypassPinningCheck: boolean;\n  trySecondaryWrite: boolean;\n\n  // BSON serialization options\n  bsonOptions?: BSONSerializeOptions;\n\n  options: OperationOptions;\n\n  [kSession]: ClientSession | undefined;\n\n  static aspects?: Set<symbol>;\n\n  constructor(options: OperationOptions = {}) {\n    this.readPreference = this.hasAspect(Aspect.WRITE_OPERATION)\n      ? ReadPreference.primary\n      : (ReadPreference.fromOptions(options) ?? ReadPreference.primary);\n\n    // Pull the BSON serialize options from the already-resolved options\n    this.bsonOptions = resolveBSONOptions(options);\n\n    this[kSession] = options.session != null ? options.session : undefined;\n\n    this.options = options;\n    this.bypassPinningCheck = !!options.bypassPinningCheck;\n    this.trySecondaryWrite = false;\n  }\n\n  /** Must match the first key of the command object sent to the server.\n  Command name should be stateless (should not use 'this' keyword) */\n  abstract get commandName(): string;\n\n  abstract execute(server: Server, session: ClientSession | undefined): Promise<TResult>;\n\n  hasAspect(aspect: symbol): boolean {\n    const ctor = this.constructor as { aspects?: Set<symbol> };\n    if (ctor.aspects == null) {\n      return false;\n    }\n\n    return ctor.aspects.has(aspect);\n  }\n\n  get session(): ClientSession | undefined {\n    return this[kSession];\n  }\n\n  clearSession() {\n    this[kSession] = undefined;\n  }\n\n  resetBatch(): boolean {\n    return true;\n  }\n\n  get canRetryRead(): boolean {\n    return this.hasAspect(Aspect.RETRYABLE) && this.hasAspect(Aspect.READ_OPERATION);\n  }\n\n  get canRetryWrite(): boolean {\n    return this.hasAspect(Aspect.RETRYABLE) && this.hasAspect(Aspect.WRITE_OPERATION);\n  }\n}\n\nexport function defineAspects(\n  operation: { aspects?: Set<symbol> },\n  aspects: symbol | symbol[] | Set<symbol>\n): Set<symbol> {\n  if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n    aspects = [aspects];\n  }\n\n  aspects = new Set(aspects);\n  Object.defineProperty(operation, 'aspects', {\n    value: aspects,\n    writable: false\n  });\n\n  return aspects;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}