{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal } from '../internal/global-utils';\nimport { NoopTextMapPropagator } from '../propagation/NoopTextMapPropagator';\nimport { defaultTextMapGetter, defaultTextMapSetter } from '../propagation/TextMapPropagator';\nimport { getBaggage, getActiveBaggage, setBaggage, deleteBaggage } from '../baggage/context-helpers';\nimport { createBaggage } from '../baggage/utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'propagation';\nvar NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nvar PropagationAPI = /** @class */function () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function PropagationAPI() {\n    this.createBaggage = createBaggage;\n    this.getBaggage = getBaggage;\n    this.getActiveBaggage = getActiveBaggage;\n    this.setBaggage = setBaggage;\n    this.deleteBaggage = deleteBaggage;\n  }\n  /** Get the singleton instance of the Propagator API */\n  PropagationAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new PropagationAPI();\n    }\n    return this._instance;\n  };\n  /**\n   * Set the current propagator.\n   *\n   * @returns true if the propagator was successfully registered, else false\n   */\n  PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n    return registerGlobal(API_NAME, propagator, DiagAPI.instance());\n  };\n  /**\n   * Inject context into a carrier to be propagated inter-process\n   *\n   * @param context Context carrying tracing data to inject\n   * @param carrier carrier to inject context into\n   * @param setter Function used to set values on the carrier\n   */\n  PropagationAPI.prototype.inject = function (context, carrier, setter) {\n    if (setter === void 0) {\n      setter = defaultTextMapSetter;\n    }\n    return this._getGlobalPropagator().inject(context, carrier, setter);\n  };\n  /**\n   * Extract context from a carrier\n   *\n   * @param context Context which the newly created context will inherit from\n   * @param carrier Carrier to extract context from\n   * @param getter Function used to extract keys from a carrier\n   */\n  PropagationAPI.prototype.extract = function (context, carrier, getter) {\n    if (getter === void 0) {\n      getter = defaultTextMapGetter;\n    }\n    return this._getGlobalPropagator().extract(context, carrier, getter);\n  };\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n  PropagationAPI.prototype.fields = function () {\n    return this._getGlobalPropagator().fields();\n  };\n  /** Remove the global propagator */\n  PropagationAPI.prototype.disable = function () {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  };\n  PropagationAPI.prototype._getGlobalPropagator = function () {\n    return getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n  };\n  return PropagationAPI;\n}();\nexport { PropagationAPI };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAiBA,SACEA,SAAS,EACTC,cAAc,EACdC,gBAAgB,QACX,0BAA0B;AACjC,SAASC,qBAAqB,QAAQ,sCAAsC;AAC5E,SACEC,oBAAoB,EACpBC,oBAAoB,QAIf,kCAAkC;AACzC,SACEC,UAAU,EACVC,gBAAgB,EAChBC,UAAU,EACVC,aAAa,QACR,4BAA4B;AACnC,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,OAAO,QAAQ,QAAQ;AAEhC,IAAMC,QAAQ,GAAG,aAAa;AAC9B,IAAMC,wBAAwB,GAAG,IAAIV,qBAAqB,EAAE;AAE5D;;;AAGA;EAGE;EACA;IA8DO,kBAAa,GAAGO,aAAa;IAE7B,eAAU,GAAGJ,UAAU;IAEvB,qBAAgB,GAAGC,gBAAgB;IAEnC,eAAU,GAAGC,UAAU;IAEvB,kBAAa,GAAGC,aAAa;EAtEb;EAEvB;EACcK,0BAAW,GAAzB;IACE,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACnB,IAAI,CAACA,SAAS,GAAG,IAAID,cAAc,EAAE;;IAGvC,OAAO,IAAI,CAACC,SAAS;EACvB,CAAC;EAED;;;;;EAKOD,4CAAmB,GAA1B,UAA2BE,UAA6B;IACtD,OAAOf,cAAc,CAACW,QAAQ,EAAEI,UAAU,EAAEL,OAAO,CAACM,QAAQ,EAAE,CAAC;EACjE,CAAC;EAED;;;;;;;EAOOH,+BAAM,GAAb,UACEI,OAAgB,EAChBC,OAAgB,EAChBC,MAAqD;IAArD;MAAAA,6BAAqD;IAAA;IAErD,OAAO,IAAI,CAACC,oBAAoB,EAAE,CAACC,MAAM,CAACJ,OAAO,EAAEC,OAAO,EAAEC,MAAM,CAAC;EACrE,CAAC;EAED;;;;;;;EAOON,gCAAO,GAAd,UACEI,OAAgB,EAChBC,OAAgB,EAChBI,MAAqD;IAArD;MAAAA,6BAAqD;IAAA;IAErD,OAAO,IAAI,CAACF,oBAAoB,EAAE,CAACG,OAAO,CAACN,OAAO,EAAEC,OAAO,EAAEI,MAAM,CAAC;EACtE,CAAC;EAED;;;EAGOT,+BAAM,GAAb;IACE,OAAO,IAAI,CAACO,oBAAoB,EAAE,CAACI,MAAM,EAAE;EAC7C,CAAC;EAED;EACOX,gCAAO,GAAd;IACEZ,gBAAgB,CAACU,QAAQ,EAAED,OAAO,CAACM,QAAQ,EAAE,CAAC;EAChD,CAAC;EAYOH,6CAAoB,GAA5B;IACE,OAAOd,SAAS,CAACY,QAAQ,CAAC,IAAIC,wBAAwB;EACxD,CAAC;EACH,qBAAC;AAAD,CAAC,EA/ED","names":["getGlobal","registerGlobal","unregisterGlobal","NoopTextMapPropagator","defaultTextMapGetter","defaultTextMapSetter","getBaggage","getActiveBaggage","setBaggage","deleteBaggage","createBaggage","DiagAPI","API_NAME","NOOP_TEXT_MAP_PROPAGATOR","PropagationAPI","_instance","propagator","instance","context","carrier","setter","_getGlobalPropagator","inject","getter","extract","fields"],"sources":["/home/yadu/Music/Gifty/node_modules/@opentelemetry/api/src/api/propagation.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { NoopTextMapPropagator } from '../propagation/NoopTextMapPropagator';\nimport {\n  defaultTextMapGetter,\n  defaultTextMapSetter,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '../propagation/TextMapPropagator';\nimport {\n  getBaggage,\n  getActiveBaggage,\n  setBaggage,\n  deleteBaggage,\n} from '../baggage/context-helpers';\nimport { createBaggage } from '../baggage/utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'propagation';\nconst NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nexport class PropagationAPI {\n  private static _instance?: PropagationAPI;\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Propagator API */\n  public static getInstance(): PropagationAPI {\n    if (!this._instance) {\n      this._instance = new PropagationAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current propagator.\n   *\n   * @returns true if the propagator was successfully registered, else false\n   */\n  public setGlobalPropagator(propagator: TextMapPropagator): boolean {\n    return registerGlobal(API_NAME, propagator, DiagAPI.instance());\n  }\n\n  /**\n   * Inject context into a carrier to be propagated inter-process\n   *\n   * @param context Context carrying tracing data to inject\n   * @param carrier carrier to inject context into\n   * @param setter Function used to set values on the carrier\n   */\n  public inject<Carrier>(\n    context: Context,\n    carrier: Carrier,\n    setter: TextMapSetter<Carrier> = defaultTextMapSetter\n  ): void {\n    return this._getGlobalPropagator().inject(context, carrier, setter);\n  }\n\n  /**\n   * Extract context from a carrier\n   *\n   * @param context Context which the newly created context will inherit from\n   * @param carrier Carrier to extract context from\n   * @param getter Function used to extract keys from a carrier\n   */\n  public extract<Carrier>(\n    context: Context,\n    carrier: Carrier,\n    getter: TextMapGetter<Carrier> = defaultTextMapGetter\n  ): Context {\n    return this._getGlobalPropagator().extract(context, carrier, getter);\n  }\n\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n  public fields(): string[] {\n    return this._getGlobalPropagator().fields();\n  }\n\n  /** Remove the global propagator */\n  public disable() {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  }\n\n  public createBaggage = createBaggage;\n\n  public getBaggage = getBaggage;\n\n  public getActiveBaggage = getActiveBaggage;\n\n  public setBaggage = setBaggage;\n\n  public deleteBaggage = deleteBaggage;\n\n  private _getGlobalPropagator(): TextMapPropagator {\n    return getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}