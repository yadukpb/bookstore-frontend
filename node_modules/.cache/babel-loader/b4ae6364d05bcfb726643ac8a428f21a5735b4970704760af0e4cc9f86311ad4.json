{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SENSITIVE_COMMANDS = exports.CommandFailedEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = void 0;\nconst constants_1 = require(\"../constants\");\nconst utils_1 = require(\"../utils\");\nconst commands_1 = require(\"./commands\");\n/**\n * An event indicating the start of a given command\n * @public\n * @category Event\n */\nclass CommandStartedEvent {\n  /**\n   * Create a started event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   */\n  constructor(connection, command, serverConnectionId) {\n    /** @internal */\n    this.name = constants_1.COMMAND_STARTED;\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const {\n      address,\n      connectionId,\n      serviceId\n    } = extractConnectionDetails(connection);\n    // TODO: remove in major revision, this is not spec behavior\n    if (exports.SENSITIVE_COMMANDS.has(commandName)) {\n      this.commandObj = {};\n      this.commandObj[commandName] = true;\n    }\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.databaseName = command.databaseName;\n    this.commandName = commandName;\n    this.command = maybeRedact(commandName, cmd, cmd);\n    this.serverConnectionId = serverConnectionId;\n  }\n  /* @internal */\n  get hasServiceId() {\n    return !!this.serviceId;\n  }\n}\nexports.CommandStartedEvent = CommandStartedEvent;\n/**\n * An event indicating the success of a given command\n * @public\n * @category Event\n */\nclass CommandSucceededEvent {\n  /**\n   * Create a succeeded event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   * @param reply - the reply for this command from the server\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(connection, command, reply, started, serverConnectionId) {\n    /** @internal */\n    this.name = constants_1.COMMAND_SUCCEEDED;\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const {\n      address,\n      connectionId,\n      serviceId\n    } = extractConnectionDetails(connection);\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.commandName = commandName;\n    this.duration = (0, utils_1.calculateDurationInMs)(started);\n    this.reply = maybeRedact(commandName, cmd, extractReply(command, reply));\n    this.serverConnectionId = serverConnectionId;\n  }\n  /* @internal */\n  get hasServiceId() {\n    return !!this.serviceId;\n  }\n}\nexports.CommandSucceededEvent = CommandSucceededEvent;\n/**\n * An event indicating the failure of a given command\n * @public\n * @category Event\n */\nclass CommandFailedEvent {\n  /**\n   * Create a failure event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   * @param error - the generated error or a server error response\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(connection, command, error, started, serverConnectionId) {\n    /** @internal */\n    this.name = constants_1.COMMAND_FAILED;\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const {\n      address,\n      connectionId,\n      serviceId\n    } = extractConnectionDetails(connection);\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.commandName = commandName;\n    this.duration = (0, utils_1.calculateDurationInMs)(started);\n    this.failure = maybeRedact(commandName, cmd, error);\n    this.serverConnectionId = serverConnectionId;\n  }\n  /* @internal */\n  get hasServiceId() {\n    return !!this.serviceId;\n  }\n}\nexports.CommandFailedEvent = CommandFailedEvent;\n/**\n * Commands that we want to redact because of the sensitive nature of their contents\n * @internal\n */\nexports.SENSITIVE_COMMANDS = new Set(['authenticate', 'saslStart', 'saslContinue', 'getnonce', 'createUser', 'updateUser', 'copydbgetnonce', 'copydbsaslstart', 'copydb']);\nconst HELLO_COMMANDS = new Set(['hello', constants_1.LEGACY_HELLO_COMMAND, constants_1.LEGACY_HELLO_COMMAND_CAMEL_CASE]);\n// helper methods\nconst extractCommandName = commandDoc => Object.keys(commandDoc)[0];\nconst namespace = command => command.ns;\nconst collectionName = command => command.ns.split('.')[1];\nconst maybeRedact = (commandName, commandDoc, result) => exports.SENSITIVE_COMMANDS.has(commandName) || HELLO_COMMANDS.has(commandName) && commandDoc.speculativeAuthenticate ? {} : result;\nconst LEGACY_FIND_QUERY_MAP = {\n  $query: 'filter',\n  $orderby: 'sort',\n  $hint: 'hint',\n  $comment: 'comment',\n  $maxScan: 'maxScan',\n  $max: 'max',\n  $min: 'min',\n  $returnKey: 'returnKey',\n  $showDiskLoc: 'showRecordId',\n  $maxTimeMS: 'maxTimeMS',\n  $snapshot: 'snapshot'\n};\nconst LEGACY_FIND_OPTIONS_MAP = {\n  numberToSkip: 'skip',\n  numberToReturn: 'batchSize',\n  returnFieldSelector: 'projection'\n};\nconst OP_QUERY_KEYS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial', 'exhaust'];\n/** Extract the actual command from the query, possibly up-converting if it's a legacy format */\nfunction extractCommand(command) {\n  if (command instanceof commands_1.OpMsgRequest) {\n    const cmd = (0, utils_1.deepCopy)(command.command);\n    // For OP_MSG with payload type 1 we need to pull the documents\n    // array out of the document sequence for monitoring.\n    if (cmd.ops instanceof commands_1.DocumentSequence) {\n      cmd.ops = cmd.ops.documents;\n    }\n    if (cmd.nsInfo instanceof commands_1.DocumentSequence) {\n      cmd.nsInfo = cmd.nsInfo.documents;\n    }\n    return cmd;\n  }\n  if (command.query?.$query) {\n    let result;\n    if (command.ns === 'admin.$cmd') {\n      // up-convert legacy command\n      result = Object.assign({}, command.query.$query);\n    } else {\n      // up-convert legacy find command\n      result = {\n        find: collectionName(command)\n      };\n      Object.keys(LEGACY_FIND_QUERY_MAP).forEach(key => {\n        if (command.query[key] != null) {\n          result[LEGACY_FIND_QUERY_MAP[key]] = (0, utils_1.deepCopy)(command.query[key]);\n        }\n      });\n    }\n    Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(key => {\n      const legacyKey = key;\n      if (command[legacyKey] != null) {\n        result[LEGACY_FIND_OPTIONS_MAP[legacyKey]] = (0, utils_1.deepCopy)(command[legacyKey]);\n      }\n    });\n    OP_QUERY_KEYS.forEach(key => {\n      if (command[key]) {\n        result[key] = command[key];\n      }\n    });\n    if (command.pre32Limit != null) {\n      result.limit = command.pre32Limit;\n    }\n    if (command.query.$explain) {\n      return {\n        explain: result\n      };\n    }\n    return result;\n  }\n  const clonedQuery = {};\n  const clonedCommand = {};\n  if (command.query) {\n    for (const k in command.query) {\n      clonedQuery[k] = (0, utils_1.deepCopy)(command.query[k]);\n    }\n    clonedCommand.query = clonedQuery;\n  }\n  for (const k in command) {\n    if (k === 'query') continue;\n    clonedCommand[k] = (0, utils_1.deepCopy)(command[k]);\n  }\n  return command.query ? clonedQuery : clonedCommand;\n}\nfunction extractReply(command, reply) {\n  if (!reply) {\n    return reply;\n  }\n  if (command instanceof commands_1.OpMsgRequest) {\n    return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n  }\n  // is this a legacy find command?\n  if (command.query && command.query.$query != null) {\n    return {\n      ok: 1,\n      cursor: {\n        id: (0, utils_1.deepCopy)(reply.cursorId),\n        ns: namespace(command),\n        firstBatch: (0, utils_1.deepCopy)(reply.documents)\n      }\n    };\n  }\n  return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n}\nfunction extractConnectionDetails(connection) {\n  let connectionId;\n  if ('id' in connection) {\n    connectionId = connection.id;\n  }\n  return {\n    address: connection.address,\n    serviceId: connection.serviceId,\n    connectionId\n  };\n}","map":{"version":3,"mappings":"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","names":["CommandStartedEvent","constructor","connection","command","serverConnectionId","constants_1","cmd","extractCommand","commandName","extractCommandName","address","connectionId","serviceId","extractConnectionDetails","exports","has","commandObj","requestId","databaseName","maybeRedact","hasServiceId","CommandSucceededEvent","reply","started","duration","extractReply","CommandFailedEvent","error","failure","Set","HELLO_COMMANDS","commandDoc","Object","keys","namespace","ns","collectionName","split","result","speculativeAuthenticate","LEGACY_FIND_QUERY_MAP","$query","$orderby","$hint","$comment","$maxScan","$max","$min","$returnKey","$showDiskLoc","$maxTimeMS","$snapshot","LEGACY_FIND_OPTIONS_MAP","numberToSkip","numberToReturn","returnFieldSelector","OP_QUERY_KEYS","commands_1","ops","documents","nsInfo","query","assign","find","forEach","key","legacyKey","pre32Limit","limit","$explain","explain","clonedQuery","clonedCommand","k","ok","cursor","id","cursorId","firstBatch"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/cmap/command_monitoring_events.ts"],"sourcesContent":["import { type Document, type ObjectId } from '../bson';\nimport {\n  COMMAND_FAILED,\n  COMMAND_STARTED,\n  COMMAND_SUCCEEDED,\n  LEGACY_HELLO_COMMAND,\n  LEGACY_HELLO_COMMAND_CAMEL_CASE\n} from '../constants';\nimport { calculateDurationInMs, deepCopy } from '../utils';\nimport {\n  DocumentSequence,\n  OpMsgRequest,\n  type OpQueryRequest,\n  type WriteProtocolMessageType\n} from './commands';\nimport type { Connection } from './connection';\n\n/**\n * An event indicating the start of a given command\n * @public\n * @category Event\n */\nexport class CommandStartedEvent {\n  commandObj?: Document;\n  requestId: number;\n  databaseName: string;\n  commandName: string;\n  command: Document;\n  address: string;\n  /** Driver generated connection id */\n  connectionId?: string | number;\n  /**\n   * Server generated connection id\n   * Distinct from the connection id and is returned by the hello or legacy hello response as \"connectionId\"\n   * from the server on 4.2+.\n   */\n  serverConnectionId: bigint | null;\n  serviceId?: ObjectId;\n  /** @internal */\n  name = COMMAND_STARTED;\n\n  /**\n   * Create a started event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   */\n  constructor(\n    connection: Connection,\n    command: WriteProtocolMessageType,\n    serverConnectionId: bigint | null\n  ) {\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n\n    // TODO: remove in major revision, this is not spec behavior\n    if (SENSITIVE_COMMANDS.has(commandName)) {\n      this.commandObj = {};\n      this.commandObj[commandName] = true;\n    }\n\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.databaseName = command.databaseName;\n    this.commandName = commandName;\n    this.command = maybeRedact(commandName, cmd, cmd);\n    this.serverConnectionId = serverConnectionId;\n  }\n\n  /* @internal */\n  get hasServiceId(): boolean {\n    return !!this.serviceId;\n  }\n}\n\n/**\n * An event indicating the success of a given command\n * @public\n * @category Event\n */\nexport class CommandSucceededEvent {\n  address: string;\n  /** Driver generated connection id */\n  connectionId?: string | number;\n  /**\n   * Server generated connection id\n   * Distinct from the connection id and is returned by the hello or legacy hello response as \"connectionId\" from the server on 4.2+.\n   */\n  serverConnectionId: bigint | null;\n  requestId: number;\n  duration: number;\n  commandName: string;\n  reply: unknown;\n  serviceId?: ObjectId;\n  /** @internal */\n  name = COMMAND_SUCCEEDED;\n\n  /**\n   * Create a succeeded event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   * @param reply - the reply for this command from the server\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(\n    connection: Connection,\n    command: WriteProtocolMessageType,\n    reply: Document | undefined,\n    started: number,\n    serverConnectionId: bigint | null\n  ) {\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.commandName = commandName;\n    this.duration = calculateDurationInMs(started);\n    this.reply = maybeRedact(commandName, cmd, extractReply(command, reply));\n    this.serverConnectionId = serverConnectionId;\n  }\n\n  /* @internal */\n  get hasServiceId(): boolean {\n    return !!this.serviceId;\n  }\n}\n\n/**\n * An event indicating the failure of a given command\n * @public\n * @category Event\n */\nexport class CommandFailedEvent {\n  address: string;\n  /** Driver generated connection id */\n  connectionId?: string | number;\n  /**\n   * Server generated connection id\n   * Distinct from the connection id and is returned by the hello or legacy hello response as \"connectionId\" from the server on 4.2+.\n   */\n  serverConnectionId: bigint | null;\n  requestId: number;\n  duration: number;\n  commandName: string;\n  failure: Error;\n  serviceId?: ObjectId;\n  /** @internal */\n  name = COMMAND_FAILED;\n\n  /**\n   * Create a failure event\n   *\n   * @internal\n   * @param pool - the pool that originated the command\n   * @param command - the command\n   * @param error - the generated error or a server error response\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n   */\n  constructor(\n    connection: Connection,\n    command: WriteProtocolMessageType,\n    error: Error | Document,\n    started: number,\n    serverConnectionId: bigint | null\n  ) {\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n\n    this.requestId = command.requestId;\n    this.commandName = commandName;\n    this.duration = calculateDurationInMs(started);\n    this.failure = maybeRedact(commandName, cmd, error) as Error;\n    this.serverConnectionId = serverConnectionId;\n  }\n\n  /* @internal */\n  get hasServiceId(): boolean {\n    return !!this.serviceId;\n  }\n}\n\n/**\n * Commands that we want to redact because of the sensitive nature of their contents\n * @internal\n */\nexport const SENSITIVE_COMMANDS = new Set([\n  'authenticate',\n  'saslStart',\n  'saslContinue',\n  'getnonce',\n  'createUser',\n  'updateUser',\n  'copydbgetnonce',\n  'copydbsaslstart',\n  'copydb'\n]);\n\nconst HELLO_COMMANDS = new Set(['hello', LEGACY_HELLO_COMMAND, LEGACY_HELLO_COMMAND_CAMEL_CASE]);\n\n// helper methods\nconst extractCommandName = (commandDoc: Document) => Object.keys(commandDoc)[0];\nconst namespace = (command: OpQueryRequest) => command.ns;\nconst collectionName = (command: OpQueryRequest) => command.ns.split('.')[1];\nconst maybeRedact = (commandName: string, commandDoc: Document, result: Error | Document) =>\n  SENSITIVE_COMMANDS.has(commandName) ||\n  (HELLO_COMMANDS.has(commandName) && commandDoc.speculativeAuthenticate)\n    ? {}\n    : result;\n\nconst LEGACY_FIND_QUERY_MAP: { [key: string]: string } = {\n  $query: 'filter',\n  $orderby: 'sort',\n  $hint: 'hint',\n  $comment: 'comment',\n  $maxScan: 'maxScan',\n  $max: 'max',\n  $min: 'min',\n  $returnKey: 'returnKey',\n  $showDiskLoc: 'showRecordId',\n  $maxTimeMS: 'maxTimeMS',\n  $snapshot: 'snapshot'\n};\n\nconst LEGACY_FIND_OPTIONS_MAP = {\n  numberToSkip: 'skip',\n  numberToReturn: 'batchSize',\n  returnFieldSelector: 'projection'\n} as const;\n\nconst OP_QUERY_KEYS = [\n  'tailable',\n  'oplogReplay',\n  'noCursorTimeout',\n  'awaitData',\n  'partial',\n  'exhaust'\n] as const;\n\n/** Extract the actual command from the query, possibly up-converting if it's a legacy format */\nfunction extractCommand(command: WriteProtocolMessageType): Document {\n  if (command instanceof OpMsgRequest) {\n    const cmd = deepCopy(command.command);\n    // For OP_MSG with payload type 1 we need to pull the documents\n    // array out of the document sequence for monitoring.\n    if (cmd.ops instanceof DocumentSequence) {\n      cmd.ops = cmd.ops.documents;\n    }\n    if (cmd.nsInfo instanceof DocumentSequence) {\n      cmd.nsInfo = cmd.nsInfo.documents;\n    }\n    return cmd;\n  }\n\n  if (command.query?.$query) {\n    let result: Document;\n    if (command.ns === 'admin.$cmd') {\n      // up-convert legacy command\n      result = Object.assign({}, command.query.$query);\n    } else {\n      // up-convert legacy find command\n      result = { find: collectionName(command) };\n      Object.keys(LEGACY_FIND_QUERY_MAP).forEach(key => {\n        if (command.query[key] != null) {\n          result[LEGACY_FIND_QUERY_MAP[key]] = deepCopy(command.query[key]);\n        }\n      });\n    }\n\n    Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(key => {\n      const legacyKey = key as keyof typeof LEGACY_FIND_OPTIONS_MAP;\n      if (command[legacyKey] != null) {\n        result[LEGACY_FIND_OPTIONS_MAP[legacyKey]] = deepCopy(command[legacyKey]);\n      }\n    });\n\n    OP_QUERY_KEYS.forEach(key => {\n      if (command[key]) {\n        result[key] = command[key];\n      }\n    });\n\n    if (command.pre32Limit != null) {\n      result.limit = command.pre32Limit;\n    }\n\n    if (command.query.$explain) {\n      return { explain: result };\n    }\n    return result;\n  }\n\n  const clonedQuery: Record<string, unknown> = {};\n  const clonedCommand: Record<string, unknown> = {};\n  if (command.query) {\n    for (const k in command.query) {\n      clonedQuery[k] = deepCopy(command.query[k]);\n    }\n    clonedCommand.query = clonedQuery;\n  }\n\n  for (const k in command) {\n    if (k === 'query') continue;\n    clonedCommand[k] = deepCopy((command as unknown as Record<string, unknown>)[k]);\n  }\n  return command.query ? clonedQuery : clonedCommand;\n}\n\nfunction extractReply(command: WriteProtocolMessageType, reply?: Document) {\n  if (!reply) {\n    return reply;\n  }\n\n  if (command instanceof OpMsgRequest) {\n    return deepCopy(reply.result ? reply.result : reply);\n  }\n\n  // is this a legacy find command?\n  if (command.query && command.query.$query != null) {\n    return {\n      ok: 1,\n      cursor: {\n        id: deepCopy(reply.cursorId),\n        ns: namespace(command),\n        firstBatch: deepCopy(reply.documents)\n      }\n    };\n  }\n\n  return deepCopy(reply.result ? reply.result : reply);\n}\n\nfunction extractConnectionDetails(connection: Connection) {\n  let connectionId;\n  if ('id' in connection) {\n    connectionId = connection.id;\n  }\n  return {\n    address: connection.address,\n    serviceId: connection.serviceId,\n    connectionId\n  };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}