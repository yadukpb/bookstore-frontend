{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindOperation = void 0;\nconst responses_1 = require(\"../cmap/wire_protocol/responses\");\nconst error_1 = require(\"../error\");\nconst read_concern_1 = require(\"../read_concern\");\nconst sort_1 = require(\"../sort\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass FindOperation extends command_1.CommandOperation {\n  constructor(ns) {\n    let filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(undefined, options);\n    this.options = {\n      ...options\n    };\n    delete this.options.writeConcern;\n    this.ns = ns;\n    if (typeof filter !== 'object' || Array.isArray(filter)) {\n      throw new error_1.MongoInvalidArgumentError('Query filter must be a plain object or ObjectId');\n    }\n    // special case passing in an ObjectId as a filter\n    this.filter = filter != null && filter._bsontype === 'ObjectId' ? {\n      _id: filter\n    } : filter;\n  }\n  get commandName() {\n    return 'find';\n  }\n  async execute(server, session) {\n    this.server = server;\n    const options = this.options;\n    let findCommand = makeFindCommand(this.ns, this.filter, options);\n    if (this.explain) {\n      findCommand = (0, utils_1.decorateWithExplain)(findCommand, this.explain);\n    }\n    return await server.command(this.ns, findCommand, {\n      ...this.options,\n      ...this.bsonOptions,\n      documentsReturnedIn: 'firstBatch',\n      session\n    }, this.explain ? responses_1.ExplainedCursorResponse : responses_1.CursorResponse);\n  }\n}\nexports.FindOperation = FindOperation;\nfunction makeFindCommand(ns, filter, options) {\n  const findCommand = {\n    find: ns.collection,\n    filter\n  };\n  if (options.sort) {\n    findCommand.sort = (0, sort_1.formatSort)(options.sort);\n  }\n  if (options.projection) {\n    let projection = options.projection;\n    if (projection && Array.isArray(projection)) {\n      projection = projection.length ? projection.reduce((result, field) => {\n        result[field] = 1;\n        return result;\n      }, {}) : {\n        _id: 1\n      };\n    }\n    findCommand.projection = projection;\n  }\n  if (options.hint) {\n    findCommand.hint = (0, utils_1.normalizeHintField)(options.hint);\n  }\n  if (typeof options.skip === 'number') {\n    findCommand.skip = options.skip;\n  }\n  if (typeof options.limit === 'number') {\n    if (options.limit < 0) {\n      findCommand.limit = -options.limit;\n      findCommand.singleBatch = true;\n    } else {\n      findCommand.limit = options.limit;\n    }\n  }\n  if (typeof options.batchSize === 'number') {\n    if (options.batchSize < 0) {\n      if (options.limit && options.limit !== 0 && Math.abs(options.batchSize) < Math.abs(options.limit)) {\n        findCommand.limit = -options.batchSize;\n      }\n      findCommand.singleBatch = true;\n    } else {\n      findCommand.batchSize = options.batchSize;\n    }\n  }\n  if (typeof options.singleBatch === 'boolean') {\n    findCommand.singleBatch = options.singleBatch;\n  }\n  // we check for undefined specifically here to allow falsy values\n  // eslint-disable-next-line no-restricted-syntax\n  if (options.comment !== undefined) {\n    findCommand.comment = options.comment;\n  }\n  if (typeof options.maxTimeMS === 'number') {\n    findCommand.maxTimeMS = options.maxTimeMS;\n  }\n  const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n  if (readConcern) {\n    findCommand.readConcern = readConcern.toJSON();\n  }\n  if (options.max) {\n    findCommand.max = options.max;\n  }\n  if (options.min) {\n    findCommand.min = options.min;\n  }\n  if (typeof options.returnKey === 'boolean') {\n    findCommand.returnKey = options.returnKey;\n  }\n  if (typeof options.showRecordId === 'boolean') {\n    findCommand.showRecordId = options.showRecordId;\n  }\n  if (typeof options.tailable === 'boolean') {\n    findCommand.tailable = options.tailable;\n  }\n  if (typeof options.oplogReplay === 'boolean') {\n    findCommand.oplogReplay = options.oplogReplay;\n  }\n  if (typeof options.timeout === 'boolean') {\n    findCommand.noCursorTimeout = !options.timeout;\n  } else if (typeof options.noCursorTimeout === 'boolean') {\n    findCommand.noCursorTimeout = options.noCursorTimeout;\n  }\n  if (typeof options.awaitData === 'boolean') {\n    findCommand.awaitData = options.awaitData;\n  }\n  if (typeof options.allowPartialResults === 'boolean') {\n    findCommand.allowPartialResults = options.allowPartialResults;\n  }\n  if (options.collation) {\n    findCommand.collation = options.collation;\n  }\n  if (typeof options.allowDiskUse === 'boolean') {\n    findCommand.allowDiskUse = options.allowDiskUse;\n  }\n  if (options.let) {\n    findCommand.let = options.let;\n  }\n  return findCommand;\n}\n(0, operation_1.defineAspects)(FindOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.CURSOR_CREATING]);","map":{"version":3,"mappings":"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","names":["FindOperation","command_1","constructor","ns","filter","options","undefined","writeConcern","Array","isArray","error_1","_bsontype","_id","commandName","execute","server","session","findCommand","makeFindCommand","explain","command","bsonOptions","documentsReturnedIn","responses_1","exports","find","collection","sort","projection","length","reduce","result","field","hint","skip","limit","singleBatch","batchSize","Math","abs","comment","maxTimeMS","readConcern","read_concern_1","fromOptions","toJSON","max","min","returnKey","showRecordId","tailable","oplogReplay","timeout","noCursorTimeout","awaitData","allowPartialResults","collation","allowDiskUse","let","operation_1","READ_OPERATION","RETRYABLE","EXPLAINABLE","CURSOR_CREATING"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/operations/find.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport { CursorResponse, ExplainedCursorResponse } from '../cmap/wire_protocol/responses';\nimport { MongoInvalidArgumentError } from '../error';\nimport { type ExplainOptions } from '../explain';\nimport { ReadConcern } from '../read_concern';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { formatSort, type Sort } from '../sort';\nimport { decorateWithExplain, type MongoDBNamespace, normalizeHintField } from '../utils';\nimport { type CollationOptions, CommandOperation, type CommandOperationOptions } from './command';\nimport { Aspect, defineAspects, type Hint } from './operation';\n\n/**\n * @public\n * @typeParam TSchema - Unused schema definition, deprecated usage, only specify `FindOptions` with no generic\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface FindOptions<TSchema extends Document = Document>\n  extends Omit<CommandOperationOptions, 'writeConcern' | 'explain'> {\n  /** Sets the limit of documents returned in the query. */\n  limit?: number;\n  /** Set to sort the documents coming back from the query. Array of indexes, `[['a', 1]]` etc. */\n  sort?: Sort;\n  /** The fields to return in the query. Object of fields to either include or exclude (one of, not both), `{'a':1, 'b': 1}` **or** `{'a': 0, 'b': 0}` */\n  projection?: Document;\n  /** Set to skip N documents ahead in your query (useful for pagination). */\n  skip?: number;\n  /** Tell the query to use specific indexes in the query. Object of indexes to use, `{'_id':1}` */\n  hint?: Hint;\n  /** Specify if the cursor can timeout. */\n  timeout?: boolean;\n  /** Specify if the cursor is tailable. */\n  tailable?: boolean;\n  /** Specify if the cursor is a tailable-await cursor. Requires `tailable` to be true */\n  awaitData?: boolean;\n  /** Set the batchSize for the getMoreCommand when iterating over the query results. */\n  batchSize?: number;\n  /** If true, returns only the index keys in the resulting documents. */\n  returnKey?: boolean;\n  /** The inclusive lower bound for a specific index */\n  min?: Document;\n  /** The exclusive upper bound for a specific index */\n  max?: Document;\n  /** Number of milliseconds to wait before aborting the query. */\n  maxTimeMS?: number;\n  /** The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. Requires `tailable` and `awaitData` to be true */\n  maxAwaitTimeMS?: number;\n  /** The server normally times out idle cursors after an inactivity period (10 minutes) to prevent excess memory use. Set this option to prevent that. */\n  noCursorTimeout?: boolean;\n  /** Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields). */\n  collation?: CollationOptions;\n  /** Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher) */\n  allowDiskUse?: boolean;\n  /** Determines whether to close the cursor after the first batch. Defaults to false. */\n  singleBatch?: boolean;\n  /** For queries against a sharded collection, allows the command (or subsequent getMore commands) to return partial results, rather than an error, if one or more queried shards are unavailable. */\n  allowPartialResults?: boolean;\n  /** Determines whether to return the record identifier for each document. If true, adds a field $recordId to the returned documents. */\n  showRecordId?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n  /**\n   * Option to enable an optimized code path for queries looking for a particular range of `ts` values in the oplog. Requires `tailable` to be true.\n   * @deprecated Starting from MongoDB 4.4 this flag is not needed and will be ignored.\n   */\n  oplogReplay?: boolean;\n\n  /**\n   * Specifies the verbosity mode for the explain output.\n   * @deprecated This API is deprecated in favor of `collection.find().explain()`.\n   */\n  explain?: ExplainOptions['explain'];\n}\n\n/** @internal */\nexport class FindOperation extends CommandOperation<CursorResponse> {\n  /**\n   * @remarks WriteConcern can still be present on the options because\n   * we inherit options from the client/db/collection.  The\n   * key must be present on the options in order to delete it.\n   * This allows typescript to delete the key but will\n   * not allow a writeConcern to be assigned as a property on options.\n   */\n  override options: FindOptions & { writeConcern?: never };\n  filter: Document;\n\n  constructor(ns: MongoDBNamespace, filter: Document = {}, options: FindOptions = {}) {\n    super(undefined, options);\n\n    this.options = { ...options };\n    delete this.options.writeConcern;\n    this.ns = ns;\n\n    if (typeof filter !== 'object' || Array.isArray(filter)) {\n      throw new MongoInvalidArgumentError('Query filter must be a plain object or ObjectId');\n    }\n\n    // special case passing in an ObjectId as a filter\n    this.filter = filter != null && filter._bsontype === 'ObjectId' ? { _id: filter } : filter;\n  }\n\n  override get commandName() {\n    return 'find' as const;\n  }\n\n  override async execute(\n    server: Server,\n    session: ClientSession | undefined\n  ): Promise<CursorResponse> {\n    this.server = server;\n\n    const options = this.options;\n\n    let findCommand = makeFindCommand(this.ns, this.filter, options);\n    if (this.explain) {\n      findCommand = decorateWithExplain(findCommand, this.explain);\n    }\n\n    return await server.command(\n      this.ns,\n      findCommand,\n      {\n        ...this.options,\n        ...this.bsonOptions,\n        documentsReturnedIn: 'firstBatch',\n        session\n      },\n      this.explain ? ExplainedCursorResponse : CursorResponse\n    );\n  }\n}\n\nfunction makeFindCommand(ns: MongoDBNamespace, filter: Document, options: FindOptions): Document {\n  const findCommand: Document = {\n    find: ns.collection,\n    filter\n  };\n\n  if (options.sort) {\n    findCommand.sort = formatSort(options.sort);\n  }\n\n  if (options.projection) {\n    let projection = options.projection;\n    if (projection && Array.isArray(projection)) {\n      projection = projection.length\n        ? projection.reduce((result, field) => {\n            result[field] = 1;\n            return result;\n          }, {})\n        : { _id: 1 };\n    }\n\n    findCommand.projection = projection;\n  }\n\n  if (options.hint) {\n    findCommand.hint = normalizeHintField(options.hint);\n  }\n\n  if (typeof options.skip === 'number') {\n    findCommand.skip = options.skip;\n  }\n\n  if (typeof options.limit === 'number') {\n    if (options.limit < 0) {\n      findCommand.limit = -options.limit;\n      findCommand.singleBatch = true;\n    } else {\n      findCommand.limit = options.limit;\n    }\n  }\n\n  if (typeof options.batchSize === 'number') {\n    if (options.batchSize < 0) {\n      if (\n        options.limit &&\n        options.limit !== 0 &&\n        Math.abs(options.batchSize) < Math.abs(options.limit)\n      ) {\n        findCommand.limit = -options.batchSize;\n      }\n\n      findCommand.singleBatch = true;\n    } else {\n      findCommand.batchSize = options.batchSize;\n    }\n  }\n\n  if (typeof options.singleBatch === 'boolean') {\n    findCommand.singleBatch = options.singleBatch;\n  }\n\n  // we check for undefined specifically here to allow falsy values\n  // eslint-disable-next-line no-restricted-syntax\n  if (options.comment !== undefined) {\n    findCommand.comment = options.comment;\n  }\n\n  if (typeof options.maxTimeMS === 'number') {\n    findCommand.maxTimeMS = options.maxTimeMS;\n  }\n\n  const readConcern = ReadConcern.fromOptions(options);\n  if (readConcern) {\n    findCommand.readConcern = readConcern.toJSON();\n  }\n\n  if (options.max) {\n    findCommand.max = options.max;\n  }\n\n  if (options.min) {\n    findCommand.min = options.min;\n  }\n\n  if (typeof options.returnKey === 'boolean') {\n    findCommand.returnKey = options.returnKey;\n  }\n\n  if (typeof options.showRecordId === 'boolean') {\n    findCommand.showRecordId = options.showRecordId;\n  }\n\n  if (typeof options.tailable === 'boolean') {\n    findCommand.tailable = options.tailable;\n  }\n\n  if (typeof options.oplogReplay === 'boolean') {\n    findCommand.oplogReplay = options.oplogReplay;\n  }\n\n  if (typeof options.timeout === 'boolean') {\n    findCommand.noCursorTimeout = !options.timeout;\n  } else if (typeof options.noCursorTimeout === 'boolean') {\n    findCommand.noCursorTimeout = options.noCursorTimeout;\n  }\n\n  if (typeof options.awaitData === 'boolean') {\n    findCommand.awaitData = options.awaitData;\n  }\n\n  if (typeof options.allowPartialResults === 'boolean') {\n    findCommand.allowPartialResults = options.allowPartialResults;\n  }\n\n  if (options.collation) {\n    findCommand.collation = options.collation;\n  }\n\n  if (typeof options.allowDiskUse === 'boolean') {\n    findCommand.allowDiskUse = options.allowDiskUse;\n  }\n\n  if (options.let) {\n    findCommand.let = options.let;\n  }\n\n  return findCommand;\n}\n\ndefineAspects(FindOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXPLAINABLE,\n  Aspect.CURSOR_CREATING\n]);\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}