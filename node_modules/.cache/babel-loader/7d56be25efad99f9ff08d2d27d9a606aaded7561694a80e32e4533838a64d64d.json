{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar BaggageImpl = /** @class */function () {\n  function BaggageImpl(entries) {\n    this._entries = entries ? new Map(entries) : new Map();\n  }\n  BaggageImpl.prototype.getEntry = function (key) {\n    var entry = this._entries.get(key);\n    if (!entry) {\n      return undefined;\n    }\n    return Object.assign({}, entry);\n  };\n  BaggageImpl.prototype.getAllEntries = function () {\n    return Array.from(this._entries.entries()).map(function (_a) {\n      var _b = __read(_a, 2),\n        k = _b[0],\n        v = _b[1];\n      return [k, v];\n    });\n  };\n  BaggageImpl.prototype.setEntry = function (key, entry) {\n    var newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.set(key, entry);\n    return newBaggage;\n  };\n  BaggageImpl.prototype.removeEntry = function (key) {\n    var newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.delete(key);\n    return newBaggage;\n  };\n  BaggageImpl.prototype.removeEntries = function () {\n    var e_1, _a;\n    var keys = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      keys[_i] = arguments[_i];\n    }\n    var newBaggage = new BaggageImpl(this._entries);\n    try {\n      for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n        var key = keys_1_1.value;\n        newBaggage._entries.delete(key);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return newBaggage;\n  };\n  BaggageImpl.prototype.clear = function () {\n    return new BaggageImpl();\n  };\n  return BaggageImpl;\n}();\nexport { BaggageImpl };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;EAGE,qBAAYA,OAAmC;IAC7C,IAAI,CAACC,QAAQ,GAAGD,OAAO,GAAG,IAAIE,GAAG,CAACF,OAAO,CAAC,GAAG,IAAIE,GAAG,EAAE;EACxD;EAEAC,8BAAQ,GAAR,UAASC,GAAW;IAClB,IAAMC,KAAK,GAAG,IAAI,CAACJ,QAAQ,CAACK,GAAG,CAACF,GAAG,CAAC;IACpC,IAAI,CAACC,KAAK,EAAE;MACV,OAAOE,SAAS;;IAGlB,OAAOC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAEJ,KAAK,CAAC;EACjC,CAAC;EAEDF,mCAAa,GAAb;IACE,OAAOO,KAAK,CAACC,IAAI,CAAC,IAAI,CAACV,QAAQ,CAACD,OAAO,EAAE,CAAC,CAACY,GAAG,CAAC,UAACC,EAAM;UAANC,kBAAM;QAALC,CAAC;QAAEC,CAAC;MAAM,QAACD,CAAC,EAAEC,CAAC,CAAC;IAAN,CAAM,CAAC;EACpE,CAAC;EAEDb,8BAAQ,GAAR,UAASC,GAAW,EAAEC,KAAmB;IACvC,IAAMY,UAAU,GAAG,IAAId,WAAW,CAAC,IAAI,CAACF,QAAQ,CAAC;IACjDgB,UAAU,CAAChB,QAAQ,CAACiB,GAAG,CAACd,GAAG,EAAEC,KAAK,CAAC;IACnC,OAAOY,UAAU;EACnB,CAAC;EAEDd,iCAAW,GAAX,UAAYC,GAAW;IACrB,IAAMa,UAAU,GAAG,IAAId,WAAW,CAAC,IAAI,CAACF,QAAQ,CAAC;IACjDgB,UAAU,CAAChB,QAAQ,CAACkB,MAAM,CAACf,GAAG,CAAC;IAC/B,OAAOa,UAAU;EACnB,CAAC;EAEDd,mCAAa,GAAb;;IAAc;SAAA,UAAiB,EAAjBiB,qBAAiB,EAAjBA,IAAiB;MAAjBC;;IACZ,IAAMJ,UAAU,GAAG,IAAId,WAAW,CAAC,IAAI,CAACF,QAAQ,CAAC;;MACjD,KAAkB,0BAAI,uEAAE;QAAnB,IAAMG,GAAG;QACZa,UAAU,CAAChB,QAAQ,CAACkB,MAAM,CAACf,GAAG,CAAC;;;;;;;;;;;;;IAEjC,OAAOa,UAAU;EACnB,CAAC;EAEDd,2BAAK,GAAL;IACE,OAAO,IAAIA,WAAW,EAAE;EAC1B,CAAC;EACH,kBAAC;AAAD,CAAC,EA3CD","names":["entries","_entries","Map","BaggageImpl","key","entry","get","undefined","Object","assign","Array","from","map","_a","_b","k","v","newBaggage","set","delete","_i","keys"],"sources":["/home/yadu/Music/Gifty/node_modules/@opentelemetry/api/src/baggage/internal/baggage-impl.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Baggage, BaggageEntry } from '../types';\n\nexport class BaggageImpl implements Baggage {\n  private _entries: Map<string, BaggageEntry>;\n\n  constructor(entries?: Map<string, BaggageEntry>) {\n    this._entries = entries ? new Map(entries) : new Map();\n  }\n\n  getEntry(key: string): BaggageEntry | undefined {\n    const entry = this._entries.get(key);\n    if (!entry) {\n      return undefined;\n    }\n\n    return Object.assign({}, entry);\n  }\n\n  getAllEntries(): [string, BaggageEntry][] {\n    return Array.from(this._entries.entries()).map(([k, v]) => [k, v]);\n  }\n\n  setEntry(key: string, entry: BaggageEntry): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.set(key, entry);\n    return newBaggage;\n  }\n\n  removeEntry(key: string): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    newBaggage._entries.delete(key);\n    return newBaggage;\n  }\n\n  removeEntries(...keys: string[]): BaggageImpl {\n    const newBaggage = new BaggageImpl(this._entries);\n    for (const key of keys) {\n      newBaggage._entries.delete(key);\n    }\n    return newBaggage;\n  }\n\n  clear(): BaggageImpl {\n    return new BaggageImpl();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}