{"ast":null,"code":"import * as farmhash from '../bin/bundler/farmhash_modern.js';\nfunction asBuffer(input) {\n  if (typeof input === 'string') {\n    return new TextEncoder().encode(input);\n  }\n  if (input instanceof Uint8Array) {\n    return input;\n  }\n  throw new Error('Expected input to be a string or Uint8Array');\n}\nfunction asUnsigned32BitNumber(input) {\n  if (input === input >>> 0) {\n    return input;\n  }\n  throw new Error(`Expected input to be a 32-bit unsigned integer, got ${input}`);\n}\nfunction asUnsigned64BitNumber(input) {\n  if (typeof input === 'bigint' && input >= 0 && input <= 18446744073709551615n) {\n    return input;\n  }\n  throw new Error(`Expected input to be a 64-bit unsigned integer, got ${input}`);\n}\n/**\n * Create a new farmhash based u32 for a string or an array of bytes.\n * Fingerprint value should be portable and stable across library versions\n * and platforms.\n */\nexport function fingerprint32(input) {\n  return farmhash.fingerprint32(asBuffer(input));\n}\n/**\n * Create a new farmhash based u64 for a string or an array of bytes.\n * Fingerprint value should be portable and stable across library versions\n * and platforms.\n */\nexport function fingerprint64(input) {\n  return farmhash.fingerprint64(asBuffer(input));\n}\n/**\n * Create a new farmhash based i64 for a string or an array of bytes.\n * Fingerprint value should be portable and stable across library versions\n * and platforms.\n *\n * This matches the format used by BigQuery's FARM_FINGERPRINT function.\n */\nexport function bigqueryFingerprint(input) {\n  return farmhash.bigquery_fingerprint(asBuffer(input));\n}\n/**\n * Create a new farmhash based u32 for an array of bytes. Hash value may\n * vary with library version.\n */\nexport function hash32(input) {\n  return farmhash.hash32(asBuffer(input));\n}\n/**\n * Create a new farmhash based u32 for an array of bytes with a given seed.\n * Hash value may vary with library version.\n */\nexport function hash32WithSeed(input, seed) {\n  return farmhash.hash32_with_seed(asBuffer(input), asUnsigned32BitNumber(seed));\n}\n/**\n * Create a new farmhash based u64 for an array of bytes. Hash value may\n * vary with library version.\n */\nexport function hash64(input) {\n  return farmhash.hash64(asBuffer(input));\n}\n/**\n * Create a new farmhash based u64 for an array of bytes with a given seed.\n * Hash value may vary with library version.\n */\nexport function hash64WithSeed(input, seed) {\n  return farmhash.hash64_with_seed(asBuffer(input), asUnsigned64BitNumber(seed));\n}","map":{"version":3,"names":["farmhash","asBuffer","input","TextEncoder","encode","Uint8Array","Error","asUnsigned32BitNumber","asUnsigned64BitNumber","fingerprint32","fingerprint64","bigqueryFingerprint","bigquery_fingerprint","hash32","hash32WithSeed","seed","hash32_with_seed","hash64","hash64WithSeed","hash64_with_seed"],"sources":["/home/yadu/Music/Gifty/node_modules/farmhash-modern/lib/browser.js"],"sourcesContent":["import * as farmhash from '../bin/bundler/farmhash_modern.js';\nfunction asBuffer(input) {\n    if (typeof input === 'string') {\n        return new TextEncoder().encode(input);\n    }\n    if (input instanceof Uint8Array) {\n        return input;\n    }\n    throw new Error('Expected input to be a string or Uint8Array');\n}\nfunction asUnsigned32BitNumber(input) {\n    if (input === input >>> 0) {\n        return input;\n    }\n    throw new Error(`Expected input to be a 32-bit unsigned integer, got ${input}`);\n}\nfunction asUnsigned64BitNumber(input) {\n    if (typeof input === 'bigint' &&\n        input >= 0 &&\n        input <= 18446744073709551615n) {\n        return input;\n    }\n    throw new Error(`Expected input to be a 64-bit unsigned integer, got ${input}`);\n}\n/**\n * Create a new farmhash based u32 for a string or an array of bytes.\n * Fingerprint value should be portable and stable across library versions\n * and platforms.\n */\nexport function fingerprint32(input) {\n    return farmhash.fingerprint32(asBuffer(input));\n}\n/**\n * Create a new farmhash based u64 for a string or an array of bytes.\n * Fingerprint value should be portable and stable across library versions\n * and platforms.\n */\nexport function fingerprint64(input) {\n    return farmhash.fingerprint64(asBuffer(input));\n}\n/**\n * Create a new farmhash based i64 for a string or an array of bytes.\n * Fingerprint value should be portable and stable across library versions\n * and platforms.\n *\n * This matches the format used by BigQuery's FARM_FINGERPRINT function.\n */\nexport function bigqueryFingerprint(input) {\n    return farmhash.bigquery_fingerprint(asBuffer(input));\n}\n/**\n * Create a new farmhash based u32 for an array of bytes. Hash value may\n * vary with library version.\n */\nexport function hash32(input) {\n    return farmhash.hash32(asBuffer(input));\n}\n/**\n * Create a new farmhash based u32 for an array of bytes with a given seed.\n * Hash value may vary with library version.\n */\nexport function hash32WithSeed(input, seed) {\n    return farmhash.hash32_with_seed(asBuffer(input), asUnsigned32BitNumber(seed));\n}\n/**\n * Create a new farmhash based u64 for an array of bytes. Hash value may\n * vary with library version.\n */\nexport function hash64(input) {\n    return farmhash.hash64(asBuffer(input));\n}\n/**\n * Create a new farmhash based u64 for an array of bytes with a given seed.\n * Hash value may vary with library version.\n */\nexport function hash64WithSeed(input, seed) {\n    return farmhash.hash64_with_seed(asBuffer(input), asUnsigned64BitNumber(seed));\n}\n"],"mappings":"AAAA,OAAO,KAAKA,QAAQ,MAAM,mCAAmC;AAC7D,SAASC,QAAQ,CAACC,KAAK,EAAE;EACrB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC3B,OAAO,IAAIC,WAAW,EAAE,CAACC,MAAM,CAACF,KAAK,CAAC;EAC1C;EACA,IAAIA,KAAK,YAAYG,UAAU,EAAE;IAC7B,OAAOH,KAAK;EAChB;EACA,MAAM,IAAII,KAAK,CAAC,6CAA6C,CAAC;AAClE;AACA,SAASC,qBAAqB,CAACL,KAAK,EAAE;EAClC,IAAIA,KAAK,KAAKA,KAAK,KAAK,CAAC,EAAE;IACvB,OAAOA,KAAK;EAChB;EACA,MAAM,IAAII,KAAK,CAAE,uDAAsDJ,KAAM,EAAC,CAAC;AACnF;AACA,SAASM,qBAAqB,CAACN,KAAK,EAAE;EAClC,IAAI,OAAOA,KAAK,KAAK,QAAQ,IACzBA,KAAK,IAAI,CAAC,IACVA,KAAK,IAAI,qBAAqB,EAAE;IAChC,OAAOA,KAAK;EAChB;EACA,MAAM,IAAII,KAAK,CAAE,uDAAsDJ,KAAM,EAAC,CAAC;AACnF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,aAAa,CAACP,KAAK,EAAE;EACjC,OAAOF,QAAQ,CAACS,aAAa,CAACR,QAAQ,CAACC,KAAK,CAAC,CAAC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,aAAa,CAACR,KAAK,EAAE;EACjC,OAAOF,QAAQ,CAACU,aAAa,CAACT,QAAQ,CAACC,KAAK,CAAC,CAAC;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,mBAAmB,CAACT,KAAK,EAAE;EACvC,OAAOF,QAAQ,CAACY,oBAAoB,CAACX,QAAQ,CAACC,KAAK,CAAC,CAAC;AACzD;AACA;AACA;AACA;AACA;AACA,OAAO,SAASW,MAAM,CAACX,KAAK,EAAE;EAC1B,OAAOF,QAAQ,CAACa,MAAM,CAACZ,QAAQ,CAACC,KAAK,CAAC,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA,OAAO,SAASY,cAAc,CAACZ,KAAK,EAAEa,IAAI,EAAE;EACxC,OAAOf,QAAQ,CAACgB,gBAAgB,CAACf,QAAQ,CAACC,KAAK,CAAC,EAAEK,qBAAqB,CAACQ,IAAI,CAAC,CAAC;AAClF;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,MAAM,CAACf,KAAK,EAAE;EAC1B,OAAOF,QAAQ,CAACiB,MAAM,CAAChB,QAAQ,CAACC,KAAK,CAAC,CAAC;AAC3C;AACA;AACA;AACA;AACA;AACA,OAAO,SAASgB,cAAc,CAAChB,KAAK,EAAEa,IAAI,EAAE;EACxC,OAAOf,QAAQ,CAACmB,gBAAgB,CAAClB,QAAQ,CAACC,KAAK,CAAC,EAAEM,qBAAqB,CAACO,IAAI,CAAC,CAAC;AAClF"},"metadata":{},"sourceType":"module","externalDependencies":[]}