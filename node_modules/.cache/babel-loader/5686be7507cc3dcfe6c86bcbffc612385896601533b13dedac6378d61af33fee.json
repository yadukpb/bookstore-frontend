{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagLogLevel } from '../types';\nexport function createLogLevelDiagLogger(maxLevel, logger) {\n  if (maxLevel < DiagLogLevel.NONE) {\n    maxLevel = DiagLogLevel.NONE;\n  } else if (maxLevel > DiagLogLevel.ALL) {\n    maxLevel = DiagLogLevel.ALL;\n  }\n  // In case the logger is null or undefined\n  logger = logger || {};\n  function _filterFunc(funcName, theLevel) {\n    var theFunc = logger[funcName];\n    if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n      return theFunc.bind(logger);\n    }\n    return function () {};\n  }\n  return {\n    error: _filterFunc('error', DiagLogLevel.ERROR),\n    warn: _filterFunc('warn', DiagLogLevel.WARN),\n    info: _filterFunc('info', DiagLogLevel.INFO),\n    debug: _filterFunc('debug', DiagLogLevel.DEBUG),\n    verbose: _filterFunc('verbose', DiagLogLevel.VERBOSE)\n  };\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAAsCA,YAAY,QAAQ,UAAU;AAEpE,OAAM,SAAUC,wBAAwB,CACtCC,QAAsB,EACtBC,MAAkB;EAElB,IAAID,QAAQ,GAAGF,YAAY,CAACI,IAAI,EAAE;IAChCF,QAAQ,GAAGF,YAAY,CAACI,IAAI;GAC7B,MAAM,IAAIF,QAAQ,GAAGF,YAAY,CAACK,GAAG,EAAE;IACtCH,QAAQ,GAAGF,YAAY,CAACK,GAAG;;EAG7B;EACAF,MAAM,GAAGA,MAAM,IAAI,EAAE;EAErB,SAASG,WAAW,CAClBC,QAA0B,EAC1BC,QAAsB;IAEtB,IAAMC,OAAO,GAAGN,MAAM,CAACI,QAAQ,CAAC;IAEhC,IAAI,OAAOE,OAAO,KAAK,UAAU,IAAIP,QAAQ,IAAIM,QAAQ,EAAE;MACzD,OAAOC,OAAO,CAACC,IAAI,CAACP,MAAM,CAAC;;IAE7B,OAAO,aAAa,CAAC;EACvB;EAEA,OAAO;IACLQ,KAAK,EAAEL,WAAW,CAAC,OAAO,EAAEN,YAAY,CAACY,KAAK,CAAC;IAC/CC,IAAI,EAAEP,WAAW,CAAC,MAAM,EAAEN,YAAY,CAACc,IAAI,CAAC;IAC5CC,IAAI,EAAET,WAAW,CAAC,MAAM,EAAEN,YAAY,CAACgB,IAAI,CAAC;IAC5CC,KAAK,EAAEX,WAAW,CAAC,OAAO,EAAEN,YAAY,CAACkB,KAAK,CAAC;IAC/CC,OAAO,EAAEb,WAAW,CAAC,SAAS,EAAEN,YAAY,CAACoB,OAAO;GACrD;AACH","names":["DiagLogLevel","createLogLevelDiagLogger","maxLevel","logger","NONE","ALL","_filterFunc","funcName","theLevel","theFunc","bind","error","ERROR","warn","WARN","info","INFO","debug","DEBUG","verbose","VERBOSE"],"sources":["/home/yadu/Music/Gifty/node_modules/@opentelemetry/api/src/diag/internal/logLevelLogger.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogFunction, DiagLogger, DiagLogLevel } from '../types';\n\nexport function createLogLevelDiagLogger(\n  maxLevel: DiagLogLevel,\n  logger: DiagLogger\n): DiagLogger {\n  if (maxLevel < DiagLogLevel.NONE) {\n    maxLevel = DiagLogLevel.NONE;\n  } else if (maxLevel > DiagLogLevel.ALL) {\n    maxLevel = DiagLogLevel.ALL;\n  }\n\n  // In case the logger is null or undefined\n  logger = logger || {};\n\n  function _filterFunc(\n    funcName: keyof DiagLogger,\n    theLevel: DiagLogLevel\n  ): DiagLogFunction {\n    const theFunc = logger[funcName];\n\n    if (typeof theFunc === 'function' && maxLevel >= theLevel) {\n      return theFunc.bind(logger);\n    }\n    return function () {};\n  }\n\n  return {\n    error: _filterFunc('error', DiagLogLevel.ERROR),\n    warn: _filterFunc('warn', DiagLogLevel.WARN),\n    info: _filterFunc('info', DiagLogLevel.INFO),\n    debug: _filterFunc('debug', DiagLogLevel.DEBUG),\n    verbose: _filterFunc('verbose', DiagLogLevel.VERBOSE),\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}