{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _globalThis } from '../platform';\nimport { VERSION } from '../version';\nimport { isCompatible } from './semver';\nvar major = VERSION.split('.')[0];\nvar GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\"opentelemetry.js.api.\" + major);\nvar _global = _globalThis;\nexport function registerGlobal(type, instance, diag, allowOverride) {\n  var _a;\n  if (allowOverride === void 0) {\n    allowOverride = false;\n  }\n  var api = _global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {\n    version: VERSION\n  };\n  if (!allowOverride && api[type]) {\n    // already registered an API of this type\n    var err = new Error(\"@opentelemetry/api: Attempted duplicate registration of API: \" + type);\n    diag.error(err.stack || err.message);\n    return false;\n  }\n  if (api.version !== VERSION) {\n    // All registered APIs must be of the same version exactly\n    var err = new Error(\"@opentelemetry/api: Registration of version v\" + api.version + \" for \" + type + \" does not match previously registered API v\" + VERSION);\n    diag.error(err.stack || err.message);\n    return false;\n  }\n  api[type] = instance;\n  diag.debug(\"@opentelemetry/api: Registered a global for \" + type + \" v\" + VERSION + \".\");\n  return true;\n}\nexport function getGlobal(type) {\n  var _a, _b;\n  var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;\n  if (!globalVersion || !isCompatible(globalVersion)) {\n    return;\n  }\n  return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];\n}\nexport function unregisterGlobal(type, diag) {\n  diag.debug(\"@opentelemetry/api: Unregistering a global for \" + type + \" v\" + VERSION + \".\");\n  var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n  if (api) {\n    delete api[type];\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAmBA,SAASA,WAAW,QAAQ,aAAa;AAGzC,SAASC,OAAO,QAAQ,YAAY;AACpC,SAASC,YAAY,QAAQ,UAAU;AAEvC,IAAMC,KAAK,GAAGF,OAAO,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACnC,IAAMC,4BAA4B,GAAGC,MAAM,CAACC,GAAG,CAC7C,0BAAwBJ,KAAO,CAChC;AAED,IAAMK,OAAO,GAAGR,WAAyB;AAEzC,OAAM,SAAUS,cAAc,CAC5BC,IAAU,EACVC,QAA6B,EAC7BC,IAAgB,EAChBC,aAAqB;;EAArB;IAAAA,qBAAqB;EAAA;EAErB,IAAMC,GAAG,GAAIN,OAAO,CAACH,4BAA4B,CAAC,GAAG,aAAO,CAC1DA,4BAA4B,CAC7B,mCAAI;IACHU,OAAO,EAAEd;GACT;EAEF,IAAI,CAACY,aAAa,IAAIC,GAAG,CAACJ,IAAI,CAAC,EAAE;IAC/B;IACA,IAAMM,GAAG,GAAG,IAAIC,KAAK,CACnB,kEAAgEP,IAAM,CACvE;IACDE,IAAI,CAACM,KAAK,CAACF,GAAG,CAACG,KAAK,IAAIH,GAAG,CAACI,OAAO,CAAC;IACpC,OAAO,KAAK;;EAGd,IAAIN,GAAG,CAACC,OAAO,KAAKd,OAAO,EAAE;IAC3B;IACA,IAAMe,GAAG,GAAG,IAAIC,KAAK,CACnB,kDAAgDH,GAAG,CAACC,OAAO,aAAQL,IAAI,mDAA8CT,OAAS,CAC/H;IACDW,IAAI,CAACM,KAAK,CAACF,GAAG,CAACG,KAAK,IAAIH,GAAG,CAACI,OAAO,CAAC;IACpC,OAAO,KAAK;;EAGdN,GAAG,CAACJ,IAAI,CAAC,GAAGC,QAAQ;EACpBC,IAAI,CAACS,KAAK,CACR,iDAA+CX,IAAI,UAAKT,OAAO,MAAG,CACnE;EAED,OAAO,IAAI;AACb;AAEA,OAAM,SAAUqB,SAAS,CACvBZ,IAAU;;EAEV,IAAMa,aAAa,GAAG,aAAO,CAAClB,4BAA4B,CAAC,0CAAEU,OAAO;EACpE,IAAI,CAACQ,aAAa,IAAI,CAACrB,YAAY,CAACqB,aAAa,CAAC,EAAE;IAClD;;EAEF,OAAO,aAAO,CAAClB,4BAA4B,CAAC,0CAAGK,IAAI,CAAC;AACtD;AAEA,OAAM,SAAUc,gBAAgB,CAACd,IAAyB,EAAEE,IAAgB;EAC1EA,IAAI,CAACS,KAAK,CACR,oDAAkDX,IAAI,UAAKT,OAAO,MAAG,CACtE;EACD,IAAMa,GAAG,GAAGN,OAAO,CAACH,4BAA4B,CAAC;EAEjD,IAAIS,GAAG,EAAE;IACP,OAAOA,GAAG,CAACJ,IAAI,CAAC;;AAEpB","names":["_globalThis","VERSION","isCompatible","major","split","GLOBAL_OPENTELEMETRY_API_KEY","Symbol","for","_global","registerGlobal","type","instance","diag","allowOverride","api","version","err","Error","error","stack","message","debug","getGlobal","globalVersion","unregisterGlobal"],"sources":["/home/yadu/Music/Gifty/node_modules/@opentelemetry/api/src/internal/global-utils.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MeterProvider } from '../metrics/MeterProvider';\nimport { ContextManager } from '../context/types';\nimport { DiagLogger } from '../diag/types';\nimport { _globalThis } from '../platform';\nimport { TextMapPropagator } from '../propagation/TextMapPropagator';\nimport type { TracerProvider } from '../trace/tracer_provider';\nimport { VERSION } from '../version';\nimport { isCompatible } from './semver';\n\nconst major = VERSION.split('.')[0];\nconst GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\n  `opentelemetry.js.api.${major}`\n);\n\nconst _global = _globalThis as OTelGlobal;\n\nexport function registerGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type,\n  instance: OTelGlobalAPI[Type],\n  diag: DiagLogger,\n  allowOverride = false\n): boolean {\n  const api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = _global[\n    GLOBAL_OPENTELEMETRY_API_KEY\n  ] ?? {\n    version: VERSION,\n  });\n\n  if (!allowOverride && api[type]) {\n    // already registered an API of this type\n    const err = new Error(\n      `@opentelemetry/api: Attempted duplicate registration of API: ${type}`\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  if (api.version !== VERSION) {\n    // All registered APIs must be of the same version exactly\n    const err = new Error(\n      `@opentelemetry/api: Registration of version v${api.version} for ${type} does not match previously registered API v${VERSION}`\n    );\n    diag.error(err.stack || err.message);\n    return false;\n  }\n\n  api[type] = instance;\n  diag.debug(\n    `@opentelemetry/api: Registered a global for ${type} v${VERSION}.`\n  );\n\n  return true;\n}\n\nexport function getGlobal<Type extends keyof OTelGlobalAPI>(\n  type: Type\n): OTelGlobalAPI[Type] | undefined {\n  const globalVersion = _global[GLOBAL_OPENTELEMETRY_API_KEY]?.version;\n  if (!globalVersion || !isCompatible(globalVersion)) {\n    return;\n  }\n  return _global[GLOBAL_OPENTELEMETRY_API_KEY]?.[type];\n}\n\nexport function unregisterGlobal(type: keyof OTelGlobalAPI, diag: DiagLogger) {\n  diag.debug(\n    `@opentelemetry/api: Unregistering a global for ${type} v${VERSION}.`\n  );\n  const api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n\n  if (api) {\n    delete api[type];\n  }\n}\n\ntype OTelGlobal = {\n  [GLOBAL_OPENTELEMETRY_API_KEY]?: OTelGlobalAPI;\n};\n\ntype OTelGlobalAPI = {\n  version: string;\n\n  diag?: DiagLogger;\n  trace?: TracerProvider;\n  context?: ContextManager;\n  metrics?: MeterProvider;\n  propagation?: TextMapPropagator;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}