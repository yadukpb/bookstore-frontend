{"ast":null,"code":"/*! firebase-admin v12.7.0 */\n\"use strict\";\n\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tenant = void 0;\nconst validator = require(\"../utils/validator\");\nconst deep_copy_1 = require(\"../utils/deep-copy\");\nconst error_1 = require(\"../utils/error\");\nconst auth_config_1 = require(\"./auth-config\");\n/**\n * Represents a tenant configuration.\n *\n * Multi-tenancy support requires Google Cloud's Identity Platform\n * (GCIP). To learn more about GCIP, including pricing and features,\n * see the {@link https://cloud.google.com/identity-platform | GCIP documentation}.\n *\n * Before multi-tenancy can be used on a Google Cloud Identity Platform project,\n * tenants must be allowed on that project via the Cloud Console UI.\n *\n * A tenant configuration provides information such as the display name, tenant\n * identifier and email authentication configuration.\n * For OIDC/SAML provider configuration management, `TenantAwareAuth` instances should\n * be used instead of a `Tenant` to retrieve the list of configured IdPs on a tenant.\n * When configuring these providers, note that tenants will inherit\n * whitelisted domains and authenticated redirect URIs of their parent project.\n *\n * All other settings of a tenant will also be inherited. These will need to be managed\n * from the Cloud Console UI.\n */\nclass Tenant {\n  /**\n   * Builds the corresponding server request for a TenantOptions object.\n   *\n   * @param tenantOptions - The properties to convert to a server request.\n   * @param createRequest - Whether this is a create request.\n   * @returns The equivalent server request.\n   *\n   * @internal\n   */\n  static buildServerRequest(tenantOptions, createRequest) {\n    Tenant.validate(tenantOptions, createRequest);\n    let request = {};\n    if (typeof tenantOptions.emailSignInConfig !== 'undefined') {\n      request = auth_config_1.EmailSignInConfig.buildServerRequest(tenantOptions.emailSignInConfig);\n    }\n    if (typeof tenantOptions.displayName !== 'undefined') {\n      request.displayName = tenantOptions.displayName;\n    }\n    if (typeof tenantOptions.anonymousSignInEnabled !== 'undefined') {\n      request.enableAnonymousUser = tenantOptions.anonymousSignInEnabled;\n    }\n    if (typeof tenantOptions.multiFactorConfig !== 'undefined') {\n      request.mfaConfig = auth_config_1.MultiFactorAuthConfig.buildServerRequest(tenantOptions.multiFactorConfig);\n    }\n    if (typeof tenantOptions.testPhoneNumbers !== 'undefined') {\n      // null will clear existing test phone numbers. Translate to empty object.\n      request.testPhoneNumbers = tenantOptions.testPhoneNumbers ?? {};\n    }\n    if (typeof tenantOptions.smsRegionConfig !== 'undefined') {\n      request.smsRegionConfig = tenantOptions.smsRegionConfig;\n    }\n    if (typeof tenantOptions.recaptchaConfig !== 'undefined') {\n      request.recaptchaConfig = auth_config_1.RecaptchaAuthConfig.buildServerRequest(tenantOptions.recaptchaConfig);\n    }\n    if (typeof tenantOptions.passwordPolicyConfig !== 'undefined') {\n      request.passwordPolicyConfig = auth_config_1.PasswordPolicyAuthConfig.buildServerRequest(tenantOptions.passwordPolicyConfig);\n    }\n    if (typeof tenantOptions.emailPrivacyConfig !== 'undefined') {\n      request.emailPrivacyConfig = tenantOptions.emailPrivacyConfig;\n    }\n    return request;\n  }\n  /**\n   * Returns the tenant ID corresponding to the resource name if available.\n   *\n   * @param resourceName - The server side resource name\n   * @returns The tenant ID corresponding to the resource, null otherwise.\n   *\n   * @internal\n   */\n  static getTenantIdFromResourceName(resourceName) {\n    // name is of form projects/project1/tenants/tenant1\n    const matchTenantRes = resourceName.match(/\\/tenants\\/(.*)$/);\n    if (!matchTenantRes || matchTenantRes.length < 2) {\n      return null;\n    }\n    return matchTenantRes[1];\n  }\n  /**\n   * Validates a tenant options object. Throws an error on failure.\n   *\n   * @param request - The tenant options object to validate.\n   * @param createRequest - Whether this is a create request.\n   */\n  static validate(request, createRequest) {\n    const validKeys = {\n      displayName: true,\n      emailSignInConfig: true,\n      anonymousSignInEnabled: true,\n      multiFactorConfig: true,\n      testPhoneNumbers: true,\n      smsRegionConfig: true,\n      recaptchaConfig: true,\n      passwordPolicyConfig: true,\n      emailPrivacyConfig: true\n    };\n    const label = createRequest ? 'CreateTenantRequest' : 'UpdateTenantRequest';\n    if (!validator.isNonNullObject(request)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${label}\" must be a valid non-null object.`);\n    }\n    // Check for unsupported top level attributes.\n    for (const key in request) {\n      if (!(key in validKeys)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${key}\" is not a valid ${label} parameter.`);\n      }\n    }\n    // Validate displayName type if provided.\n    if (typeof request.displayName !== 'undefined' && !validator.isNonEmptyString(request.displayName)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${label}.displayName\" must be a valid non-empty string.`);\n    }\n    // Validate emailSignInConfig type if provided.\n    if (typeof request.emailSignInConfig !== 'undefined') {\n      // This will throw an error if invalid.\n      auth_config_1.EmailSignInConfig.buildServerRequest(request.emailSignInConfig);\n    }\n    // Validate test phone numbers if provided.\n    if (typeof request.testPhoneNumbers !== 'undefined' && request.testPhoneNumbers !== null) {\n      (0, auth_config_1.validateTestPhoneNumbers)(request.testPhoneNumbers);\n    } else if (request.testPhoneNumbers === null && createRequest) {\n      // null allowed only for update operations.\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${label}.testPhoneNumbers\" must be a non-null object.`);\n    }\n    // Validate multiFactorConfig type if provided.\n    if (typeof request.multiFactorConfig !== 'undefined') {\n      // This will throw an error if invalid.\n      auth_config_1.MultiFactorAuthConfig.buildServerRequest(request.multiFactorConfig);\n    }\n    // Validate SMS Regions Config if provided.\n    if (typeof request.smsRegionConfig !== 'undefined') {\n      auth_config_1.SmsRegionsAuthConfig.validate(request.smsRegionConfig);\n    }\n    // Validate reCAPTCHAConfig type if provided.\n    if (typeof request.recaptchaConfig !== 'undefined') {\n      auth_config_1.RecaptchaAuthConfig.buildServerRequest(request.recaptchaConfig);\n    }\n    // Validate passwordPolicyConfig type if provided.\n    if (typeof request.passwordPolicyConfig !== 'undefined') {\n      // This will throw an error if invalid.\n      auth_config_1.PasswordPolicyAuthConfig.buildServerRequest(request.passwordPolicyConfig);\n    }\n    // Validate Email Privacy Config if provided.\n    if (typeof request.emailPrivacyConfig !== 'undefined') {\n      auth_config_1.EmailPrivacyAuthConfig.validate(request.emailPrivacyConfig);\n    }\n  }\n  /**\n   * The Tenant object constructor.\n   *\n   * @param response - The server side response used to initialize the Tenant object.\n   * @constructor\n   * @internal\n   */\n  constructor(response) {\n    const tenantId = Tenant.getTenantIdFromResourceName(response.name);\n    if (!tenantId) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid tenant response');\n    }\n    this.tenantId = tenantId;\n    this.displayName = response.displayName;\n    try {\n      this.emailSignInConfig_ = new auth_config_1.EmailSignInConfig(response);\n    } catch (e) {\n      // If allowPasswordSignup is undefined, it is disabled by default.\n      this.emailSignInConfig_ = new auth_config_1.EmailSignInConfig({\n        allowPasswordSignup: false\n      });\n    }\n    this.anonymousSignInEnabled = !!response.enableAnonymousUser;\n    if (typeof response.mfaConfig !== 'undefined') {\n      this.multiFactorConfig_ = new auth_config_1.MultiFactorAuthConfig(response.mfaConfig);\n    }\n    if (typeof response.testPhoneNumbers !== 'undefined') {\n      this.testPhoneNumbers = (0, deep_copy_1.deepCopy)(response.testPhoneNumbers || {});\n    }\n    if (typeof response.smsRegionConfig !== 'undefined') {\n      this.smsRegionConfig = (0, deep_copy_1.deepCopy)(response.smsRegionConfig);\n    }\n    if (typeof response.recaptchaConfig !== 'undefined') {\n      this.recaptchaConfig_ = new auth_config_1.RecaptchaAuthConfig(response.recaptchaConfig);\n    }\n    if (typeof response.passwordPolicyConfig !== 'undefined') {\n      this.passwordPolicyConfig = new auth_config_1.PasswordPolicyAuthConfig(response.passwordPolicyConfig);\n    }\n    if (typeof response.emailPrivacyConfig !== 'undefined') {\n      this.emailPrivacyConfig = (0, deep_copy_1.deepCopy)(response.emailPrivacyConfig);\n    }\n  }\n  /**\n   * The email sign in provider configuration.\n   */\n  get emailSignInConfig() {\n    return this.emailSignInConfig_;\n  }\n  /**\n   * The multi-factor auth configuration on the current tenant.\n   */\n  get multiFactorConfig() {\n    return this.multiFactorConfig_;\n  }\n  /**\n   * The recaptcha config auth configuration of the current tenant.\n   */\n  get recaptchaConfig() {\n    return this.recaptchaConfig_;\n  }\n  /**\n   * Returns a JSON-serializable representation of this object.\n   *\n   * @returns A JSON-serializable representation of this object.\n   */\n  toJSON() {\n    const json = {\n      tenantId: this.tenantId,\n      displayName: this.displayName,\n      emailSignInConfig: this.emailSignInConfig_?.toJSON(),\n      multiFactorConfig: this.multiFactorConfig_?.toJSON(),\n      anonymousSignInEnabled: this.anonymousSignInEnabled,\n      testPhoneNumbers: this.testPhoneNumbers,\n      smsRegionConfig: (0, deep_copy_1.deepCopy)(this.smsRegionConfig),\n      recaptchaConfig: (0, deep_copy_1.deepCopy)(this.recaptchaConfig),\n      passwordPolicyConfig: (0, deep_copy_1.deepCopy)(this.passwordPolicyConfig),\n      emailPrivacyConfig: (0, deep_copy_1.deepCopy)(this.emailPrivacyConfig)\n    };\n    if (typeof json.multiFactorConfig === 'undefined') {\n      delete json.multiFactorConfig;\n    }\n    if (typeof json.testPhoneNumbers === 'undefined') {\n      delete json.testPhoneNumbers;\n    }\n    if (typeof json.smsRegionConfig === 'undefined') {\n      delete json.smsRegionConfig;\n    }\n    if (typeof json.recaptchaConfig === 'undefined') {\n      delete json.recaptchaConfig;\n    }\n    if (typeof json.passwordPolicyConfig === 'undefined') {\n      delete json.passwordPolicyConfig;\n    }\n    if (typeof json.emailPrivacyConfig === 'undefined') {\n      delete json.emailPrivacyConfig;\n    }\n    return json;\n  }\n}\nexports.Tenant = Tenant;","map":{"version":3,"names":["Object","defineProperty","exports","value","Tenant","validator","require","deep_copy_1","error_1","auth_config_1","buildServerRequest","tenantOptions","createRequest","validate","request","emailSignInConfig","EmailSignInConfig","displayName","anonymousSignInEnabled","enableAnonymousUser","multiFactorConfig","mfaConfig","MultiFactorAuthConfig","testPhoneNumbers","smsRegionConfig","recaptchaConfig","RecaptchaAuthConfig","passwordPolicyConfig","PasswordPolicyAuthConfig","emailPrivacyConfig","getTenantIdFromResourceName","resourceName","matchTenantRes","match","length","validKeys","label","isNonNullObject","FirebaseAuthError","AuthClientErrorCode","INVALID_ARGUMENT","key","isNonEmptyString","validateTestPhoneNumbers","SmsRegionsAuthConfig","EmailPrivacyAuthConfig","constructor","response","tenantId","name","INTERNAL_ERROR","emailSignInConfig_","e","allowPasswordSignup","multiFactorConfig_","deepCopy","recaptchaConfig_","toJSON","json"],"sources":["/home/yadu/Music/Gifty/node_modules/firebase-admin/lib/auth/tenant.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tenant = void 0;\nconst validator = require(\"../utils/validator\");\nconst deep_copy_1 = require(\"../utils/deep-copy\");\nconst error_1 = require(\"../utils/error\");\nconst auth_config_1 = require(\"./auth-config\");\n/**\n * Represents a tenant configuration.\n *\n * Multi-tenancy support requires Google Cloud's Identity Platform\n * (GCIP). To learn more about GCIP, including pricing and features,\n * see the {@link https://cloud.google.com/identity-platform | GCIP documentation}.\n *\n * Before multi-tenancy can be used on a Google Cloud Identity Platform project,\n * tenants must be allowed on that project via the Cloud Console UI.\n *\n * A tenant configuration provides information such as the display name, tenant\n * identifier and email authentication configuration.\n * For OIDC/SAML provider configuration management, `TenantAwareAuth` instances should\n * be used instead of a `Tenant` to retrieve the list of configured IdPs on a tenant.\n * When configuring these providers, note that tenants will inherit\n * whitelisted domains and authenticated redirect URIs of their parent project.\n *\n * All other settings of a tenant will also be inherited. These will need to be managed\n * from the Cloud Console UI.\n */\nclass Tenant {\n    /**\n     * Builds the corresponding server request for a TenantOptions object.\n     *\n     * @param tenantOptions - The properties to convert to a server request.\n     * @param createRequest - Whether this is a create request.\n     * @returns The equivalent server request.\n     *\n     * @internal\n     */\n    static buildServerRequest(tenantOptions, createRequest) {\n        Tenant.validate(tenantOptions, createRequest);\n        let request = {};\n        if (typeof tenantOptions.emailSignInConfig !== 'undefined') {\n            request = auth_config_1.EmailSignInConfig.buildServerRequest(tenantOptions.emailSignInConfig);\n        }\n        if (typeof tenantOptions.displayName !== 'undefined') {\n            request.displayName = tenantOptions.displayName;\n        }\n        if (typeof tenantOptions.anonymousSignInEnabled !== 'undefined') {\n            request.enableAnonymousUser = tenantOptions.anonymousSignInEnabled;\n        }\n        if (typeof tenantOptions.multiFactorConfig !== 'undefined') {\n            request.mfaConfig = auth_config_1.MultiFactorAuthConfig.buildServerRequest(tenantOptions.multiFactorConfig);\n        }\n        if (typeof tenantOptions.testPhoneNumbers !== 'undefined') {\n            // null will clear existing test phone numbers. Translate to empty object.\n            request.testPhoneNumbers = tenantOptions.testPhoneNumbers ?? {};\n        }\n        if (typeof tenantOptions.smsRegionConfig !== 'undefined') {\n            request.smsRegionConfig = tenantOptions.smsRegionConfig;\n        }\n        if (typeof tenantOptions.recaptchaConfig !== 'undefined') {\n            request.recaptchaConfig = auth_config_1.RecaptchaAuthConfig.buildServerRequest(tenantOptions.recaptchaConfig);\n        }\n        if (typeof tenantOptions.passwordPolicyConfig !== 'undefined') {\n            request.passwordPolicyConfig = auth_config_1.PasswordPolicyAuthConfig.buildServerRequest(tenantOptions.passwordPolicyConfig);\n        }\n        if (typeof tenantOptions.emailPrivacyConfig !== 'undefined') {\n            request.emailPrivacyConfig = tenantOptions.emailPrivacyConfig;\n        }\n        return request;\n    }\n    /**\n     * Returns the tenant ID corresponding to the resource name if available.\n     *\n     * @param resourceName - The server side resource name\n     * @returns The tenant ID corresponding to the resource, null otherwise.\n     *\n     * @internal\n     */\n    static getTenantIdFromResourceName(resourceName) {\n        // name is of form projects/project1/tenants/tenant1\n        const matchTenantRes = resourceName.match(/\\/tenants\\/(.*)$/);\n        if (!matchTenantRes || matchTenantRes.length < 2) {\n            return null;\n        }\n        return matchTenantRes[1];\n    }\n    /**\n     * Validates a tenant options object. Throws an error on failure.\n     *\n     * @param request - The tenant options object to validate.\n     * @param createRequest - Whether this is a create request.\n     */\n    static validate(request, createRequest) {\n        const validKeys = {\n            displayName: true,\n            emailSignInConfig: true,\n            anonymousSignInEnabled: true,\n            multiFactorConfig: true,\n            testPhoneNumbers: true,\n            smsRegionConfig: true,\n            recaptchaConfig: true,\n            passwordPolicyConfig: true,\n            emailPrivacyConfig: true,\n        };\n        const label = createRequest ? 'CreateTenantRequest' : 'UpdateTenantRequest';\n        if (!validator.isNonNullObject(request)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${label}\" must be a valid non-null object.`);\n        }\n        // Check for unsupported top level attributes.\n        for (const key in request) {\n            if (!(key in validKeys)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${key}\" is not a valid ${label} parameter.`);\n            }\n        }\n        // Validate displayName type if provided.\n        if (typeof request.displayName !== 'undefined' &&\n            !validator.isNonEmptyString(request.displayName)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${label}.displayName\" must be a valid non-empty string.`);\n        }\n        // Validate emailSignInConfig type if provided.\n        if (typeof request.emailSignInConfig !== 'undefined') {\n            // This will throw an error if invalid.\n            auth_config_1.EmailSignInConfig.buildServerRequest(request.emailSignInConfig);\n        }\n        // Validate test phone numbers if provided.\n        if (typeof request.testPhoneNumbers !== 'undefined' &&\n            request.testPhoneNumbers !== null) {\n            (0, auth_config_1.validateTestPhoneNumbers)(request.testPhoneNumbers);\n        }\n        else if (request.testPhoneNumbers === null && createRequest) {\n            // null allowed only for update operations.\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${label}.testPhoneNumbers\" must be a non-null object.`);\n        }\n        // Validate multiFactorConfig type if provided.\n        if (typeof request.multiFactorConfig !== 'undefined') {\n            // This will throw an error if invalid.\n            auth_config_1.MultiFactorAuthConfig.buildServerRequest(request.multiFactorConfig);\n        }\n        // Validate SMS Regions Config if provided.\n        if (typeof request.smsRegionConfig !== 'undefined') {\n            auth_config_1.SmsRegionsAuthConfig.validate(request.smsRegionConfig);\n        }\n        // Validate reCAPTCHAConfig type if provided.\n        if (typeof request.recaptchaConfig !== 'undefined') {\n            auth_config_1.RecaptchaAuthConfig.buildServerRequest(request.recaptchaConfig);\n        }\n        // Validate passwordPolicyConfig type if provided.\n        if (typeof request.passwordPolicyConfig !== 'undefined') {\n            // This will throw an error if invalid.\n            auth_config_1.PasswordPolicyAuthConfig.buildServerRequest(request.passwordPolicyConfig);\n        }\n        // Validate Email Privacy Config if provided.\n        if (typeof request.emailPrivacyConfig !== 'undefined') {\n            auth_config_1.EmailPrivacyAuthConfig.validate(request.emailPrivacyConfig);\n        }\n    }\n    /**\n     * The Tenant object constructor.\n     *\n     * @param response - The server side response used to initialize the Tenant object.\n     * @constructor\n     * @internal\n     */\n    constructor(response) {\n        const tenantId = Tenant.getTenantIdFromResourceName(response.name);\n        if (!tenantId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Invalid tenant response');\n        }\n        this.tenantId = tenantId;\n        this.displayName = response.displayName;\n        try {\n            this.emailSignInConfig_ = new auth_config_1.EmailSignInConfig(response);\n        }\n        catch (e) {\n            // If allowPasswordSignup is undefined, it is disabled by default.\n            this.emailSignInConfig_ = new auth_config_1.EmailSignInConfig({\n                allowPasswordSignup: false,\n            });\n        }\n        this.anonymousSignInEnabled = !!response.enableAnonymousUser;\n        if (typeof response.mfaConfig !== 'undefined') {\n            this.multiFactorConfig_ = new auth_config_1.MultiFactorAuthConfig(response.mfaConfig);\n        }\n        if (typeof response.testPhoneNumbers !== 'undefined') {\n            this.testPhoneNumbers = (0, deep_copy_1.deepCopy)(response.testPhoneNumbers || {});\n        }\n        if (typeof response.smsRegionConfig !== 'undefined') {\n            this.smsRegionConfig = (0, deep_copy_1.deepCopy)(response.smsRegionConfig);\n        }\n        if (typeof response.recaptchaConfig !== 'undefined') {\n            this.recaptchaConfig_ = new auth_config_1.RecaptchaAuthConfig(response.recaptchaConfig);\n        }\n        if (typeof response.passwordPolicyConfig !== 'undefined') {\n            this.passwordPolicyConfig = new auth_config_1.PasswordPolicyAuthConfig(response.passwordPolicyConfig);\n        }\n        if (typeof response.emailPrivacyConfig !== 'undefined') {\n            this.emailPrivacyConfig = (0, deep_copy_1.deepCopy)(response.emailPrivacyConfig);\n        }\n    }\n    /**\n     * The email sign in provider configuration.\n     */\n    get emailSignInConfig() {\n        return this.emailSignInConfig_;\n    }\n    /**\n     * The multi-factor auth configuration on the current tenant.\n     */\n    get multiFactorConfig() {\n        return this.multiFactorConfig_;\n    }\n    /**\n     * The recaptcha config auth configuration of the current tenant.\n     */\n    get recaptchaConfig() {\n        return this.recaptchaConfig_;\n    }\n    /**\n     * Returns a JSON-serializable representation of this object.\n     *\n     * @returns A JSON-serializable representation of this object.\n     */\n    toJSON() {\n        const json = {\n            tenantId: this.tenantId,\n            displayName: this.displayName,\n            emailSignInConfig: this.emailSignInConfig_?.toJSON(),\n            multiFactorConfig: this.multiFactorConfig_?.toJSON(),\n            anonymousSignInEnabled: this.anonymousSignInEnabled,\n            testPhoneNumbers: this.testPhoneNumbers,\n            smsRegionConfig: (0, deep_copy_1.deepCopy)(this.smsRegionConfig),\n            recaptchaConfig: (0, deep_copy_1.deepCopy)(this.recaptchaConfig),\n            passwordPolicyConfig: (0, deep_copy_1.deepCopy)(this.passwordPolicyConfig),\n            emailPrivacyConfig: (0, deep_copy_1.deepCopy)(this.emailPrivacyConfig),\n        };\n        if (typeof json.multiFactorConfig === 'undefined') {\n            delete json.multiFactorConfig;\n        }\n        if (typeof json.testPhoneNumbers === 'undefined') {\n            delete json.testPhoneNumbers;\n        }\n        if (typeof json.smsRegionConfig === 'undefined') {\n            delete json.smsRegionConfig;\n        }\n        if (typeof json.recaptchaConfig === 'undefined') {\n            delete json.recaptchaConfig;\n        }\n        if (typeof json.passwordPolicyConfig === 'undefined') {\n            delete json.passwordPolicyConfig;\n        }\n        if (typeof json.emailPrivacyConfig === 'undefined') {\n            delete json.emailPrivacyConfig;\n        }\n        return json;\n    }\n}\nexports.Tenant = Tenant;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}