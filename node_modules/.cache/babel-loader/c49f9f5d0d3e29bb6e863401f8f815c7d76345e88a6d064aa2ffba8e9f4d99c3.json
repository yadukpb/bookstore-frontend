{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CollectionGroup = void 0;\nconst query_partition_1 = require(\"./query-partition\");\nconst util_1 = require(\"./util\");\nconst logger_1 = require(\"./logger\");\nconst query_1 = require(\"./reference/query\");\nconst query_options_1 = require(\"./reference/query-options\");\nconst path_1 = require(\"./path\");\nconst validate_1 = require(\"./validate\");\nconst types_1 = require(\"./types\");\nconst order_1 = require(\"./order\");\nconst trace_util_1 = require(\"./telemetry/trace-util\");\n/**\n * A `CollectionGroup` refers to all documents that are contained in a\n * collection or subcollection with a specific collection ID.\n *\n * @class CollectionGroup\n */\nclass CollectionGroup extends query_1.Query {\n  /** @private */\n  constructor(firestore, collectionId, converter) {\n    super(firestore, query_options_1.QueryOptions.forCollectionGroupQuery(collectionId, converter));\n  }\n  /**\n   * Partitions a query by returning partition cursors that can be used to run\n   * the query in parallel. The returned cursors are split points that can be\n   * used as starting and end points for individual query invocations.\n   *\n   * @example\n   * ```\n   * const query = firestore.collectionGroup('collectionId');\n   * for await (const partition of query.getPartitions(42)) {\n   *   const partitionedQuery = partition.toQuery();\n   *   const querySnapshot = await partitionedQuery.get();\n   *   console.log(`Partition contained ${querySnapshot.length} documents`);\n   * }\n   *\n   * ```\n   * @param {number} desiredPartitionCount The desired maximum number of\n   * partition points. The number must be strictly positive. The actual number\n   * of partitions returned may be fewer.\n   * @return {AsyncIterable<QueryPartition>} An AsyncIterable of\n   * `QueryPartition`s.\n   */\n  async *getPartitions(desiredPartitionCount) {\n    const partitions = [];\n    await this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_PARTITION_QUERY, async () => {\n      var _a;\n      (0, validate_1.validateInteger)('desiredPartitionCount', desiredPartitionCount, {\n        minValue: 1\n      });\n      const tag = (0, util_1.requestTag)();\n      await this.firestore.initializeIfNeeded(tag);\n      if (desiredPartitionCount > 1) {\n        // Partition queries require explicit ordering by __name__.\n        const queryWithDefaultOrder = this.orderBy(path_1.FieldPath.documentId());\n        const request = queryWithDefaultOrder.toProto();\n        // Since we are always returning an extra partition (with an empty endBefore\n        // cursor), we reduce the desired partition count by one.\n        request.partitionCount = desiredPartitionCount - 1;\n        const stream = await this.firestore.requestStream('partitionQueryStream', /* bidirectional= */false, request, tag);\n        stream.resume();\n        for await (const currentCursor of stream) {\n          partitions.push((_a = currentCursor.values) !== null && _a !== void 0 ? _a : []);\n        }\n      }\n      (0, logger_1.logger)('Firestore.getPartitions', tag, 'Received %d partitions', partitions.length);\n      // Sort the partitions as they may not be ordered if responses are paged.\n      partitions.sort((l, r) => (0, order_1.compareArrays)(l, r));\n    });\n    for (let i = 0; i < partitions.length; ++i) {\n      yield new query_partition_1.QueryPartition(this._firestore, this._queryOptions.collectionId, this._queryOptions.converter, i > 0 ? partitions[i - 1] : undefined, partitions[i]);\n    }\n    // Return the extra partition with the empty cursor.\n    yield new query_partition_1.QueryPartition(this._firestore, this._queryOptions.collectionId, this._queryOptions.converter, partitions.pop(), undefined);\n  }\n  withConverter(converter) {\n    return new CollectionGroup(this.firestore, this._queryOptions.collectionId, converter !== null && converter !== void 0 ? converter : (0, types_1.defaultConverter)());\n  }\n}\nexports.CollectionGroup = CollectionGroup;","map":{"version":3,"names":["Object","defineProperty","exports","value","CollectionGroup","query_partition_1","require","util_1","logger_1","query_1","query_options_1","path_1","validate_1","types_1","order_1","trace_util_1","Query","constructor","firestore","collectionId","converter","QueryOptions","forCollectionGroupQuery","getPartitions","desiredPartitionCount","partitions","_firestore","_traceUtil","startActiveSpan","SPAN_NAME_PARTITION_QUERY","_a","validateInteger","minValue","tag","requestTag","initializeIfNeeded","queryWithDefaultOrder","orderBy","FieldPath","documentId","request","toProto","partitionCount","stream","requestStream","resume","currentCursor","push","values","logger","length","sort","l","r","compareArrays","i","QueryPartition","_queryOptions","undefined","pop","withConverter","defaultConverter"],"sources":["/home/yadu/Music/Gifty/node_modules/@google-cloud/firestore/build/src/collection-group.js"],"sourcesContent":["\"use strict\";\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CollectionGroup = void 0;\nconst query_partition_1 = require(\"./query-partition\");\nconst util_1 = require(\"./util\");\nconst logger_1 = require(\"./logger\");\nconst query_1 = require(\"./reference/query\");\nconst query_options_1 = require(\"./reference/query-options\");\nconst path_1 = require(\"./path\");\nconst validate_1 = require(\"./validate\");\nconst types_1 = require(\"./types\");\nconst order_1 = require(\"./order\");\nconst trace_util_1 = require(\"./telemetry/trace-util\");\n/**\n * A `CollectionGroup` refers to all documents that are contained in a\n * collection or subcollection with a specific collection ID.\n *\n * @class CollectionGroup\n */\nclass CollectionGroup extends query_1.Query {\n    /** @private */\n    constructor(firestore, collectionId, converter) {\n        super(firestore, query_options_1.QueryOptions.forCollectionGroupQuery(collectionId, converter));\n    }\n    /**\n     * Partitions a query by returning partition cursors that can be used to run\n     * the query in parallel. The returned cursors are split points that can be\n     * used as starting and end points for individual query invocations.\n     *\n     * @example\n     * ```\n     * const query = firestore.collectionGroup('collectionId');\n     * for await (const partition of query.getPartitions(42)) {\n     *   const partitionedQuery = partition.toQuery();\n     *   const querySnapshot = await partitionedQuery.get();\n     *   console.log(`Partition contained ${querySnapshot.length} documents`);\n     * }\n     *\n     * ```\n     * @param {number} desiredPartitionCount The desired maximum number of\n     * partition points. The number must be strictly positive. The actual number\n     * of partitions returned may be fewer.\n     * @return {AsyncIterable<QueryPartition>} An AsyncIterable of\n     * `QueryPartition`s.\n     */\n    async *getPartitions(desiredPartitionCount) {\n        const partitions = [];\n        await this._firestore._traceUtil.startActiveSpan(trace_util_1.SPAN_NAME_PARTITION_QUERY, async () => {\n            var _a;\n            (0, validate_1.validateInteger)('desiredPartitionCount', desiredPartitionCount, {\n                minValue: 1,\n            });\n            const tag = (0, util_1.requestTag)();\n            await this.firestore.initializeIfNeeded(tag);\n            if (desiredPartitionCount > 1) {\n                // Partition queries require explicit ordering by __name__.\n                const queryWithDefaultOrder = this.orderBy(path_1.FieldPath.documentId());\n                const request = queryWithDefaultOrder.toProto();\n                // Since we are always returning an extra partition (with an empty endBefore\n                // cursor), we reduce the desired partition count by one.\n                request.partitionCount = desiredPartitionCount - 1;\n                const stream = await this.firestore.requestStream('partitionQueryStream', \n                /* bidirectional= */ false, request, tag);\n                stream.resume();\n                for await (const currentCursor of stream) {\n                    partitions.push((_a = currentCursor.values) !== null && _a !== void 0 ? _a : []);\n                }\n            }\n            (0, logger_1.logger)('Firestore.getPartitions', tag, 'Received %d partitions', partitions.length);\n            // Sort the partitions as they may not be ordered if responses are paged.\n            partitions.sort((l, r) => (0, order_1.compareArrays)(l, r));\n        });\n        for (let i = 0; i < partitions.length; ++i) {\n            yield new query_partition_1.QueryPartition(this._firestore, this._queryOptions.collectionId, this._queryOptions.converter, i > 0 ? partitions[i - 1] : undefined, partitions[i]);\n        }\n        // Return the extra partition with the empty cursor.\n        yield new query_partition_1.QueryPartition(this._firestore, this._queryOptions.collectionId, this._queryOptions.converter, partitions.pop(), undefined);\n    }\n    withConverter(converter) {\n        return new CollectionGroup(this.firestore, this._queryOptions.collectionId, converter !== null && converter !== void 0 ? converter : (0, types_1.defaultConverter)());\n    }\n}\nexports.CollectionGroup = CollectionGroup;\n//# sourceMappingURL=collection-group.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,eAAe,GAAG,KAAK,CAAC;AAChC,MAAMC,iBAAiB,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACtD,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,QAAQ,GAAGF,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMG,OAAO,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAC5C,MAAMI,eAAe,GAAGJ,OAAO,CAAC,2BAA2B,CAAC;AAC5D,MAAMK,MAAM,GAAGL,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMM,UAAU,GAAGN,OAAO,CAAC,YAAY,CAAC;AACxC,MAAMO,OAAO,GAAGP,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMQ,OAAO,GAAGR,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMS,YAAY,GAAGT,OAAO,CAAC,wBAAwB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,eAAe,SAASK,OAAO,CAACO,KAAK,CAAC;EACxC;EACAC,WAAW,CAACC,SAAS,EAAEC,YAAY,EAAEC,SAAS,EAAE;IAC5C,KAAK,CAACF,SAAS,EAAER,eAAe,CAACW,YAAY,CAACC,uBAAuB,CAACH,YAAY,EAAEC,SAAS,CAAC,CAAC;EACnG;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAOG,aAAa,CAACC,qBAAqB,EAAE;IACxC,MAAMC,UAAU,GAAG,EAAE;IACrB,MAAM,IAAI,CAACC,UAAU,CAACC,UAAU,CAACC,eAAe,CAACb,YAAY,CAACc,yBAAyB,EAAE,YAAY;MACjG,IAAIC,EAAE;MACN,CAAC,CAAC,EAAElB,UAAU,CAACmB,eAAe,EAAE,uBAAuB,EAAEP,qBAAqB,EAAE;QAC5EQ,QAAQ,EAAE;MACd,CAAC,CAAC;MACF,MAAMC,GAAG,GAAG,CAAC,CAAC,EAAE1B,MAAM,CAAC2B,UAAU,GAAG;MACpC,MAAM,IAAI,CAAChB,SAAS,CAACiB,kBAAkB,CAACF,GAAG,CAAC;MAC5C,IAAIT,qBAAqB,GAAG,CAAC,EAAE;QAC3B;QACA,MAAMY,qBAAqB,GAAG,IAAI,CAACC,OAAO,CAAC1B,MAAM,CAAC2B,SAAS,CAACC,UAAU,EAAE,CAAC;QACzE,MAAMC,OAAO,GAAGJ,qBAAqB,CAACK,OAAO,EAAE;QAC/C;QACA;QACAD,OAAO,CAACE,cAAc,GAAGlB,qBAAqB,GAAG,CAAC;QAClD,MAAMmB,MAAM,GAAG,MAAM,IAAI,CAACzB,SAAS,CAAC0B,aAAa,CAAC,sBAAsB,EACxE,oBAAqB,KAAK,EAAEJ,OAAO,EAAEP,GAAG,CAAC;QACzCU,MAAM,CAACE,MAAM,EAAE;QACf,WAAW,MAAMC,aAAa,IAAIH,MAAM,EAAE;UACtClB,UAAU,CAACsB,IAAI,CAAC,CAACjB,EAAE,GAAGgB,aAAa,CAACE,MAAM,MAAM,IAAI,IAAIlB,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,EAAE,CAAC;QACpF;MACJ;MACA,CAAC,CAAC,EAAEtB,QAAQ,CAACyC,MAAM,EAAE,yBAAyB,EAAEhB,GAAG,EAAE,wBAAwB,EAAER,UAAU,CAACyB,MAAM,CAAC;MACjG;MACAzB,UAAU,CAAC0B,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,CAAC,CAAC,EAAEvC,OAAO,CAACwC,aAAa,EAAEF,CAAC,EAAEC,CAAC,CAAC,CAAC;IAC/D,CAAC,CAAC;IACF,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG9B,UAAU,CAACyB,MAAM,EAAE,EAAEK,CAAC,EAAE;MACxC,MAAM,IAAIlD,iBAAiB,CAACmD,cAAc,CAAC,IAAI,CAAC9B,UAAU,EAAE,IAAI,CAAC+B,aAAa,CAACtC,YAAY,EAAE,IAAI,CAACsC,aAAa,CAACrC,SAAS,EAAEmC,CAAC,GAAG,CAAC,GAAG9B,UAAU,CAAC8B,CAAC,GAAG,CAAC,CAAC,GAAGG,SAAS,EAAEjC,UAAU,CAAC8B,CAAC,CAAC,CAAC;IACpL;IACA;IACA,MAAM,IAAIlD,iBAAiB,CAACmD,cAAc,CAAC,IAAI,CAAC9B,UAAU,EAAE,IAAI,CAAC+B,aAAa,CAACtC,YAAY,EAAE,IAAI,CAACsC,aAAa,CAACrC,SAAS,EAAEK,UAAU,CAACkC,GAAG,EAAE,EAAED,SAAS,CAAC;EAC3J;EACAE,aAAa,CAACxC,SAAS,EAAE;IACrB,OAAO,IAAIhB,eAAe,CAAC,IAAI,CAACc,SAAS,EAAE,IAAI,CAACuC,aAAa,CAACtC,YAAY,EAAEC,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAK,KAAK,CAAC,GAAGA,SAAS,GAAG,CAAC,CAAC,EAAEP,OAAO,CAACgD,gBAAgB,GAAG,CAAC;EACzK;AACJ;AACA3D,OAAO,CAACE,eAAe,GAAGA,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}