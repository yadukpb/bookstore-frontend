{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoLogger = exports.MongoLoggableComponent = exports.SEVERITY_LEVEL_MAP = exports.DEFAULT_MAX_DOCUMENT_LENGTH = exports.SeverityLevel = void 0;\nexports.parseSeverityFromString = parseSeverityFromString;\nexports.createStdioLogger = createStdioLogger;\nexports.stringifyWithMaxLen = stringifyWithMaxLen;\nexports.defaultLogTransform = defaultLogTransform;\nconst util_1 = require(\"util\");\nconst bson_1 = require(\"./bson\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\n/** @internal */\nexports.SeverityLevel = Object.freeze({\n  EMERGENCY: 'emergency',\n  ALERT: 'alert',\n  CRITICAL: 'critical',\n  ERROR: 'error',\n  WARNING: 'warn',\n  NOTICE: 'notice',\n  INFORMATIONAL: 'info',\n  DEBUG: 'debug',\n  TRACE: 'trace',\n  OFF: 'off'\n});\n/** @internal */\nexports.DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */\nclass SeverityLevelMap extends Map {\n  constructor(entries) {\n    const newEntries = [];\n    for (const [level, value] of entries) {\n      newEntries.push([value, level]);\n    }\n    newEntries.push(...entries);\n    super(newEntries);\n  }\n  getNumericSeverityLevel(severity) {\n    return this.get(severity);\n  }\n  getSeverityLevelName(level) {\n    return this.get(level);\n  }\n}\n/** @internal */\nexports.SEVERITY_LEVEL_MAP = new SeverityLevelMap([[exports.SeverityLevel.OFF, -Infinity], [exports.SeverityLevel.EMERGENCY, 0], [exports.SeverityLevel.ALERT, 1], [exports.SeverityLevel.CRITICAL, 2], [exports.SeverityLevel.ERROR, 3], [exports.SeverityLevel.WARNING, 4], [exports.SeverityLevel.NOTICE, 5], [exports.SeverityLevel.INFORMATIONAL, 6], [exports.SeverityLevel.DEBUG, 7], [exports.SeverityLevel.TRACE, 8]]);\n/** @internal */\nexports.MongoLoggableComponent = Object.freeze({\n  COMMAND: 'command',\n  TOPOLOGY: 'topology',\n  SERVER_SELECTION: 'serverSelection',\n  CONNECTION: 'connection',\n  CLIENT: 'client'\n});\n/**\n * Parses a string as one of SeverityLevel\n * @internal\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s) {\n  const validSeverities = Object.values(exports.SeverityLevel);\n  const lowerSeverity = s?.toLowerCase();\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n    return lowerSeverity;\n  }\n  return null;\n}\n/** @internal */\nfunction createStdioLogger(stream) {\n  return {\n    write: (0, util_1.promisify)((log, cb) => {\n      const logLine = (0, util_1.inspect)(log, {\n        compact: true,\n        breakLength: Infinity\n      });\n      stream.write(`${logLine}\\n`, 'utf-8', cb);\n      return;\n    })\n  };\n}\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */\nfunction resolveLogPath(_ref, _ref2) {\n  let {\n    MONGODB_LOG_PATH\n  } = _ref;\n  let {\n    mongodbLogPath\n  } = _ref2;\n  if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n    return {\n      mongodbLogPath: createStdioLogger(process.stderr),\n      mongodbLogPathIsStdErr: true\n    };\n  }\n  if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n    return {\n      mongodbLogPath: createStdioLogger(process.stdout),\n      mongodbLogPathIsStdErr: false\n    };\n  }\n  if (typeof mongodbLogPath === 'object' && typeof mongodbLogPath?.write === 'function') {\n    return {\n      mongodbLogPath: mongodbLogPath,\n      mongodbLogPathIsStdErr: false\n    };\n  }\n  if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n    return {\n      mongodbLogPath: createStdioLogger(process.stderr),\n      mongodbLogPathIsStdErr: true\n    };\n  }\n  if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n    return {\n      mongodbLogPath: createStdioLogger(process.stdout),\n      mongodbLogPathIsStdErr: false\n    };\n  }\n  return {\n    mongodbLogPath: createStdioLogger(process.stderr),\n    mongodbLogPathIsStdErr: true\n  };\n}\nfunction resolveSeverityConfiguration(clientOption, environmentOption, defaultSeverity) {\n  return parseSeverityFromString(clientOption) ?? parseSeverityFromString(environmentOption) ?? defaultSeverity;\n}\nfunction compareSeverity(s0, s1) {\n  const s0Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n  const s1Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n  return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n/** @internal */\nfunction stringifyWithMaxLen(value, maxDocumentLength) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let strToTruncate = '';\n  if (typeof value === 'string') {\n    strToTruncate = value;\n  } else if (typeof value === 'function') {\n    strToTruncate = value.name;\n  } else {\n    try {\n      strToTruncate = bson_1.EJSON.stringify(value, options);\n    } catch (e) {\n      strToTruncate = `Extended JSON serialization failed with: ${e.message}`;\n    }\n  }\n  // handle truncation that occurs in the middle of multi-byte codepoints\n  if (maxDocumentLength !== 0 && strToTruncate.length > maxDocumentLength && strToTruncate.charCodeAt(maxDocumentLength - 1) !== strToTruncate.codePointAt(maxDocumentLength - 1)) {\n    maxDocumentLength--;\n    if (maxDocumentLength === 0) {\n      return '';\n    }\n  }\n  return maxDocumentLength !== 0 && strToTruncate.length > maxDocumentLength ? `${strToTruncate.slice(0, maxDocumentLength)}...` : strToTruncate;\n}\nfunction isLogConvertible(obj) {\n  const objAsLogConvertible = obj;\n  // eslint-disable-next-line no-restricted-syntax\n  return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\nfunction attachServerSelectionFields(log, serverSelectionEvent) {\n  let maxDocumentLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : exports.DEFAULT_MAX_DOCUMENT_LENGTH;\n  const {\n    selector,\n    operation,\n    topologyDescription,\n    message\n  } = serverSelectionEvent;\n  log.selector = stringifyWithMaxLen(selector, maxDocumentLength);\n  log.operation = operation;\n  log.topologyDescription = stringifyWithMaxLen(topologyDescription, maxDocumentLength);\n  log.message = message;\n  return log;\n}\nfunction attachCommandFields(log, commandEvent) {\n  log.commandName = commandEvent.commandName;\n  log.requestId = commandEvent.requestId;\n  log.driverConnectionId = commandEvent.connectionId;\n  const {\n    host,\n    port\n  } = utils_1.HostAddress.fromString(commandEvent.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  if (commandEvent?.serviceId) {\n    log.serviceId = commandEvent.serviceId.toHexString();\n  }\n  log.databaseName = commandEvent.databaseName;\n  log.serverConnectionId = commandEvent.serverConnectionId;\n  return log;\n}\nfunction attachConnectionFields(log, event) {\n  const {\n    host,\n    port\n  } = utils_1.HostAddress.fromString(event.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  return log;\n}\nfunction attachSDAMFields(log, sdamEvent) {\n  log.topologyId = sdamEvent.topologyId;\n  return log;\n}\nfunction attachServerHeartbeatFields(log, serverHeartbeatEvent) {\n  const {\n    awaited,\n    connectionId\n  } = serverHeartbeatEvent;\n  log.awaited = awaited;\n  log.driverConnectionId = serverHeartbeatEvent.connectionId;\n  const {\n    host,\n    port\n  } = utils_1.HostAddress.fromString(connectionId).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  return log;\n}\n/** @internal */\nfunction defaultLogTransform(logObject) {\n  let maxDocumentLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : exports.DEFAULT_MAX_DOCUMENT_LENGTH;\n  let log = Object.create(null);\n  switch (logObject.name) {\n    case constants_1.SERVER_SELECTION_STARTED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      return log;\n    case constants_1.SERVER_SELECTION_FAILED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.failure = logObject.failure?.message;\n      return log;\n    case constants_1.SERVER_SELECTION_SUCCEEDED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.serverHost = logObject.serverHost;\n      log.serverPort = logObject.serverPort;\n      return log;\n    case constants_1.WAITING_FOR_SUITABLE_SERVER:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.remainingTimeMS = logObject.remainingTimeMS;\n      return log;\n    case constants_1.COMMAND_STARTED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command started';\n      log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength, {\n        relaxed: true\n      });\n      log.databaseName = logObject.databaseName;\n      return log;\n    case constants_1.COMMAND_SUCCEEDED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command succeeded';\n      log.durationMS = logObject.duration;\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, {\n        relaxed: true\n      });\n      return log;\n    case constants_1.COMMAND_FAILED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command failed';\n      log.durationMS = logObject.duration;\n      log.failure = logObject.failure?.message ?? '(redacted)';\n      return log;\n    case constants_1.CONNECTION_POOL_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool created';\n      if (logObject.options) {\n        const {\n          maxIdleTimeMS,\n          minPoolSize,\n          maxPoolSize,\n          maxConnecting,\n          waitQueueTimeoutMS\n        } = logObject.options;\n        log = {\n          ...log,\n          maxIdleTimeMS,\n          minPoolSize,\n          maxPoolSize,\n          maxConnecting,\n          waitQueueTimeoutMS\n        };\n      }\n      return log;\n    case constants_1.CONNECTION_POOL_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool ready';\n      return log;\n    case constants_1.CONNECTION_POOL_CLEARED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool cleared';\n      if (logObject.serviceId?._bsontype === 'ObjectId') {\n        log.serviceId = logObject.serviceId?.toHexString();\n      }\n      return log;\n    case constants_1.CONNECTION_POOL_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool closed';\n      return log;\n    case constants_1.CONNECTION_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection created';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.CONNECTION_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection ready';\n      log.driverConnectionId = logObject.connectionId;\n      log.durationMS = logObject.durationMS;\n      return log;\n    case constants_1.CONNECTION_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection closed';\n      log.driverConnectionId = logObject.connectionId;\n      switch (logObject.reason) {\n        case 'stale':\n          log.reason = 'Connection became stale because the pool was cleared';\n          break;\n        case 'idle':\n          log.reason = 'Connection has been available but unused for longer than the configured max idle time';\n          break;\n        case 'error':\n          log.reason = 'An error occurred while using the connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        default:\n          log.reason = `Unknown close reason: ${logObject.reason}`;\n      }\n      return log;\n    case constants_1.CONNECTION_CHECK_OUT_STARTED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout started';\n      return log;\n    case constants_1.CONNECTION_CHECK_OUT_FAILED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout failed';\n      switch (logObject.reason) {\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        case 'timeout':\n          log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n          break;\n        case 'connectionError':\n          log.reason = 'An error occurred while trying to establish a new connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        default:\n          log.reason = `Unknown close reason: ${logObject.reason}`;\n      }\n      log.durationMS = logObject.durationMS;\n      return log;\n    case constants_1.CONNECTION_CHECKED_OUT:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked out';\n      log.driverConnectionId = logObject.connectionId;\n      log.durationMS = logObject.durationMS;\n      return log;\n    case constants_1.CONNECTION_CHECKED_IN:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked in';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.SERVER_OPENING:\n      log = attachSDAMFields(log, logObject);\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Starting server monitoring';\n      return log;\n    case constants_1.SERVER_CLOSED:\n      log = attachSDAMFields(log, logObject);\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Stopped server monitoring';\n      return log;\n    case constants_1.SERVER_HEARTBEAT_STARTED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat started';\n      return log;\n    case constants_1.SERVER_HEARTBEAT_SUCCEEDED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat succeeded';\n      log.durationMS = logObject.duration;\n      log.serverConnectionId = logObject.serverConnectionId;\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, {\n        relaxed: true\n      });\n      return log;\n    case constants_1.SERVER_HEARTBEAT_FAILED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat failed';\n      log.durationMS = logObject.duration;\n      log.failure = logObject.failure?.message;\n      return log;\n    case constants_1.TOPOLOGY_OPENING:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Starting topology monitoring';\n      return log;\n    case constants_1.TOPOLOGY_CLOSED:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Stopped topology monitoring';\n      return log;\n    case constants_1.TOPOLOGY_DESCRIPTION_CHANGED:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Topology description changed';\n      log.previousDescription = log.reply = stringifyWithMaxLen(logObject.previousDescription, maxDocumentLength);\n      log.newDescription = log.reply = stringifyWithMaxLen(logObject.newDescription, maxDocumentLength);\n      return log;\n    default:\n      for (const [key, value] of Object.entries(logObject)) {\n        if (value != null) log[key] = value;\n      }\n  }\n  return log;\n}\n/** @internal */\nclass MongoLogger {\n  constructor(options) {\n    this.pendingLog = null;\n    /**\n     * This method should be used when logging errors that do not have a public driver API for\n     * reporting errors.\n     */\n    this.error = this.log.bind(this, 'error');\n    /**\n     * This method should be used to log situations where undesirable application behaviour might\n     * occur. For example, failing to end sessions on `MongoClient.close`.\n     */\n    this.warn = this.log.bind(this, 'warn');\n    /**\n     * This method should be used to report high-level information about normal driver behaviour.\n     * For example, the creation of a `MongoClient`.\n     */\n    this.info = this.log.bind(this, 'info');\n    /**\n     * This method should be used to report information that would be helpful when debugging an\n     * application. For example, a command starting, succeeding or failing.\n     */\n    this.debug = this.log.bind(this, 'debug');\n    /**\n     * This method should be used to report fine-grained details related to logic flow. For example,\n     * entering and exiting a function body.\n     */\n    this.trace = this.log.bind(this, 'trace');\n    this.componentSeverities = options.componentSeverities;\n    this.maxDocumentLength = options.maxDocumentLength;\n    this.logDestination = options.logDestination;\n    this.logDestinationIsStdErr = options.logDestinationIsStdErr;\n    this.severities = this.createLoggingSeverities();\n  }\n  createLoggingSeverities() {\n    const severities = Object();\n    for (const component of Object.values(exports.MongoLoggableComponent)) {\n      severities[component] = {};\n      for (const severityLevel of Object.values(exports.SeverityLevel)) {\n        severities[component][severityLevel] = compareSeverity(severityLevel, this.componentSeverities[component]) <= 0;\n      }\n    }\n    return severities;\n  }\n  turnOffSeverities() {\n    for (const component of Object.values(exports.MongoLoggableComponent)) {\n      this.componentSeverities[component] = exports.SeverityLevel.OFF;\n      for (const severityLevel of Object.values(exports.SeverityLevel)) {\n        this.severities[component][severityLevel] = false;\n      }\n    }\n  }\n  logWriteFailureHandler(error) {\n    if (this.logDestinationIsStdErr) {\n      this.turnOffSeverities();\n      this.clearPendingLog();\n      return;\n    }\n    this.logDestination = createStdioLogger(process.stderr);\n    this.logDestinationIsStdErr = true;\n    this.clearPendingLog();\n    this.error(exports.MongoLoggableComponent.CLIENT, {\n      toLog: function () {\n        return {\n          message: 'User input for mongodbLogPath is now invalid. Logging is halted.',\n          error: error.message\n        };\n      }\n    });\n    this.turnOffSeverities();\n    this.clearPendingLog();\n  }\n  clearPendingLog() {\n    this.pendingLog = null;\n  }\n  willLog(component, severity) {\n    if (severity === exports.SeverityLevel.OFF) return false;\n    return this.severities[component][severity];\n  }\n  log(severity, component, message) {\n    if (!this.willLog(component, severity)) return;\n    let logMessage = {\n      t: new Date(),\n      c: component,\n      s: severity\n    };\n    if (typeof message === 'string') {\n      logMessage.message = message;\n    } else if (typeof message === 'object') {\n      if (isLogConvertible(message)) {\n        logMessage = {\n          ...logMessage,\n          ...message.toLog()\n        };\n      } else {\n        logMessage = {\n          ...logMessage,\n          ...defaultLogTransform(message, this.maxDocumentLength)\n        };\n      }\n    }\n    if ((0, utils_1.isPromiseLike)(this.pendingLog)) {\n      this.pendingLog = this.pendingLog.then(() => this.logDestination.write(logMessage)).then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n      return;\n    }\n    try {\n      const logResult = this.logDestination.write(logMessage);\n      if ((0, utils_1.isPromiseLike)(logResult)) {\n        this.pendingLog = logResult.then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n      }\n    } catch (error) {\n      this.logWriteFailureHandler(error);\n    }\n  }\n  /**\n   * Merges options set through environment variables and the MongoClient, preferring environment\n   * variables when both are set, and substituting defaults for values not set. Options set in\n   * constructor take precedence over both environment variables and MongoClient options.\n   *\n   * @remarks\n   * When parsing component severity levels, invalid values are treated as unset and replaced with\n   * the default severity.\n   *\n   * @param envOptions - options set for the logger from the environment\n   * @param clientOptions - options set for the logger in the MongoClient options\n   * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n   */\n  static resolveOptions(envOptions, clientOptions) {\n    // client options take precedence over env options\n    const resolvedLogPath = resolveLogPath(envOptions, clientOptions);\n    const combinedOptions = {\n      ...envOptions,\n      ...clientOptions,\n      mongodbLogPath: resolvedLogPath.mongodbLogPath,\n      mongodbLogPathIsStdErr: resolvedLogPath.mongodbLogPathIsStdErr\n    };\n    const defaultSeverity = resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.default, combinedOptions.MONGODB_LOG_ALL, exports.SeverityLevel.OFF);\n    return {\n      componentSeverities: {\n        command: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.command, combinedOptions.MONGODB_LOG_COMMAND, defaultSeverity),\n        topology: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.topology, combinedOptions.MONGODB_LOG_TOPOLOGY, defaultSeverity),\n        serverSelection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.serverSelection, combinedOptions.MONGODB_LOG_SERVER_SELECTION, defaultSeverity),\n        connection: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.connection, combinedOptions.MONGODB_LOG_CONNECTION, defaultSeverity),\n        client: resolveSeverityConfiguration(combinedOptions.mongodbLogComponentSeverities?.client, combinedOptions.MONGODB_LOG_CLIENT, defaultSeverity),\n        default: defaultSeverity\n      },\n      maxDocumentLength: combinedOptions.mongodbLogMaxDocumentLength ?? (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ?? 1000,\n      logDestination: combinedOptions.mongodbLogPath,\n      logDestinationIsStdErr: combinedOptions.mongodbLogPathIsStdErr\n    };\n  }\n}\nexports.MongoLogger = MongoLogger;","map":{"version":3,"mappings":";;;;;;AA6MAA;AAYAA;AAuMAA;AA6GAA;AA7gBA;AAEA;AAeA;AA0CA;AAEA;AACaA,qBAAa,GAAGC,MAAM,CAACC,MAAM,CAAC;EACzCC,SAAS,EAAE,WAAW;EACtBC,KAAK,EAAE,OAAO;EACdC,QAAQ,EAAE,UAAU;EACpBC,KAAK,EAAE,OAAO;EACdC,OAAO,EAAE,MAAM;EACfC,MAAM,EAAE,QAAQ;EAChBC,aAAa,EAAE,MAAM;EACrBC,KAAK,EAAE,OAAO;EACdC,KAAK,EAAE,OAAO;EACdC,GAAG,EAAE;CACG,CAAC;AAEX;AACaZ,mCAA2B,GAAG,IAAI;AAI/C;AACA,MAAMa,gBAAiB,SAAQC,GAAmD;EAChFC,YAAYC,OAA2D;IACrE,MAAMC,UAAU,GAAuD,EAAE;IACzE,KAAK,MAAM,CAACC,KAAK,EAAEC,KAAK,CAAC,IAAIH,OAAO,EAAE;MACpCC,UAAU,CAACG,IAAI,CAAC,CAACD,KAAK,EAAED,KAAK,CAAC,CAAC;IACjC;IAEAD,UAAU,CAACG,IAAI,CAAC,GAAGJ,OAAO,CAAC;IAC3B,KAAK,CAACC,UAAU,CAAC;EACnB;EAEAI,uBAAuB,CAACC,QAAuB;IAC7C,OAAO,IAAI,CAACC,GAAG,CAACD,QAAQ,CAAW;EACrC;EAEAE,oBAAoB,CAACN,KAAa;IAChC,OAAO,IAAI,CAACK,GAAG,CAACL,KAAK,CAA8B;EACrD;;AAGF;AACalB,0BAAkB,GAAG,IAAIa,gBAAgB,CAAC,CACrD,CAACb,qBAAa,CAACY,GAAG,EAAE,CAACa,QAAQ,CAAC,EAC9B,CAACzB,qBAAa,CAACG,SAAS,EAAE,CAAC,CAAC,EAC5B,CAACH,qBAAa,CAACI,KAAK,EAAE,CAAC,CAAC,EACxB,CAACJ,qBAAa,CAACK,QAAQ,EAAE,CAAC,CAAC,EAC3B,CAACL,qBAAa,CAACM,KAAK,EAAE,CAAC,CAAC,EACxB,CAACN,qBAAa,CAACO,OAAO,EAAE,CAAC,CAAC,EAC1B,CAACP,qBAAa,CAACQ,MAAM,EAAE,CAAC,CAAC,EACzB,CAACR,qBAAa,CAACS,aAAa,EAAE,CAAC,CAAC,EAChC,CAACT,qBAAa,CAACU,KAAK,EAAE,CAAC,CAAC,EACxB,CAACV,qBAAa,CAACW,KAAK,EAAE,CAAC,CAAC,CACzB,CAAC;AAEF;AACaX,8BAAsB,GAAGC,MAAM,CAACC,MAAM,CAAC;EAClDwB,OAAO,EAAE,SAAS;EAClBC,QAAQ,EAAE,UAAU;EACpBC,gBAAgB,EAAE,iBAAiB;EACnCC,UAAU,EAAE,YAAY;EACxBC,MAAM,EAAE;CACA,CAAC;AA4EX;;;;;;;AAOA,SAAgBC,uBAAuB,CAACC,CAAU;EAChD,MAAMC,eAAe,GAAahC,MAAM,CAACiC,MAAM,CAAClC,qBAAa,CAAC;EAC9D,MAAMmC,aAAa,GAAGH,CAAC,EAAEI,WAAW,EAAE;EAEtC,IAAID,aAAa,IAAI,IAAI,IAAIF,eAAe,CAACI,QAAQ,CAACF,aAAa,CAAC,EAAE;IACpE,OAAOA,aAA8B;EACvC;EAEA,OAAO,IAAI;AACb;AAEA;AACA,SAAgBG,iBAAiB,CAACC,MAEjC;EACC,OAAO;IACLC,KAAK,EAAE,oBAAS,EAAC,CAACC,GAAQ,EAAEC,EAA2B,KAAa;MAClE,MAAMC,OAAO,GAAG,kBAAO,EAACF,GAAG,EAAE;QAAEG,OAAO,EAAE,IAAI;QAAEC,WAAW,EAAEpB;MAAQ,CAAE,CAAC;MACtEc,MAAM,CAACC,KAAK,CAAC,GAAGG,OAAO,IAAI,EAAE,OAAO,EAAED,EAAE,CAAC;MACzC;IACF,CAAC;GACF;AACH;AAEA;;;;;;;;;;AAUA,SAASI,cAAc,cAE4B;EAAA,IADjD;IAAEC;EAAgB,CAAyB;EAAA,IAC3C;IAAEC;EAAc,CAAiC;EAEjD,IAAI,OAAOA,cAAc,KAAK,QAAQ,IAAI,WAAW,CAACC,IAAI,CAACD,cAAc,CAAC,EAAE;IAC1E,OAAO;MAAEA,cAAc,EAAEV,iBAAiB,CAACY,OAAO,CAACC,MAAM,CAAC;MAAEC,sBAAsB,EAAE;IAAI,CAAE;EAC5F;EACA,IAAI,OAAOJ,cAAc,KAAK,QAAQ,IAAI,WAAW,CAACC,IAAI,CAACD,cAAc,CAAC,EAAE;IAC1E,OAAO;MAAEA,cAAc,EAAEV,iBAAiB,CAACY,OAAO,CAACG,MAAM,CAAC;MAAED,sBAAsB,EAAE;IAAK,CAAE;EAC7F;EAEA,IAAI,OAAOJ,cAAc,KAAK,QAAQ,IAAI,OAAOA,cAAc,EAAER,KAAK,KAAK,UAAU,EAAE;IACrF,OAAO;MAAEQ,cAAc,EAAEA,cAAc;MAAEI,sBAAsB,EAAE;IAAK,CAAE;EAC1E;EAEA,IAAIL,gBAAgB,IAAI,WAAW,CAACE,IAAI,CAACF,gBAAgB,CAAC,EAAE;IAC1D,OAAO;MAAEC,cAAc,EAAEV,iBAAiB,CAACY,OAAO,CAACC,MAAM,CAAC;MAAEC,sBAAsB,EAAE;IAAI,CAAE;EAC5F;EACA,IAAIL,gBAAgB,IAAI,WAAW,CAACE,IAAI,CAACF,gBAAgB,CAAC,EAAE;IAC1D,OAAO;MAAEC,cAAc,EAAEV,iBAAiB,CAACY,OAAO,CAACG,MAAM,CAAC;MAAED,sBAAsB,EAAE;IAAK,CAAE;EAC7F;EAEA,OAAO;IAAEJ,cAAc,EAAEV,iBAAiB,CAACY,OAAO,CAACC,MAAM,CAAC;IAAEC,sBAAsB,EAAE;EAAI,CAAE;AAC5F;AAEA,SAASE,4BAA4B,CACnCC,YAAgC,EAChCC,iBAAqC,EACrCC,eAA8B;EAE9B,OACE1B,uBAAuB,CAACwB,YAAY,CAAC,IACrCxB,uBAAuB,CAACyB,iBAAiB,CAAC,IAC1CC,eAAe;AAEnB;AAkBA,SAASC,eAAe,CAACC,EAAiB,EAAEC,EAAiB;EAC3D,MAAMC,KAAK,GAAG7D,0BAAkB,CAACqB,uBAAuB,CAACsC,EAAE,CAAC;EAC5D,MAAMG,KAAK,GAAG9D,0BAAkB,CAACqB,uBAAuB,CAACuC,EAAE,CAAC;EAE5D,OAAOC,KAAK,GAAGC,KAAK,GAAG,CAAC,CAAC,GAAGD,KAAK,GAAGC,KAAK,GAAG,CAAC,GAAG,CAAC;AACnD;AAsHA;AACA,SAAgBC,mBAAmB,CACjC5C,KAAU,EACV6C,iBAAyB,EACC;EAAA,IAA1BC,8EAAwB,EAAE;EAE1B,IAAIC,aAAa,GAAG,EAAE;EAEtB,IAAI,OAAO/C,KAAK,KAAK,QAAQ,EAAE;IAC7B+C,aAAa,GAAG/C,KAAK;EACvB,CAAC,MAAM,IAAI,OAAOA,KAAK,KAAK,UAAU,EAAE;IACtC+C,aAAa,GAAG/C,KAAK,CAACgD,IAAI;EAC5B,CAAC,MAAM;IACL,IAAI;MACFD,aAAa,GAAGE,YAAK,CAACC,SAAS,CAAClD,KAAK,EAAE8C,OAAO,CAAC;IACjD,CAAC,CAAC,OAAOK,CAAC,EAAE;MACVJ,aAAa,GAAG,4CAA4CI,CAAC,CAACC,OAAO,EAAE;IACzE;EACF;EAEA;EACA,IACEP,iBAAiB,KAAK,CAAC,IACvBE,aAAa,CAACM,MAAM,GAAGR,iBAAiB,IACxCE,aAAa,CAACO,UAAU,CAACT,iBAAiB,GAAG,CAAC,CAAC,KAC7CE,aAAa,CAACQ,WAAW,CAACV,iBAAiB,GAAG,CAAC,CAAC,EAClD;IACAA,iBAAiB,EAAE;IACnB,IAAIA,iBAAiB,KAAK,CAAC,EAAE;MAC3B,OAAO,EAAE;IACX;EACF;EAEA,OAAOA,iBAAiB,KAAK,CAAC,IAAIE,aAAa,CAACM,MAAM,GAAGR,iBAAiB,GACtE,GAAGE,aAAa,CAACS,KAAK,CAAC,CAAC,EAAEX,iBAAiB,CAAC,KAAK,GACjDE,aAAa;AACnB;AAKA,SAASU,gBAAgB,CAACC,GAAa;EACrC,MAAMC,mBAAmB,GAAGD,GAAqB;EACjD;EACA,OAAOC,mBAAmB,CAACC,KAAK,KAAKC,SAAS,IAAI,OAAOF,mBAAmB,CAACC,KAAK,KAAK,UAAU;AACnG;AAEA,SAASE,2BAA2B,CAClCxC,GAAwB,EACxByC,oBAA0C,EACa;EAAA,IAAvDlB,wFAA4BhE,mCAA2B;EAEvD,MAAM;IAAEmF,QAAQ;IAAEC,SAAS;IAAEC,mBAAmB;IAAEd;EAAO,CAAE,GAAGW,oBAAoB;EAClFzC,GAAG,CAAC0C,QAAQ,GAAGpB,mBAAmB,CAACoB,QAAQ,EAAEnB,iBAAiB,CAAC;EAC/DvB,GAAG,CAAC2C,SAAS,GAAGA,SAAS;EACzB3C,GAAG,CAAC4C,mBAAmB,GAAGtB,mBAAmB,CAACsB,mBAAmB,EAAErB,iBAAiB,CAAC;EACrFvB,GAAG,CAAC8B,OAAO,GAAGA,OAAO;EAErB,OAAO9B,GAAG;AACZ;AAEA,SAAS6C,mBAAmB,CAC1B7C,GAAwB,EACxB8C,YAA8F;EAE9F9C,GAAG,CAAC+C,WAAW,GAAGD,YAAY,CAACC,WAAW;EAC1C/C,GAAG,CAACgD,SAAS,GAAGF,YAAY,CAACE,SAAS;EACtChD,GAAG,CAACiD,kBAAkB,GAAGH,YAAY,CAACI,YAAY;EAClD,MAAM;IAAEC,IAAI;IAAEC;EAAI,CAAE,GAAGC,mBAAW,CAACC,UAAU,CAACR,YAAY,CAACS,OAAO,CAAC,CAACC,UAAU,EAAE;EAChFxD,GAAG,CAACyD,UAAU,GAAGN,IAAI;EACrBnD,GAAG,CAAC0D,UAAU,GAAGN,IAAI;EACrB,IAAIN,YAAY,EAAEa,SAAS,EAAE;IAC3B3D,GAAG,CAAC2D,SAAS,GAAGb,YAAY,CAACa,SAAS,CAACC,WAAW,EAAE;EACtD;EACA5D,GAAG,CAAC6D,YAAY,GAAGf,YAAY,CAACe,YAAY;EAC5C7D,GAAG,CAAC8D,kBAAkB,GAAGhB,YAAY,CAACgB,kBAAkB;EAExD,OAAO9D,GAAG;AACZ;AAEA,SAAS+D,sBAAsB,CAAC/D,GAAwB,EAAEgE,KAAU;EAClE,MAAM;IAAEb,IAAI;IAAEC;EAAI,CAAE,GAAGC,mBAAW,CAACC,UAAU,CAACU,KAAK,CAACT,OAAO,CAAC,CAACC,UAAU,EAAE;EACzExD,GAAG,CAACyD,UAAU,GAAGN,IAAI;EACrBnD,GAAG,CAAC0D,UAAU,GAAGN,IAAI;EAErB,OAAOpD,GAAG;AACZ;AAEA,SAASiE,gBAAgB,CAACjE,GAAwB,EAAEkE,SAA4B;EAC9ElE,GAAG,CAACmE,UAAU,GAAGD,SAAS,CAACC,UAAU;EACrC,OAAOnE,GAAG;AACZ;AAEA,SAASoE,2BAA2B,CAClCpE,GAAwB,EACxBqE,oBAGyC;EAEzC,MAAM;IAAEC,OAAO;IAAEpB;EAAY,CAAE,GAAGmB,oBAAoB;EACtDrE,GAAG,CAACsE,OAAO,GAAGA,OAAO;EACrBtE,GAAG,CAACiD,kBAAkB,GAAGoB,oBAAoB,CAACnB,YAAY;EAC1D,MAAM;IAAEC,IAAI;IAAEC;EAAI,CAAE,GAAGC,mBAAW,CAACC,UAAU,CAACJ,YAAY,CAAC,CAACM,UAAU,EAAE;EACxExD,GAAG,CAACyD,UAAU,GAAGN,IAAI;EACrBnD,GAAG,CAAC0D,UAAU,GAAGN,IAAI;EACrB,OAAOpD,GAAG;AACZ;AAEA;AACA,SAAgBuE,mBAAmB,CACjCC,SAA8C,EACS;EAAA,IAAvDjD,wFAA4BhE,mCAA2B;EAEvD,IAAIyC,GAAG,GAA+BxC,MAAM,CAACiH,MAAM,CAAC,IAAI,CAAC;EAEzD,QAAQD,SAAS,CAAC9C,IAAI;IACpB,KAAKgD,oCAAwB;MAC3B1E,GAAG,GAAGwC,2BAA2B,CAACxC,GAAG,EAAEwE,SAAS,EAAEjD,iBAAiB,CAAC;MACpE,OAAOvB,GAAG;IACZ,KAAK0E,mCAAuB;MAC1B1E,GAAG,GAAGwC,2BAA2B,CAACxC,GAAG,EAAEwE,SAAS,EAAEjD,iBAAiB,CAAC;MACpEvB,GAAG,CAAC2E,OAAO,GAAGH,SAAS,CAACG,OAAO,EAAE7C,OAAO;MACxC,OAAO9B,GAAG;IACZ,KAAK0E,sCAA0B;MAC7B1E,GAAG,GAAGwC,2BAA2B,CAACxC,GAAG,EAAEwE,SAAS,EAAEjD,iBAAiB,CAAC;MACpEvB,GAAG,CAACyD,UAAU,GAAGe,SAAS,CAACf,UAAU;MACrCzD,GAAG,CAAC0D,UAAU,GAAGc,SAAS,CAACd,UAAU;MACrC,OAAO1D,GAAG;IACZ,KAAK0E,uCAA2B;MAC9B1E,GAAG,GAAGwC,2BAA2B,CAACxC,GAAG,EAAEwE,SAAS,EAAEjD,iBAAiB,CAAC;MACpEvB,GAAG,CAAC4E,eAAe,GAAGJ,SAAS,CAACI,eAAe;MAC/C,OAAO5E,GAAG;IACZ,KAAK0E,2BAAe;MAClB1E,GAAG,GAAG6C,mBAAmB,CAAC7C,GAAG,EAAEwE,SAAS,CAAC;MACzCxE,GAAG,CAAC8B,OAAO,GAAG,iBAAiB;MAC/B9B,GAAG,CAAC6E,OAAO,GAAGvD,mBAAmB,CAACkD,SAAS,CAACK,OAAO,EAAEtD,iBAAiB,EAAE;QAAEuD,OAAO,EAAE;MAAI,CAAE,CAAC;MAC1F9E,GAAG,CAAC6D,YAAY,GAAGW,SAAS,CAACX,YAAY;MACzC,OAAO7D,GAAG;IACZ,KAAK0E,6BAAiB;MACpB1E,GAAG,GAAG6C,mBAAmB,CAAC7C,GAAG,EAAEwE,SAAS,CAAC;MACzCxE,GAAG,CAAC8B,OAAO,GAAG,mBAAmB;MACjC9B,GAAG,CAAC+E,UAAU,GAAGP,SAAS,CAACQ,QAAQ;MACnChF,GAAG,CAACiF,KAAK,GAAG3D,mBAAmB,CAACkD,SAAS,CAACS,KAAK,EAAE1D,iBAAiB,EAAE;QAAEuD,OAAO,EAAE;MAAI,CAAE,CAAC;MACtF,OAAO9E,GAAG;IACZ,KAAK0E,0BAAc;MACjB1E,GAAG,GAAG6C,mBAAmB,CAAC7C,GAAG,EAAEwE,SAAS,CAAC;MACzCxE,GAAG,CAAC8B,OAAO,GAAG,gBAAgB;MAC9B9B,GAAG,CAAC+E,UAAU,GAAGP,SAAS,CAACQ,QAAQ;MACnChF,GAAG,CAAC2E,OAAO,GAAGH,SAAS,CAACG,OAAO,EAAE7C,OAAO,IAAI,YAAY;MACxD,OAAO9B,GAAG;IACZ,KAAK0E,mCAAuB;MAC1B1E,GAAG,GAAG+D,sBAAsB,CAAC/D,GAAG,EAAEwE,SAAS,CAAC;MAC5CxE,GAAG,CAAC8B,OAAO,GAAG,yBAAyB;MACvC,IAAI0C,SAAS,CAAChD,OAAO,EAAE;QACrB,MAAM;UAAE0D,aAAa;UAAEC,WAAW;UAAEC,WAAW;UAAEC,aAAa;UAAEC;QAAkB,CAAE,GAClFd,SAAS,CAAChD,OAAO;QACnBxB,GAAG,GAAG;UACJ,GAAGA,GAAG;UACNkF,aAAa;UACbC,WAAW;UACXC,WAAW;UACXC,aAAa;UACbC;SACD;MACH;MACA,OAAOtF,GAAG;IACZ,KAAK0E,iCAAqB;MACxB1E,GAAG,GAAG+D,sBAAsB,CAAC/D,GAAG,EAAEwE,SAAS,CAAC;MAC5CxE,GAAG,CAAC8B,OAAO,GAAG,uBAAuB;MACrC,OAAO9B,GAAG;IACZ,KAAK0E,mCAAuB;MAC1B1E,GAAG,GAAG+D,sBAAsB,CAAC/D,GAAG,EAAEwE,SAAS,CAAC;MAC5CxE,GAAG,CAAC8B,OAAO,GAAG,yBAAyB;MACvC,IAAI0C,SAAS,CAACb,SAAS,EAAE4B,SAAS,KAAK,UAAU,EAAE;QACjDvF,GAAG,CAAC2D,SAAS,GAAGa,SAAS,CAACb,SAAS,EAAEC,WAAW,EAAE;MACpD;MACA,OAAO5D,GAAG;IACZ,KAAK0E,kCAAsB;MACzB1E,GAAG,GAAG+D,sBAAsB,CAAC/D,GAAG,EAAEwE,SAAS,CAAC;MAC5CxE,GAAG,CAAC8B,OAAO,GAAG,wBAAwB;MACtC,OAAO9B,GAAG;IACZ,KAAK0E,8BAAkB;MACrB1E,GAAG,GAAG+D,sBAAsB,CAAC/D,GAAG,EAAEwE,SAAS,CAAC;MAC5CxE,GAAG,CAAC8B,OAAO,GAAG,oBAAoB;MAClC9B,GAAG,CAACiD,kBAAkB,GAAGuB,SAAS,CAACtB,YAAY;MAC/C,OAAOlD,GAAG;IACZ,KAAK0E,4BAAgB;MACnB1E,GAAG,GAAG+D,sBAAsB,CAAC/D,GAAG,EAAEwE,SAAS,CAAC;MAC5CxE,GAAG,CAAC8B,OAAO,GAAG,kBAAkB;MAChC9B,GAAG,CAACiD,kBAAkB,GAAGuB,SAAS,CAACtB,YAAY;MAC/ClD,GAAG,CAAC+E,UAAU,GAAGP,SAAS,CAACO,UAAU;MACrC,OAAO/E,GAAG;IACZ,KAAK0E,6BAAiB;MACpB1E,GAAG,GAAG+D,sBAAsB,CAAC/D,GAAG,EAAEwE,SAAS,CAAC;MAC5CxE,GAAG,CAAC8B,OAAO,GAAG,mBAAmB;MACjC9B,GAAG,CAACiD,kBAAkB,GAAGuB,SAAS,CAACtB,YAAY;MAC/C,QAAQsB,SAAS,CAACgB,MAAM;QACtB,KAAK,OAAO;UACVxF,GAAG,CAACwF,MAAM,GAAG,sDAAsD;UACnE;QACF,KAAK,MAAM;UACTxF,GAAG,CAACwF,MAAM,GACR,uFAAuF;UACzF;QACF,KAAK,OAAO;UACVxF,GAAG,CAACwF,MAAM,GAAG,8CAA8C;UAC3D,IAAIhB,SAAS,CAACiB,KAAK,EAAE;YACnBzF,GAAG,CAACyF,KAAK,GAAGjB,SAAS,CAACiB,KAAK;UAC7B;UACA;QACF,KAAK,YAAY;UACfzF,GAAG,CAACwF,MAAM,GAAG,4BAA4B;UACzC;QACF;UACExF,GAAG,CAACwF,MAAM,GAAG,yBAAyBhB,SAAS,CAACgB,MAAM,EAAE;MAAC;MAE7D,OAAOxF,GAAG;IACZ,KAAK0E,wCAA4B;MAC/B1E,GAAG,GAAG+D,sBAAsB,CAAC/D,GAAG,EAAEwE,SAAS,CAAC;MAC5CxE,GAAG,CAAC8B,OAAO,GAAG,6BAA6B;MAC3C,OAAO9B,GAAG;IACZ,KAAK0E,uCAA2B;MAC9B1E,GAAG,GAAG+D,sBAAsB,CAAC/D,GAAG,EAAEwE,SAAS,CAAC;MAC5CxE,GAAG,CAAC8B,OAAO,GAAG,4BAA4B;MAC1C,QAAQ0C,SAAS,CAACgB,MAAM;QACtB,KAAK,YAAY;UACfxF,GAAG,CAACwF,MAAM,GAAG,4BAA4B;UACzC;QACF,KAAK,SAAS;UACZxF,GAAG,CAACwF,MAAM,GAAG,oEAAoE;UACjF;QACF,KAAK,iBAAiB;UACpBxF,GAAG,CAACwF,MAAM,GAAG,8DAA8D;UAC3E,IAAIhB,SAAS,CAACiB,KAAK,EAAE;YACnBzF,GAAG,CAACyF,KAAK,GAAGjB,SAAS,CAACiB,KAAK;UAC7B;UACA;QACF;UACEzF,GAAG,CAACwF,MAAM,GAAG,yBAAyBhB,SAAS,CAACgB,MAAM,EAAE;MAAC;MAE7DxF,GAAG,CAAC+E,UAAU,GAAGP,SAAS,CAACO,UAAU;MACrC,OAAO/E,GAAG;IACZ,KAAK0E,kCAAsB;MACzB1E,GAAG,GAAG+D,sBAAsB,CAAC/D,GAAG,EAAEwE,SAAS,CAAC;MAC5CxE,GAAG,CAAC8B,OAAO,GAAG,wBAAwB;MACtC9B,GAAG,CAACiD,kBAAkB,GAAGuB,SAAS,CAACtB,YAAY;MAC/ClD,GAAG,CAAC+E,UAAU,GAAGP,SAAS,CAACO,UAAU;MACrC,OAAO/E,GAAG;IACZ,KAAK0E,iCAAqB;MACxB1E,GAAG,GAAG+D,sBAAsB,CAAC/D,GAAG,EAAEwE,SAAS,CAAC;MAC5CxE,GAAG,CAAC8B,OAAO,GAAG,uBAAuB;MACrC9B,GAAG,CAACiD,kBAAkB,GAAGuB,SAAS,CAACtB,YAAY;MAC/C,OAAOlD,GAAG;IACZ,KAAK0E,0BAAc;MACjB1E,GAAG,GAAGiE,gBAAgB,CAACjE,GAAG,EAAEwE,SAAS,CAAC;MACtCxE,GAAG,GAAG+D,sBAAsB,CAAC/D,GAAG,EAAEwE,SAAS,CAAC;MAC5CxE,GAAG,CAAC8B,OAAO,GAAG,4BAA4B;MAC1C,OAAO9B,GAAG;IACZ,KAAK0E,yBAAa;MAChB1E,GAAG,GAAGiE,gBAAgB,CAACjE,GAAG,EAAEwE,SAAS,CAAC;MACtCxE,GAAG,GAAG+D,sBAAsB,CAAC/D,GAAG,EAAEwE,SAAS,CAAC;MAC5CxE,GAAG,CAAC8B,OAAO,GAAG,2BAA2B;MACzC,OAAO9B,GAAG;IACZ,KAAK0E,oCAAwB;MAC3B1E,GAAG,GAAGiE,gBAAgB,CAACjE,GAAG,EAAEwE,SAAS,CAAC;MACtCxE,GAAG,GAAGoE,2BAA2B,CAACpE,GAAG,EAAEwE,SAAS,CAAC;MACjDxE,GAAG,CAAC8B,OAAO,GAAG,0BAA0B;MACxC,OAAO9B,GAAG;IACZ,KAAK0E,sCAA0B;MAC7B1E,GAAG,GAAGiE,gBAAgB,CAACjE,GAAG,EAAEwE,SAAS,CAAC;MACtCxE,GAAG,GAAGoE,2BAA2B,CAACpE,GAAG,EAAEwE,SAAS,CAAC;MACjDxE,GAAG,CAAC8B,OAAO,GAAG,4BAA4B;MAC1C9B,GAAG,CAAC+E,UAAU,GAAGP,SAAS,CAACQ,QAAQ;MACnChF,GAAG,CAAC8D,kBAAkB,GAAGU,SAAS,CAACV,kBAAkB;MACrD9D,GAAG,CAACiF,KAAK,GAAG3D,mBAAmB,CAACkD,SAAS,CAACS,KAAK,EAAE1D,iBAAiB,EAAE;QAAEuD,OAAO,EAAE;MAAI,CAAE,CAAC;MACtF,OAAO9E,GAAG;IACZ,KAAK0E,mCAAuB;MAC1B1E,GAAG,GAAGiE,gBAAgB,CAACjE,GAAG,EAAEwE,SAAS,CAAC;MACtCxE,GAAG,GAAGoE,2BAA2B,CAACpE,GAAG,EAAEwE,SAAS,CAAC;MACjDxE,GAAG,CAAC8B,OAAO,GAAG,yBAAyB;MACvC9B,GAAG,CAAC+E,UAAU,GAAGP,SAAS,CAACQ,QAAQ;MACnChF,GAAG,CAAC2E,OAAO,GAAGH,SAAS,CAACG,OAAO,EAAE7C,OAAO;MACxC,OAAO9B,GAAG;IACZ,KAAK0E,4BAAgB;MACnB1E,GAAG,GAAGiE,gBAAgB,CAACjE,GAAG,EAAEwE,SAAS,CAAC;MACtCxE,GAAG,CAAC8B,OAAO,GAAG,8BAA8B;MAC5C,OAAO9B,GAAG;IACZ,KAAK0E,2BAAe;MAClB1E,GAAG,GAAGiE,gBAAgB,CAACjE,GAAG,EAAEwE,SAAS,CAAC;MACtCxE,GAAG,CAAC8B,OAAO,GAAG,6BAA6B;MAC3C,OAAO9B,GAAG;IACZ,KAAK0E,wCAA4B;MAC/B1E,GAAG,GAAGiE,gBAAgB,CAACjE,GAAG,EAAEwE,SAAS,CAAC;MACtCxE,GAAG,CAAC8B,OAAO,GAAG,8BAA8B;MAC5C9B,GAAG,CAAC0F,mBAAmB,GAAG1F,GAAG,CAACiF,KAAK,GAAG3D,mBAAmB,CACvDkD,SAAS,CAACkB,mBAAmB,EAC7BnE,iBAAiB,CAClB;MACDvB,GAAG,CAAC2F,cAAc,GAAG3F,GAAG,CAACiF,KAAK,GAAG3D,mBAAmB,CAClDkD,SAAS,CAACmB,cAAc,EACxBpE,iBAAiB,CAClB;MACD,OAAOvB,GAAG;IACZ;MACE,KAAK,MAAM,CAAC4F,GAAG,EAAElH,KAAK,CAAC,IAAIlB,MAAM,CAACe,OAAO,CAACiG,SAAS,CAAC,EAAE;QACpD,IAAI9F,KAAK,IAAI,IAAI,EAAEsB,GAAG,CAAC4F,GAAG,CAAC,GAAGlH,KAAK;MACrC;EAAC;EAEL,OAAOsB,GAAG;AACZ;AAEA;AACA,MAAa6F,WAAW;EAkCtBvH,YAAYkD,OAA2B;IA7BvC,eAAU,GAAmC,IAAI;IAGjD;;;;IAIA,UAAK,GAAG,IAAI,CAACxB,GAAG,CAAC8F,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;IACpC;;;;IAIA,SAAI,GAAG,IAAI,CAAC9F,GAAG,CAAC8F,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC;IAClC;;;;IAIA,SAAI,GAAG,IAAI,CAAC9F,GAAG,CAAC8F,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC;IAClC;;;;IAIA,UAAK,GAAG,IAAI,CAAC9F,GAAG,CAAC8F,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;IACpC;;;;IAIA,UAAK,GAAG,IAAI,CAAC9F,GAAG,CAAC8F,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;IAGlC,IAAI,CAACC,mBAAmB,GAAGvE,OAAO,CAACuE,mBAAmB;IACtD,IAAI,CAACxE,iBAAiB,GAAGC,OAAO,CAACD,iBAAiB;IAClD,IAAI,CAACyE,cAAc,GAAGxE,OAAO,CAACwE,cAAc;IAC5C,IAAI,CAACC,sBAAsB,GAAGzE,OAAO,CAACyE,sBAAsB;IAC5D,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,uBAAuB,EAAE;EAClD;EAEAA,uBAAuB;IACrB,MAAMD,UAAU,GAAG1I,MAAM,EAAE;IAC3B,KAAK,MAAM4I,SAAS,IAAI5I,MAAM,CAACiC,MAAM,CAAClC,8BAAsB,CAAC,EAAE;MAC7D2I,UAAU,CAACE,SAAS,CAAC,GAAG,EAAE;MAC1B,KAAK,MAAMC,aAAa,IAAI7I,MAAM,CAACiC,MAAM,CAAClC,qBAAa,CAAC,EAAE;QACxD2I,UAAU,CAACE,SAAS,CAAC,CAACC,aAAa,CAAC,GAClCpF,eAAe,CAACoF,aAAa,EAAE,IAAI,CAACN,mBAAmB,CAACK,SAAS,CAAC,CAAC,IAAI,CAAC;MAC5E;IACF;IACA,OAAOF,UAAU;EACnB;EAEAI,iBAAiB;IACf,KAAK,MAAMF,SAAS,IAAI5I,MAAM,CAACiC,MAAM,CAAClC,8BAAsB,CAAC,EAAE;MAC7D,IAAI,CAACwI,mBAAmB,CAACK,SAAS,CAAC,GAAG7I,qBAAa,CAACY,GAAG;MACvD,KAAK,MAAMkI,aAAa,IAAI7I,MAAM,CAACiC,MAAM,CAAClC,qBAAa,CAAC,EAAE;QACxD,IAAI,CAAC2I,UAAU,CAACE,SAAS,CAAC,CAACC,aAAa,CAAC,GAAG,KAAK;MACnD;IACF;EACF;EAEQE,sBAAsB,CAACd,KAAY;IACzC,IAAI,IAAI,CAACQ,sBAAsB,EAAE;MAC/B,IAAI,CAACK,iBAAiB,EAAE;MACxB,IAAI,CAACE,eAAe,EAAE;MACtB;IACF;IACA,IAAI,CAACR,cAAc,GAAGnG,iBAAiB,CAACY,OAAO,CAACC,MAAM,CAAC;IACvD,IAAI,CAACuF,sBAAsB,GAAG,IAAI;IAClC,IAAI,CAACO,eAAe,EAAE;IACtB,IAAI,CAACf,KAAK,CAAClI,8BAAsB,CAAC8B,MAAM,EAAE;MACxCiD,KAAK,EAAE;QACL,OAAO;UACLR,OAAO,EAAE,kEAAkE;UAC3E2D,KAAK,EAAEA,KAAK,CAAC3D;SACd;MACH;KACD,CAAC;IACF,IAAI,CAACwE,iBAAiB,EAAE;IACxB,IAAI,CAACE,eAAe,EAAE;EACxB;EAEQA,eAAe;IACrB,IAAI,CAACC,UAAU,GAAG,IAAI;EACxB;EAEAC,OAAO,CAACN,SAAiC,EAAEvH,QAAuB;IAChE,IAAIA,QAAQ,KAAKtB,qBAAa,CAACY,GAAG,EAAE,OAAO,KAAK;IAChD,OAAO,IAAI,CAAC+H,UAAU,CAACE,SAAS,CAAC,CAACvH,QAAQ,CAAC;EAC7C;EAEQmB,GAAG,CACTnB,QAAuB,EACvBuH,SAAiC,EACjCtE,OAA0B;IAE1B,IAAI,CAAC,IAAI,CAAC4E,OAAO,CAACN,SAAS,EAAEvH,QAAQ,CAAC,EAAE;IAExC,IAAI8H,UAAU,GAAQ;MAAEC,CAAC,EAAE,IAAIC,IAAI,EAAE;MAAEC,CAAC,EAAEV,SAAS;MAAE7G,CAAC,EAAEV;IAAQ,CAAE;IAClE,IAAI,OAAOiD,OAAO,KAAK,QAAQ,EAAE;MAC/B6E,UAAU,CAAC7E,OAAO,GAAGA,OAAO;IAC9B,CAAC,MAAM,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;MACtC,IAAIK,gBAAgB,CAACL,OAAO,CAAC,EAAE;QAC7B6E,UAAU,GAAG;UAAE,GAAGA,UAAU;UAAE,GAAG7E,OAAO,CAACQ,KAAK;QAAE,CAAE;MACpD,CAAC,MAAM;QACLqE,UAAU,GAAG;UAAE,GAAGA,UAAU;UAAE,GAAGpC,mBAAmB,CAACzC,OAAO,EAAE,IAAI,CAACP,iBAAiB;QAAC,CAAE;MACzF;IACF;IAEA,IAAI,yBAAa,EAAC,IAAI,CAACkF,UAAU,CAAC,EAAE;MAClC,IAAI,CAACA,UAAU,GAAG,IAAI,CAACA,UAAU,CAE9BM,IAAI,CAAC,MAAM,IAAI,CAACf,cAAc,CAACjG,KAAK,CAAC4G,UAAU,CAAC,CAAC,CAEjDI,IAAI,CAAC,IAAI,CAACP,eAAe,CAACV,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAACS,sBAAsB,CAACT,IAAI,CAAC,IAAI,CAAC,CAAC;MAChF;IACF;IAEA,IAAI;MACF,MAAMkB,SAAS,GAAG,IAAI,CAAChB,cAAc,CAACjG,KAAK,CAAC4G,UAAU,CAAC;MACvD,IAAI,yBAAa,EAACK,SAAS,CAAC,EAAE;QAC5B,IAAI,CAACP,UAAU,GAAGO,SAAS,CAACD,IAAI,CAC9B,IAAI,CAACP,eAAe,CAACV,IAAI,CAAC,IAAI,CAAC,EAC/B,IAAI,CAACS,sBAAsB,CAACT,IAAI,CAAC,IAAI,CAAC,CACvC;MACH;IACF,CAAC,CAAC,OAAOL,KAAK,EAAE;MACd,IAAI,CAACc,sBAAsB,CAACd,KAAK,CAAC;IACpC;EACF;EAEA;;;;;;;;;;;;;EAaA,OAAOwB,cAAc,CACnBC,UAAiC,EACjCC,aAA4C;IAE5C;IACA,MAAMC,eAAe,GAAG/G,cAAc,CAAC6G,UAAU,EAAEC,aAAa,CAAC;IACjE,MAAME,eAAe,GAAG;MACtB,GAAGH,UAAU;MACb,GAAGC,aAAa;MAChB5G,cAAc,EAAE6G,eAAe,CAAC7G,cAAc;MAC9CI,sBAAsB,EAAEyG,eAAe,CAACzG;KACzC;IACD,MAAMK,eAAe,GAAGH,4BAA4B,CAClDwG,eAAe,CAACC,6BAA6B,EAAEC,OAAO,EACtDF,eAAe,CAACG,eAAe,EAC/BjK,qBAAa,CAACY,GAAG,CAClB;IAED,OAAO;MACL4H,mBAAmB,EAAE;QACnBlB,OAAO,EAAEhE,4BAA4B,CACnCwG,eAAe,CAACC,6BAA6B,EAAEzC,OAAO,EACtDwC,eAAe,CAACI,mBAAmB,EACnCzG,eAAe,CAChB;QACD0G,QAAQ,EAAE7G,4BAA4B,CACpCwG,eAAe,CAACC,6BAA6B,EAAEI,QAAQ,EACvDL,eAAe,CAACM,oBAAoB,EACpC3G,eAAe,CAChB;QACD4G,eAAe,EAAE/G,4BAA4B,CAC3CwG,eAAe,CAACC,6BAA6B,EAAEM,eAAe,EAC9DP,eAAe,CAACQ,4BAA4B,EAC5C7G,eAAe,CAChB;QACD8G,UAAU,EAAEjH,4BAA4B,CACtCwG,eAAe,CAACC,6BAA6B,EAAEQ,UAAU,EACzDT,eAAe,CAACU,sBAAsB,EACtC/G,eAAe,CAChB;QACDgH,MAAM,EAAEnH,4BAA4B,CAClCwG,eAAe,CAACC,6BAA6B,EAAEU,MAAM,EACrDX,eAAe,CAACY,kBAAkB,EAClCjH,eAAe,CAChB;QACDuG,OAAO,EAAEvG;OACV;MACDO,iBAAiB,EACf8F,eAAe,CAACa,2BAA2B,IAC3C,gCAAoB,EAACb,eAAe,CAACc,+BAA+B,CAAC,IACrE,IAAI;MACNnC,cAAc,EAAEqB,eAAe,CAAC9G,cAAc;MAC9C0F,sBAAsB,EAAEoB,eAAe,CAAC1G;KACzC;EACH;;AAxMFpD","names":["exports","Object","freeze","EMERGENCY","ALERT","CRITICAL","ERROR","WARNING","NOTICE","INFORMATIONAL","DEBUG","TRACE","OFF","SeverityLevelMap","Map","constructor","entries","newEntries","level","value","push","getNumericSeverityLevel","severity","get","getSeverityLevelName","Infinity","COMMAND","TOPOLOGY","SERVER_SELECTION","CONNECTION","CLIENT","parseSeverityFromString","s","validSeverities","values","lowerSeverity","toLowerCase","includes","createStdioLogger","stream","write","log","cb","logLine","compact","breakLength","resolveLogPath","MONGODB_LOG_PATH","mongodbLogPath","test","process","stderr","mongodbLogPathIsStdErr","stdout","resolveSeverityConfiguration","clientOption","environmentOption","defaultSeverity","compareSeverity","s0","s1","s0Num","s1Num","stringifyWithMaxLen","maxDocumentLength","options","strToTruncate","name","bson_1","stringify","e","message","length","charCodeAt","codePointAt","slice","isLogConvertible","obj","objAsLogConvertible","toLog","undefined","attachServerSelectionFields","serverSelectionEvent","selector","operation","topologyDescription","attachCommandFields","commandEvent","commandName","requestId","driverConnectionId","connectionId","host","port","utils_1","fromString","address","toHostPort","serverHost","serverPort","serviceId","toHexString","databaseName","serverConnectionId","attachConnectionFields","event","attachSDAMFields","sdamEvent","topologyId","attachServerHeartbeatFields","serverHeartbeatEvent","awaited","defaultLogTransform","logObject","create","constants_1","failure","remainingTimeMS","command","relaxed","durationMS","duration","reply","maxIdleTimeMS","minPoolSize","maxPoolSize","maxConnecting","waitQueueTimeoutMS","_bsontype","reason","error","previousDescription","newDescription","key","MongoLogger","bind","componentSeverities","logDestination","logDestinationIsStdErr","severities","createLoggingSeverities","component","severityLevel","turnOffSeverities","logWriteFailureHandler","clearPendingLog","pendingLog","willLog","logMessage","t","Date","c","then","logResult","resolveOptions","envOptions","clientOptions","resolvedLogPath","combinedOptions","mongodbLogComponentSeverities","default","MONGODB_LOG_ALL","MONGODB_LOG_COMMAND","topology","MONGODB_LOG_TOPOLOGY","serverSelection","MONGODB_LOG_SERVER_SELECTION","connection","MONGODB_LOG_CONNECTION","client","MONGODB_LOG_CLIENT","mongodbLogMaxDocumentLength","MONGODB_LOG_MAX_DOCUMENT_LENGTH"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/mongo_logger.ts"],"sourcesContent":["import { inspect, promisify } from 'util';\n\nimport { type Document, EJSON, type EJSONOptions, type ObjectId } from './bson';\nimport type { CommandStartedEvent } from './cmap/command_monitoring_events';\nimport type {\n  ConnectionCheckedInEvent,\n  ConnectionCheckedOutEvent,\n  ConnectionCheckOutFailedEvent,\n  ConnectionCheckOutStartedEvent,\n  ConnectionClosedEvent,\n  ConnectionCreatedEvent,\n  ConnectionPoolClearedEvent,\n  ConnectionPoolClosedEvent,\n  ConnectionPoolCreatedEvent,\n  ConnectionPoolReadyEvent,\n  ConnectionReadyEvent\n} from './cmap/connection_pool_events';\nimport {\n  COMMAND_FAILED,\n  COMMAND_STARTED,\n  COMMAND_SUCCEEDED,\n  CONNECTION_CHECK_OUT_FAILED,\n  CONNECTION_CHECK_OUT_STARTED,\n  CONNECTION_CHECKED_IN,\n  CONNECTION_CHECKED_OUT,\n  CONNECTION_CLOSED,\n  CONNECTION_CREATED,\n  CONNECTION_POOL_CLEARED,\n  CONNECTION_POOL_CLOSED,\n  CONNECTION_POOL_CREATED,\n  CONNECTION_POOL_READY,\n  CONNECTION_READY,\n  SERVER_CLOSED,\n  SERVER_HEARTBEAT_FAILED,\n  SERVER_HEARTBEAT_STARTED,\n  SERVER_HEARTBEAT_SUCCEEDED,\n  SERVER_OPENING,\n  SERVER_SELECTION_FAILED,\n  SERVER_SELECTION_STARTED,\n  SERVER_SELECTION_SUCCEEDED,\n  TOPOLOGY_CLOSED,\n  TOPOLOGY_DESCRIPTION_CHANGED,\n  TOPOLOGY_OPENING,\n  WAITING_FOR_SUITABLE_SERVER\n} from './constants';\nimport type {\n  ServerClosedEvent,\n  ServerOpeningEvent,\n  TopologyClosedEvent,\n  TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent\n} from './sdam/events';\nimport type {\n  ServerSelectionEvent,\n  ServerSelectionFailedEvent,\n  ServerSelectionStartedEvent,\n  ServerSelectionSucceededEvent,\n  WaitingForSuitableServerEvent\n} from './sdam/server_selection_events';\nimport { HostAddress, isPromiseLike, parseUnsignedInteger } from './utils';\n\n/** @internal */\nexport const SeverityLevel = Object.freeze({\n  EMERGENCY: 'emergency',\n  ALERT: 'alert',\n  CRITICAL: 'critical',\n  ERROR: 'error',\n  WARNING: 'warn',\n  NOTICE: 'notice',\n  INFORMATIONAL: 'info',\n  DEBUG: 'debug',\n  TRACE: 'trace',\n  OFF: 'off'\n} as const);\n\n/** @internal */\nexport const DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */\nexport type SeverityLevel = (typeof SeverityLevel)[keyof typeof SeverityLevel];\n\n/** @internal */\nclass SeverityLevelMap extends Map<SeverityLevel | number, SeverityLevel | number> {\n  constructor(entries: [SeverityLevel | number, SeverityLevel | number][]) {\n    const newEntries: [number | SeverityLevel, SeverityLevel | number][] = [];\n    for (const [level, value] of entries) {\n      newEntries.push([value, level]);\n    }\n\n    newEntries.push(...entries);\n    super(newEntries);\n  }\n\n  getNumericSeverityLevel(severity: SeverityLevel): number {\n    return this.get(severity) as number;\n  }\n\n  getSeverityLevelName(level: number): SeverityLevel | undefined {\n    return this.get(level) as SeverityLevel | undefined;\n  }\n}\n\n/** @internal */\nexport const SEVERITY_LEVEL_MAP = new SeverityLevelMap([\n  [SeverityLevel.OFF, -Infinity],\n  [SeverityLevel.EMERGENCY, 0],\n  [SeverityLevel.ALERT, 1],\n  [SeverityLevel.CRITICAL, 2],\n  [SeverityLevel.ERROR, 3],\n  [SeverityLevel.WARNING, 4],\n  [SeverityLevel.NOTICE, 5],\n  [SeverityLevel.INFORMATIONAL, 6],\n  [SeverityLevel.DEBUG, 7],\n  [SeverityLevel.TRACE, 8]\n]);\n\n/** @internal */\nexport const MongoLoggableComponent = Object.freeze({\n  COMMAND: 'command',\n  TOPOLOGY: 'topology',\n  SERVER_SELECTION: 'serverSelection',\n  CONNECTION: 'connection',\n  CLIENT: 'client'\n} as const);\n\n/** @internal */\nexport type MongoLoggableComponent =\n  (typeof MongoLoggableComponent)[keyof typeof MongoLoggableComponent];\n\n/** @internal */\nexport interface MongoLoggerEnvOptions {\n  /** Severity level for command component */\n  MONGODB_LOG_COMMAND?: string;\n  /** Severity level for topology component */\n  MONGODB_LOG_TOPOLOGY?: string;\n  /** Severity level for server selection component */\n  MONGODB_LOG_SERVER_SELECTION?: string;\n  /** Severity level for CMAP */\n  MONGODB_LOG_CONNECTION?: string;\n  /** Severity level for client */\n  MONGODB_LOG_CLIENT?: string;\n  /** Default severity level to be if any of the above are unset */\n  MONGODB_LOG_ALL?: string;\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\n  MONGODB_LOG_MAX_DOCUMENT_LENGTH?: string;\n  /** Destination for log messages. Must be 'stderr', 'stdout'. Defaults to 'stderr'. */\n  MONGODB_LOG_PATH?: string;\n}\n\n/** @internal */\nexport interface LogComponentSeveritiesClientOptions {\n  /** Optional severity level for command component */\n  command?: SeverityLevel;\n  /** Optional severity level for topology component */\n  topology?: SeverityLevel;\n  /** Optionsl severity level for server selection component */\n  serverSelection?: SeverityLevel;\n  /** Optional severity level for connection component */\n  connection?: SeverityLevel;\n  /** Optional severity level for client component */\n  client?: SeverityLevel;\n  /** Optional default severity level to be used if any of the above are unset */\n  default?: SeverityLevel;\n}\n\n/** @internal */\nexport interface MongoLoggerMongoClientOptions {\n  /** Destination for log messages */\n  mongodbLogPath?: 'stdout' | 'stderr' | MongoDBLogWritable;\n  /** Severity levels for logger components */\n  mongodbLogComponentSeverities?: LogComponentSeveritiesClientOptions;\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\n  mongodbLogMaxDocumentLength?: number;\n}\n\n/** @internal */\nexport interface MongoLoggerOptions {\n  componentSeverities: {\n    /** Severity level for command component */\n    command: SeverityLevel;\n    /** Severity level for topology component */\n    topology: SeverityLevel;\n    /** Severity level for server selection component */\n    serverSelection: SeverityLevel;\n    /** Severity level for connection component */\n    connection: SeverityLevel;\n    /** Severity level for client component */\n    client: SeverityLevel;\n    /** Default severity level to be used if any of the above are unset */\n    default: SeverityLevel;\n  };\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\n  maxDocumentLength: number;\n  /** Destination for log messages. */\n  logDestination: MongoDBLogWritable;\n  /** For internal check to see if error should stop logging. */\n  logDestinationIsStdErr: boolean;\n}\n\n/**\n * Parses a string as one of SeverityLevel\n * @internal\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nexport function parseSeverityFromString(s?: string): SeverityLevel | null {\n  const validSeverities: string[] = Object.values(SeverityLevel);\n  const lowerSeverity = s?.toLowerCase();\n\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n    return lowerSeverity as SeverityLevel;\n  }\n\n  return null;\n}\n\n/** @internal */\nexport function createStdioLogger(stream: {\n  write: NodeJS.WriteStream['write'];\n}): MongoDBLogWritable {\n  return {\n    write: promisify((log: Log, cb: (error?: Error) => void): unknown => {\n      const logLine = inspect(log, { compact: true, breakLength: Infinity });\n      stream.write(`${logLine}\\n`, 'utf-8', cb);\n      return;\n    })\n  };\n}\n\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */\nfunction resolveLogPath(\n  { MONGODB_LOG_PATH }: MongoLoggerEnvOptions,\n  { mongodbLogPath }: MongoLoggerMongoClientOptions\n): { mongodbLogPath: MongoDBLogWritable; mongodbLogPathIsStdErr: boolean } {\n  if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n    return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n  }\n  if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n    return { mongodbLogPath: createStdioLogger(process.stdout), mongodbLogPathIsStdErr: false };\n  }\n\n  if (typeof mongodbLogPath === 'object' && typeof mongodbLogPath?.write === 'function') {\n    return { mongodbLogPath: mongodbLogPath, mongodbLogPathIsStdErr: false };\n  }\n\n  if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n    return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n  }\n  if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n    return { mongodbLogPath: createStdioLogger(process.stdout), mongodbLogPathIsStdErr: false };\n  }\n\n  return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n}\n\nfunction resolveSeverityConfiguration(\n  clientOption: string | undefined,\n  environmentOption: string | undefined,\n  defaultSeverity: SeverityLevel\n): SeverityLevel {\n  return (\n    parseSeverityFromString(clientOption) ??\n    parseSeverityFromString(environmentOption) ??\n    defaultSeverity\n  );\n}\n\n/** @internal */\nexport interface Log extends Record<string, any> {\n  t: Date;\n  c: MongoLoggableComponent;\n  s: SeverityLevel;\n  message?: string;\n}\n\n/**\n * @internal\n * TODO: NODE-5671 - remove internal flag and add API comments\n */\nexport interface MongoDBLogWritable {\n  write(log: Log): PromiseLike<unknown> | unknown;\n}\n\nfunction compareSeverity(s0: SeverityLevel, s1: SeverityLevel): 1 | 0 | -1 {\n  const s0Num = SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n  const s1Num = SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n\n  return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n\n/**\n * @internal\n * Must be separate from Events API due to differences in spec requirements for logging a command success\n */\nexport type LoggableCommandSucceededEvent = {\n  address: string;\n  connectionId?: string | number;\n  requestId: number;\n  duration: number;\n  commandName: string;\n  reply: Document | undefined;\n  serviceId?: ObjectId;\n  name: typeof COMMAND_SUCCEEDED;\n  serverConnectionId: bigint | null;\n  databaseName: string;\n};\n\n/**\n * @internal\n * Must be separate from Events API due to differences in spec requirements for logging a command failure\n */\nexport type LoggableCommandFailedEvent = {\n  address: string;\n  connectionId?: string | number;\n  requestId: number;\n  duration: number;\n  commandName: string;\n  failure: Error;\n  serviceId?: ObjectId;\n  name: typeof COMMAND_FAILED;\n  serverConnectionId: bigint | null;\n  databaseName: string;\n};\n\n/**\n * @internal\n * Must be separate from Events API due to differences in spec requirements for logging server heartbeat beginning\n */\nexport type LoggableServerHeartbeatStartedEvent = {\n  topologyId: number;\n  awaited: boolean;\n  connectionId: string;\n  name: typeof SERVER_HEARTBEAT_STARTED;\n};\n\n/**\n * @internal\n * Must be separate from Events API due to differences in spec requirements for logging server heartbeat success\n */\nexport type LoggableServerHeartbeatSucceededEvent = {\n  topologyId: number;\n  awaited: boolean;\n  connectionId: string;\n  reply: Document;\n  serverConnectionId: number | '<monitor>';\n  duration: number;\n  name: typeof SERVER_HEARTBEAT_SUCCEEDED;\n};\n\n/**\n * @internal\n * Must be separate from Events API due to differences in spec requirements for logging server heartbeat failure\n */\nexport type LoggableServerHeartbeatFailedEvent = {\n  topologyId: number;\n  awaited: boolean;\n  connectionId: string;\n  failure: Error;\n  duration: number;\n  name: typeof SERVER_HEARTBEAT_FAILED;\n};\n\ntype SDAMLoggableEvent =\n  | ServerClosedEvent\n  | LoggableServerHeartbeatFailedEvent\n  | LoggableServerHeartbeatStartedEvent\n  | LoggableServerHeartbeatSucceededEvent\n  | ServerOpeningEvent\n  | TopologyClosedEvent\n  | TopologyDescriptionChangedEvent\n  | TopologyOpeningEvent;\n\n/** @internal */\nexport type LoggableEvent =\n  | ServerSelectionStartedEvent\n  | ServerSelectionFailedEvent\n  | ServerSelectionSucceededEvent\n  | WaitingForSuitableServerEvent\n  | CommandStartedEvent\n  | LoggableCommandSucceededEvent\n  | LoggableCommandFailedEvent\n  | ConnectionPoolCreatedEvent\n  | ConnectionPoolReadyEvent\n  | ConnectionPoolClosedEvent\n  | ConnectionPoolClearedEvent\n  | ConnectionCreatedEvent\n  | ConnectionReadyEvent\n  | ConnectionClosedEvent\n  | ConnectionCheckedInEvent\n  | ConnectionCheckedOutEvent\n  | ConnectionCheckOutStartedEvent\n  | ConnectionCheckOutFailedEvent\n  | ServerClosedEvent\n  | LoggableServerHeartbeatFailedEvent\n  | LoggableServerHeartbeatStartedEvent\n  | LoggableServerHeartbeatSucceededEvent\n  | ServerOpeningEvent\n  | TopologyClosedEvent\n  | TopologyDescriptionChangedEvent\n  | TopologyOpeningEvent;\n\n/** @internal */\nexport interface LogConvertible extends Record<string, any> {\n  toLog(): Record<string, any>;\n}\n\n/** @internal */\nexport function stringifyWithMaxLen(\n  value: any,\n  maxDocumentLength: number,\n  options: EJSONOptions = {}\n): string {\n  let strToTruncate = '';\n\n  if (typeof value === 'string') {\n    strToTruncate = value;\n  } else if (typeof value === 'function') {\n    strToTruncate = value.name;\n  } else {\n    try {\n      strToTruncate = EJSON.stringify(value, options);\n    } catch (e) {\n      strToTruncate = `Extended JSON serialization failed with: ${e.message}`;\n    }\n  }\n\n  // handle truncation that occurs in the middle of multi-byte codepoints\n  if (\n    maxDocumentLength !== 0 &&\n    strToTruncate.length > maxDocumentLength &&\n    strToTruncate.charCodeAt(maxDocumentLength - 1) !==\n      strToTruncate.codePointAt(maxDocumentLength - 1)\n  ) {\n    maxDocumentLength--;\n    if (maxDocumentLength === 0) {\n      return '';\n    }\n  }\n\n  return maxDocumentLength !== 0 && strToTruncate.length > maxDocumentLength\n    ? `${strToTruncate.slice(0, maxDocumentLength)}...`\n    : strToTruncate;\n}\n\n/** @internal */\nexport type Loggable = LoggableEvent | LogConvertible;\n\nfunction isLogConvertible(obj: Loggable): obj is LogConvertible {\n  const objAsLogConvertible = obj as LogConvertible;\n  // eslint-disable-next-line no-restricted-syntax\n  return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\n\nfunction attachServerSelectionFields(\n  log: Record<string, any>,\n  serverSelectionEvent: ServerSelectionEvent,\n  maxDocumentLength: number = DEFAULT_MAX_DOCUMENT_LENGTH\n) {\n  const { selector, operation, topologyDescription, message } = serverSelectionEvent;\n  log.selector = stringifyWithMaxLen(selector, maxDocumentLength);\n  log.operation = operation;\n  log.topologyDescription = stringifyWithMaxLen(topologyDescription, maxDocumentLength);\n  log.message = message;\n\n  return log;\n}\n\nfunction attachCommandFields(\n  log: Record<string, any>,\n  commandEvent: CommandStartedEvent | LoggableCommandSucceededEvent | LoggableCommandFailedEvent\n) {\n  log.commandName = commandEvent.commandName;\n  log.requestId = commandEvent.requestId;\n  log.driverConnectionId = commandEvent.connectionId;\n  const { host, port } = HostAddress.fromString(commandEvent.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  if (commandEvent?.serviceId) {\n    log.serviceId = commandEvent.serviceId.toHexString();\n  }\n  log.databaseName = commandEvent.databaseName;\n  log.serverConnectionId = commandEvent.serverConnectionId;\n\n  return log;\n}\n\nfunction attachConnectionFields(log: Record<string, any>, event: any) {\n  const { host, port } = HostAddress.fromString(event.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n\n  return log;\n}\n\nfunction attachSDAMFields(log: Record<string, any>, sdamEvent: SDAMLoggableEvent) {\n  log.topologyId = sdamEvent.topologyId;\n  return log;\n}\n\nfunction attachServerHeartbeatFields(\n  log: Record<string, any>,\n  serverHeartbeatEvent:\n    | LoggableServerHeartbeatFailedEvent\n    | LoggableServerHeartbeatStartedEvent\n    | LoggableServerHeartbeatSucceededEvent\n) {\n  const { awaited, connectionId } = serverHeartbeatEvent;\n  log.awaited = awaited;\n  log.driverConnectionId = serverHeartbeatEvent.connectionId;\n  const { host, port } = HostAddress.fromString(connectionId).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  return log;\n}\n\n/** @internal */\nexport function defaultLogTransform(\n  logObject: LoggableEvent | Record<string, any>,\n  maxDocumentLength: number = DEFAULT_MAX_DOCUMENT_LENGTH\n): Omit<Log, 's' | 't' | 'c'> {\n  let log: Omit<Log, 's' | 't' | 'c'> = Object.create(null);\n\n  switch (logObject.name) {\n    case SERVER_SELECTION_STARTED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      return log;\n    case SERVER_SELECTION_FAILED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.failure = logObject.failure?.message;\n      return log;\n    case SERVER_SELECTION_SUCCEEDED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.serverHost = logObject.serverHost;\n      log.serverPort = logObject.serverPort;\n      return log;\n    case WAITING_FOR_SUITABLE_SERVER:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.remainingTimeMS = logObject.remainingTimeMS;\n      return log;\n    case COMMAND_STARTED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command started';\n      log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength, { relaxed: true });\n      log.databaseName = logObject.databaseName;\n      return log;\n    case COMMAND_SUCCEEDED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command succeeded';\n      log.durationMS = logObject.duration;\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, { relaxed: true });\n      return log;\n    case COMMAND_FAILED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command failed';\n      log.durationMS = logObject.duration;\n      log.failure = logObject.failure?.message ?? '(redacted)';\n      return log;\n    case CONNECTION_POOL_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool created';\n      if (logObject.options) {\n        const { maxIdleTimeMS, minPoolSize, maxPoolSize, maxConnecting, waitQueueTimeoutMS } =\n          logObject.options;\n        log = {\n          ...log,\n          maxIdleTimeMS,\n          minPoolSize,\n          maxPoolSize,\n          maxConnecting,\n          waitQueueTimeoutMS\n        };\n      }\n      return log;\n    case CONNECTION_POOL_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool ready';\n      return log;\n    case CONNECTION_POOL_CLEARED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool cleared';\n      if (logObject.serviceId?._bsontype === 'ObjectId') {\n        log.serviceId = logObject.serviceId?.toHexString();\n      }\n      return log;\n    case CONNECTION_POOL_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool closed';\n      return log;\n    case CONNECTION_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection created';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case CONNECTION_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection ready';\n      log.driverConnectionId = logObject.connectionId;\n      log.durationMS = logObject.durationMS;\n      return log;\n    case CONNECTION_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection closed';\n      log.driverConnectionId = logObject.connectionId;\n      switch (logObject.reason) {\n        case 'stale':\n          log.reason = 'Connection became stale because the pool was cleared';\n          break;\n        case 'idle':\n          log.reason =\n            'Connection has been available but unused for longer than the configured max idle time';\n          break;\n        case 'error':\n          log.reason = 'An error occurred while using the connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        default:\n          log.reason = `Unknown close reason: ${logObject.reason}`;\n      }\n      return log;\n    case CONNECTION_CHECK_OUT_STARTED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout started';\n      return log;\n    case CONNECTION_CHECK_OUT_FAILED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout failed';\n      switch (logObject.reason) {\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        case 'timeout':\n          log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n          break;\n        case 'connectionError':\n          log.reason = 'An error occurred while trying to establish a new connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        default:\n          log.reason = `Unknown close reason: ${logObject.reason}`;\n      }\n      log.durationMS = logObject.durationMS;\n      return log;\n    case CONNECTION_CHECKED_OUT:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked out';\n      log.driverConnectionId = logObject.connectionId;\n      log.durationMS = logObject.durationMS;\n      return log;\n    case CONNECTION_CHECKED_IN:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked in';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case SERVER_OPENING:\n      log = attachSDAMFields(log, logObject);\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Starting server monitoring';\n      return log;\n    case SERVER_CLOSED:\n      log = attachSDAMFields(log, logObject);\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Stopped server monitoring';\n      return log;\n    case SERVER_HEARTBEAT_STARTED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat started';\n      return log;\n    case SERVER_HEARTBEAT_SUCCEEDED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat succeeded';\n      log.durationMS = logObject.duration;\n      log.serverConnectionId = logObject.serverConnectionId;\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, { relaxed: true });\n      return log;\n    case SERVER_HEARTBEAT_FAILED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat failed';\n      log.durationMS = logObject.duration;\n      log.failure = logObject.failure?.message;\n      return log;\n    case TOPOLOGY_OPENING:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Starting topology monitoring';\n      return log;\n    case TOPOLOGY_CLOSED:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Stopped topology monitoring';\n      return log;\n    case TOPOLOGY_DESCRIPTION_CHANGED:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Topology description changed';\n      log.previousDescription = log.reply = stringifyWithMaxLen(\n        logObject.previousDescription,\n        maxDocumentLength\n      );\n      log.newDescription = log.reply = stringifyWithMaxLen(\n        logObject.newDescription,\n        maxDocumentLength\n      );\n      return log;\n    default:\n      for (const [key, value] of Object.entries(logObject)) {\n        if (value != null) log[key] = value;\n      }\n  }\n  return log;\n}\n\n/** @internal */\nexport class MongoLogger {\n  componentSeverities: Record<MongoLoggableComponent, SeverityLevel>;\n  maxDocumentLength: number;\n  logDestination: MongoDBLogWritable;\n  logDestinationIsStdErr: boolean;\n  pendingLog: PromiseLike<unknown> | unknown = null;\n  private severities: Record<MongoLoggableComponent, Record<SeverityLevel, boolean>>;\n\n  /**\n   * This method should be used when logging errors that do not have a public driver API for\n   * reporting errors.\n   */\n  error = this.log.bind(this, 'error');\n  /**\n   * This method should be used to log situations where undesirable application behaviour might\n   * occur. For example, failing to end sessions on `MongoClient.close`.\n   */\n  warn = this.log.bind(this, 'warn');\n  /**\n   * This method should be used to report high-level information about normal driver behaviour.\n   * For example, the creation of a `MongoClient`.\n   */\n  info = this.log.bind(this, 'info');\n  /**\n   * This method should be used to report information that would be helpful when debugging an\n   * application. For example, a command starting, succeeding or failing.\n   */\n  debug = this.log.bind(this, 'debug');\n  /**\n   * This method should be used to report fine-grained details related to logic flow. For example,\n   * entering and exiting a function body.\n   */\n  trace = this.log.bind(this, 'trace');\n\n  constructor(options: MongoLoggerOptions) {\n    this.componentSeverities = options.componentSeverities;\n    this.maxDocumentLength = options.maxDocumentLength;\n    this.logDestination = options.logDestination;\n    this.logDestinationIsStdErr = options.logDestinationIsStdErr;\n    this.severities = this.createLoggingSeverities();\n  }\n\n  createLoggingSeverities(): Record<MongoLoggableComponent, Record<SeverityLevel, boolean>> {\n    const severities = Object();\n    for (const component of Object.values(MongoLoggableComponent)) {\n      severities[component] = {};\n      for (const severityLevel of Object.values(SeverityLevel)) {\n        severities[component][severityLevel] =\n          compareSeverity(severityLevel, this.componentSeverities[component]) <= 0;\n      }\n    }\n    return severities;\n  }\n\n  turnOffSeverities() {\n    for (const component of Object.values(MongoLoggableComponent)) {\n      this.componentSeverities[component] = SeverityLevel.OFF;\n      for (const severityLevel of Object.values(SeverityLevel)) {\n        this.severities[component][severityLevel] = false;\n      }\n    }\n  }\n\n  private logWriteFailureHandler(error: Error) {\n    if (this.logDestinationIsStdErr) {\n      this.turnOffSeverities();\n      this.clearPendingLog();\n      return;\n    }\n    this.logDestination = createStdioLogger(process.stderr);\n    this.logDestinationIsStdErr = true;\n    this.clearPendingLog();\n    this.error(MongoLoggableComponent.CLIENT, {\n      toLog: function () {\n        return {\n          message: 'User input for mongodbLogPath is now invalid. Logging is halted.',\n          error: error.message\n        };\n      }\n    });\n    this.turnOffSeverities();\n    this.clearPendingLog();\n  }\n\n  private clearPendingLog() {\n    this.pendingLog = null;\n  }\n\n  willLog(component: MongoLoggableComponent, severity: SeverityLevel): boolean {\n    if (severity === SeverityLevel.OFF) return false;\n    return this.severities[component][severity];\n  }\n\n  private log(\n    severity: SeverityLevel,\n    component: MongoLoggableComponent,\n    message: Loggable | string\n  ): void {\n    if (!this.willLog(component, severity)) return;\n\n    let logMessage: Log = { t: new Date(), c: component, s: severity };\n    if (typeof message === 'string') {\n      logMessage.message = message;\n    } else if (typeof message === 'object') {\n      if (isLogConvertible(message)) {\n        logMessage = { ...logMessage, ...message.toLog() };\n      } else {\n        logMessage = { ...logMessage, ...defaultLogTransform(message, this.maxDocumentLength) };\n      }\n    }\n\n    if (isPromiseLike(this.pendingLog)) {\n      this.pendingLog = this.pendingLog\n\n        .then(() => this.logDestination.write(logMessage))\n\n        .then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n      return;\n    }\n\n    try {\n      const logResult = this.logDestination.write(logMessage);\n      if (isPromiseLike(logResult)) {\n        this.pendingLog = logResult.then(\n          this.clearPendingLog.bind(this),\n          this.logWriteFailureHandler.bind(this)\n        );\n      }\n    } catch (error) {\n      this.logWriteFailureHandler(error);\n    }\n  }\n\n  /**\n   * Merges options set through environment variables and the MongoClient, preferring environment\n   * variables when both are set, and substituting defaults for values not set. Options set in\n   * constructor take precedence over both environment variables and MongoClient options.\n   *\n   * @remarks\n   * When parsing component severity levels, invalid values are treated as unset and replaced with\n   * the default severity.\n   *\n   * @param envOptions - options set for the logger from the environment\n   * @param clientOptions - options set for the logger in the MongoClient options\n   * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n   */\n  static resolveOptions(\n    envOptions: MongoLoggerEnvOptions,\n    clientOptions: MongoLoggerMongoClientOptions\n  ): MongoLoggerOptions {\n    // client options take precedence over env options\n    const resolvedLogPath = resolveLogPath(envOptions, clientOptions);\n    const combinedOptions = {\n      ...envOptions,\n      ...clientOptions,\n      mongodbLogPath: resolvedLogPath.mongodbLogPath,\n      mongodbLogPathIsStdErr: resolvedLogPath.mongodbLogPathIsStdErr\n    };\n    const defaultSeverity = resolveSeverityConfiguration(\n      combinedOptions.mongodbLogComponentSeverities?.default,\n      combinedOptions.MONGODB_LOG_ALL,\n      SeverityLevel.OFF\n    );\n\n    return {\n      componentSeverities: {\n        command: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.command,\n          combinedOptions.MONGODB_LOG_COMMAND,\n          defaultSeverity\n        ),\n        topology: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.topology,\n          combinedOptions.MONGODB_LOG_TOPOLOGY,\n          defaultSeverity\n        ),\n        serverSelection: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.serverSelection,\n          combinedOptions.MONGODB_LOG_SERVER_SELECTION,\n          defaultSeverity\n        ),\n        connection: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.connection,\n          combinedOptions.MONGODB_LOG_CONNECTION,\n          defaultSeverity\n        ),\n        client: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.client,\n          combinedOptions.MONGODB_LOG_CLIENT,\n          defaultSeverity\n        ),\n        default: defaultSeverity\n      },\n      maxDocumentLength:\n        combinedOptions.mongodbLogMaxDocumentLength ??\n        parseUnsignedInteger(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ??\n        1000,\n      logDestination: combinedOptions.mongodbLogPath,\n      logDestinationIsStdErr: combinedOptions.mongodbLogPathIsStdErr\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}