{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerCapabilities = exports.Topology = void 0;\nconst connection_string_1 = require(\"../connection_string\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_logger_1 = require(\"../mongo_logger\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst read_preference_1 = require(\"../read_preference\");\nconst timeout_1 = require(\"../timeout\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst server_1 = require(\"./server\");\nconst server_description_1 = require(\"./server_description\");\nconst server_selection_1 = require(\"./server_selection\");\nconst server_selection_events_1 = require(\"./server_selection_events\");\nconst srv_polling_1 = require(\"./srv_polling\");\nconst topology_description_1 = require(\"./topology_description\");\n// Global state\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nclass Topology extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @param seedlist - a list of HostAddress instances to connect to\n   */\n  constructor(client, seeds, options) {\n    super();\n    this.client = client;\n    // Options should only be undefined in tests, MongoClient will always have defined options\n    options = options ?? {\n      hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n      ...Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries()),\n      ...Object.fromEntries(connection_string_1.FEATURE_FLAGS.entries())\n    };\n    if (typeof seeds === 'string') {\n      seeds = [utils_1.HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n    const seedlist = [];\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(utils_1.HostAddress.fromString(seed));\n      } else if (seed instanceof utils_1.HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n      }\n    }\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n    const selectedHosts = options.srvMaxHosts == null || options.srvMaxHosts === 0 || options.srvMaxHosts >= seedlist.length ? seedlist : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n    const serverDescriptions = new Map();\n    for (const hostAddress of selectedHosts) {\n      serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n    }\n    this[kWaitQueue] = new utils_1.List();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: common_1.STATE_CLOSED,\n      // the topology description\n      description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      credentials: options?.credentials,\n      clusterTime: undefined,\n      // timer management\n      connectionTimers: new Set(),\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n    this.mongoLogger = client.mongoLogger;\n    this.component = 'topology';\n    if (options.srvHost && !options.loadBalanced) {\n      this.s.srvPoller = options.srvPoller ?? new srv_polling_1.SrvPoller({\n        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n        srvHost: options.srvHost,\n        srvMaxHosts: options.srvMaxHosts,\n        srvServiceName: options.srvServiceName\n      });\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n    this.connectionLock = undefined;\n  }\n  detectShardedTopology(event) {\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n    const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n    const srvListeners = this.s.srvPoller?.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n    if (transitionToSharded && !listeningToSrvPolling) {\n      this.s.srvPoller?.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      this.s.srvPoller?.start();\n    }\n  }\n  detectSrvRecords(ev) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n    updateServers(this);\n    this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n  }\n  /**\n   * @returns A `TopologyDescription` for this topology\n   */\n  get description() {\n    return this.s.description;\n  }\n  get loadBalanced() {\n    return this.s.options.loadBalanced;\n  }\n  get serverApi() {\n    return this.s.options.serverApi;\n  }\n  get capabilities() {\n    return new ServerCapabilities(this.lastHello());\n  }\n  /** Initiate server connect */\n  async connect(options) {\n    this.connectionLock ??= this._connect(options);\n    try {\n      await this.connectionLock;\n      return this;\n    } finally {\n      this.connectionLock = undefined;\n    }\n    return this;\n  }\n  async _connect(options) {\n    options = options ?? {};\n    if (this.s.state === common_1.STATE_CONNECTED) {\n      return this;\n    }\n    stateTransition(this, common_1.STATE_CONNECTING);\n    // emit SDAM monitoring events\n    this.emitAndLog(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n    // emit an event for the topology change\n    this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown),\n    // initial is always Unknown\n    this.s.description));\n    // connect all known servers, then attempt server selection to connect\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    this.s.servers = new Map(serverDescriptions.map(serverDescription => [serverDescription.address, createAndConnectServer(this, serverDescription)]));\n    // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n    const readPreference = options.readPreference ?? read_preference_1.ReadPreference.primary;\n    const selectServerOptions = {\n      operationName: 'ping',\n      ...options\n    };\n    try {\n      const server = await this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), selectServerOptions);\n      const skipPingOnConnect = this.s.options[Symbol.for('@@mdb.skipPingOnConnect')] === true;\n      if (!skipPingOnConnect && server && this.s.credentials) {\n        await server.command((0, utils_1.ns)('admin.$cmd'), {\n          ping: 1\n        }, {});\n        stateTransition(this, common_1.STATE_CONNECTED);\n        this.emit(Topology.OPEN, this);\n        this.emit(Topology.CONNECT, this);\n        return this;\n      }\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Topology.OPEN, this);\n      this.emit(Topology.CONNECT, this);\n      return this;\n    } catch (error) {\n      this.close();\n      throw error;\n    }\n  }\n  /** Close this topology */\n  close() {\n    if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n      return;\n    }\n    for (const server of this.s.servers.values()) {\n      destroyServer(server, this);\n    }\n    this.s.servers.clear();\n    stateTransition(this, common_1.STATE_CLOSING);\n    drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n    (0, common_1.drainTimerQueue)(this.s.connectionTimers);\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n      this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n    }\n    this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    stateTransition(this, common_1.STATE_CLOSED);\n    // emit an event for close\n    this.emitAndLog(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n  }\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param options - Optional settings related to server selection\n   * @param callback - The callback used to indicate success or failure\n   * @returns An instance of a `Server` meeting the criteria of the predicate provided\n   */\n  async selectServer(selector, options) {\n    let serverSelector;\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n        if (selector instanceof read_preference_1.ReadPreference) {\n          readPreference = selector;\n        } else {\n          read_preference_1.ReadPreference.translate(options);\n          readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n        }\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n    options = {\n      serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS,\n      ...options\n    };\n    if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n      this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionStartedEvent(selector, this.description, options.operationName));\n    }\n    const isSharded = this.description.type === common_1.TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n    if (isSharded && transaction && transaction.server) {\n      if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n        this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(selector, this.description, transaction.server.pool.address, options.operationName));\n      }\n      return transaction.server;\n    }\n    const {\n      promise: serverPromise,\n      resolve,\n      reject\n    } = (0, utils_1.promiseWithResolvers)();\n    const timeout = timeout_1.Timeout.expires(options.serverSelectionTimeoutMS ?? 0);\n    const waitQueueMember = {\n      serverSelector,\n      topologyDescription: this.description,\n      mongoLogger: this.client.mongoLogger,\n      transaction,\n      resolve,\n      reject,\n      timeout,\n      startTime: (0, utils_1.now)(),\n      operationName: options.operationName,\n      waitingLogged: false,\n      previousServer: options.previousServer\n    };\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n    try {\n      return await Promise.race([serverPromise, waitQueueMember.timeout]);\n    } catch (error) {\n      if (timeout_1.TimeoutError.is(error)) {\n        // Timeout\n        waitQueueMember[kCancelled] = true;\n        timeout.clear();\n        const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${options.serverSelectionTimeoutMS} ms`, this.description);\n        if (this.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n          this.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(selector, this.description, timeoutError, options.operationName));\n        }\n        throw timeoutError;\n      }\n      // Other server selection error\n      throw error;\n    }\n  }\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param serverDescription - The server to update in the internal list of server descriptions\n   */\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    }\n    // ignore this server update if its from an outdated topologyVersion\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    }\n    // these will be used for monitoring events later\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n    if (!previousServerDescription) {\n      return;\n    }\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n    const clusterTime = serverDescription.$clusterTime;\n    if (clusterTime) {\n      (0, common_1._advanceClusterTime)(this, clusterTime);\n    }\n    // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n    const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n    // first update the TopologyDescription\n    this.s.description = this.s.description.update(serverDescription);\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    }\n    // emit monitoring events for this change\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n      if (newDescription) {\n        this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n      }\n    }\n    // update server list from updated descriptions\n    updateServers(this, serverDescription);\n    // attempt to resolve any outstanding server selection attempts\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n    if (!equalDescriptions) {\n      this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n  }\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') callback = credentials, credentials = undefined;\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n  isConnected() {\n    return this.s.state === common_1.STATE_CONNECTED;\n  }\n  isDestroyed() {\n    return this.s.state === common_1.STATE_CLOSED;\n  }\n  // NOTE: There are many places in code where we explicitly check the last hello\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first hello seen, which should suffice.\n  lastHello() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(sd => sd.type !== common_1.ServerType.Unknown)[0];\n    const result = sd || {\n      maxWireVersion: this.description.commonWireVersion\n    };\n    return result;\n  }\n  get commonWireVersion() {\n    return this.description.commonWireVersion;\n  }\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n  get clusterTime() {\n    return this.s.clusterTime;\n  }\n  set clusterTime(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n}\nexports.Topology = Topology;\n/** @event */\nTopology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */\nTopology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */\nTopology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */\nTopology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */\nTopology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */\nTopology.ERROR = constants_1.ERROR;\n/** @event */\nTopology.OPEN = constants_1.OPEN;\n/** @event */\nTopology.CONNECT = constants_1.CONNECT;\n/** @event */\nTopology.CLOSE = constants_1.CLOSE;\n/** @event */\nTopology.TIMEOUT = constants_1.TIMEOUT;\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server, topology) {\n  for (const event of constants_1.LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n  server.destroy();\n  topology.emitAndLog(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n  for (const event of constants_1.SERVER_RELAY_EVENTS) {\n    server.removeAllListeners(event);\n  }\n}\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options) {\n  if (options?.directConnection) {\n    return common_1.TopologyType.Single;\n  }\n  if (options?.replicaSet) {\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n  }\n  if (options?.loadBalanced) {\n    return common_1.TopologyType.LoadBalanced;\n  }\n  return common_1.TopologyType.Unknown;\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology, serverDescription) {\n  topology.emitAndLog(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n  const server = new server_1.Server(topology, serverDescription, topology.s.options);\n  for (const event of constants_1.SERVER_RELAY_EVENTS) {\n    server.on(event, e => topology.emit(event, e));\n  }\n  server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n  server.connect();\n  return server;\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    if (server) {\n      server.s.description = incomingServerDescription;\n      if (incomingServerDescription.error instanceof error_1.MongoError && incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.ResetPool)) {\n        const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n        server.pool.clear({\n          interruptInUseConnections\n        });\n      } else if (incomingServerDescription.error == null) {\n        const newTopologyType = topology.s.description.type;\n        const shouldMarkPoolReady = incomingServerDescription.isDataBearing || incomingServerDescription.type !== common_1.ServerType.Unknown && newTopologyType === common_1.TopologyType.Single;\n        if (shouldMarkPoolReady) {\n          server.pool.ready();\n        }\n      }\n    }\n  }\n  // add new servers for all descriptions we currently don't know about locally\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  }\n  // for all servers no longer known, remove their descriptions and destroy their instances\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress);\n    // prepare server for garbage collection\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\nfunction drainWaitQueue(queue, drainError) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n    waitQueueMember.timeout.clear();\n    if (!waitQueueMember[kCancelled]) {\n      if (waitQueueMember.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n        waitQueueMember.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, drainError, waitQueueMember.operationName));\n      }\n      waitQueueMember.reject(drainError);\n    }\n  }\n}\nfunction processWaitQueue(topology) {\n  if (topology.s.state === common_1.STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n    return;\n  }\n  const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n  for (let i = 0; i < membersToProcess; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n    let selectedDescriptions;\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      const previousServer = waitQueueMember.previousServer;\n      selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions, previousServer ? [previousServer] : []) : serverDescriptions;\n    } catch (selectorError) {\n      waitQueueMember.timeout.clear();\n      if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n        topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, selectorError, waitQueueMember.operationName));\n      }\n      waitQueueMember.reject(selectorError);\n      continue;\n    }\n    let selectedServer;\n    if (selectedDescriptions.length === 0) {\n      if (!waitQueueMember.waitingLogged) {\n        if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.INFORMATIONAL)) {\n          topology.client.mongoLogger?.info(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.WaitingForSuitableServerEvent(waitQueueMember.serverSelector, topology.description, topology.s.serverSelectionTimeoutMS !== 0 ? topology.s.serverSelectionTimeoutMS - ((0, utils_1.now)() - waitQueueMember.startTime) : -1, waitQueueMember.operationName));\n        }\n        waitQueueMember.waitingLogged = true;\n      }\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    } else if (selectedDescriptions.length === 1) {\n      selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n    } else {\n      const descriptions = (0, utils_1.shuffle)(selectedDescriptions, 2);\n      const server1 = topology.s.servers.get(descriptions[0].address);\n      const server2 = topology.s.servers.get(descriptions[1].address);\n      selectedServer = server1 && server2 && server1.s.operationCount < server2.s.operationCount ? server1 : server2;\n    }\n    if (!selectedServer) {\n      const serverSelectionError = new error_1.MongoServerSelectionError('server selection returned a server description but the server was not found in the topology', topology.description);\n      if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n        topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, serverSelectionError, waitQueueMember.operationName));\n      }\n      waitQueueMember.reject(serverSelectionError);\n      return;\n    }\n    const transaction = waitQueueMember.transaction;\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n    waitQueueMember.timeout.clear();\n    if (topology.client.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n      topology.client.mongoLogger?.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, selectedServer.pool.address, waitQueueMember.operationName));\n    }\n    waitQueueMember.resolve(selectedServer);\n  }\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n  const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n  const currentTopologyVersion = currentServerDescription?.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0;\n}\n/** @public */\nclass ServerCapabilities {\n  constructor(hello) {\n    this.minWireVersion = hello.minWireVersion || 0;\n    this.maxWireVersion = hello.maxWireVersion || 0;\n  }\n  get hasAggregationCursor() {\n    return this.maxWireVersion >= 1;\n  }\n  get hasWriteCommands() {\n    return this.maxWireVersion >= 2;\n  }\n  get hasTextSearch() {\n    return this.minWireVersion >= 0;\n  }\n  get hasAuthCommands() {\n    return this.maxWireVersion >= 1;\n  }\n  get hasListCollectionsCommand() {\n    return this.maxWireVersion >= 3;\n  }\n  get hasListIndexesCommand() {\n    return this.maxWireVersion >= 3;\n  }\n  get supportsSnapshotReads() {\n    return this.maxWireVersion >= 13;\n  }\n  get commandsTakeWriteConcern() {\n    return this.maxWireVersion >= 5;\n  }\n  get commandsTakeCollation() {\n    return this.maxWireVersion >= 5;\n  }\n}\nexports.ServerCapabilities = ServerCapabilities;","map":{"version":3,"mappings":"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","names":["globalTopologyCounter","stateTransition","common_1","kCancelled","Symbol","kWaitQueue","Topology","mongo_types_1","constructor","client","seeds","options","hosts","utils_1","fromString","Object","fromEntries","connection_string_1","entries","Array","isArray","seedlist","seed","push","error_1","JSON","stringify","topologyType","topologyTypeFromOptions","topologyId","selectedHosts","srvMaxHosts","length","serverDescriptions","Map","hostAddress","set","toString","server_description_1","s","id","state","description","topology_description_1","replicaSet","undefined","serverSelectionTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","servers","credentials","clusterTime","connectionTimers","Set","detectShardedTopology","ev","detectSrvRecords","mongoLogger","component","srvHost","loadBalanced","srvPoller","srv_polling_1","srvServiceName","on","TOPOLOGY_DESCRIPTION_CHANGED","connectionLock","event","previousType","previousDescription","type","newType","newDescription","transitionToSharded","Sharded","srvListeners","listeners","SRV_RECORD_DISCOVERY","listeningToSrvPolling","includes","start","previousTopologyDescription","updateFromSrvPollingEvent","updateServers","emitAndLog","events_1","serverApi","capabilities","ServerCapabilities","lastHello","connect","_connect","TOPOLOGY_OPENING","Unknown","from","values","map","serverDescription","address","createAndConnectServer","serverUpdateHandler","readPreference","read_preference_1","primary","selectServerOptions","operationName","server","selectServer","skipPingOnConnect","for","command","ping","emit","OPEN","CONNECT","error","close","destroyServer","clear","drainWaitQueue","stop","removeListener","TOPOLOGY_CLOSED","selector","serverSelector","translate","willLog","mongo_logger_1","SERVER_SELECTION","DEBUG","debug","server_selection_events_1","isSharded","session","transaction","pool","promise","serverPromise","resolve","reject","timeout","timeout_1","expires","waitQueueMember","topologyDescription","startTime","waitingLogged","previousServer","processWaitQueue","Promise","race","is","timeoutError","hasServer","isStaleServerDescription","previousServerDescription","get","$clusterTime","equalDescriptions","equals","update","compatibilityError","ERROR","SERVER_DESCRIPTION_CHANGED","auth","callback","clientMetadata","metadata","isConnected","isDestroyed","sd","filter","result","maxWireVersion","commonWireVersion","logicalSessionTimeoutMinutes","exports","constants_1","topology","removeAllListeners","destroy","SERVER_CLOSED","directConnection","Single","ReplicaSetNoPrimary","LoadBalanced","SERVER_OPENING","server_1","e","DESCRIPTION_RECEIVED","incomingServerDescription","has","hasErrorLabel","ResetPool","interruptInUseConnections","InterruptInUseConnections","newTopologyType","shouldMarkPoolReady","isDataBearing","ready","entry","serverAddress","delete","queue","drainError","shift","membersToProcess","i","selectedDescriptions","selectorError","selectedServer","INFORMATIONAL","info","descriptions","server1","server2","operationCount","serverSelectionError","isActive","pinServer","process","nextTick","scheduleServerCheck","requestCheck","currentServerDescription","currentTopologyVersion","topologyVersion","hello","minWireVersion","hasAggregationCursor","hasWriteCommands","hasTextSearch","hasAuthCommands","hasListCollectionsCommand","hasListIndexesCommand","supportsSnapshotReads","commandsTakeWriteConcern","commandsTakeCollation"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/sdam/topology.ts"],"sourcesContent":["import type { BSONSerializeOptions, Document } from '../bson';\nimport type { MongoCredentials } from '../cmap/auth/mongo_credentials';\nimport type { ConnectionEvents } from '../cmap/connection';\nimport type { ConnectionPoolEvents } from '../cmap/connection_pool';\nimport type { ClientMetadata } from '../cmap/handshake/client_metadata';\nimport { DEFAULT_OPTIONS, FEATURE_FLAGS } from '../connection_string';\nimport {\n  CLOSE,\n  CONNECT,\n  ERROR,\n  LOCAL_SERVER_EVENTS,\n  OPEN,\n  SERVER_CLOSED,\n  SERVER_DESCRIPTION_CHANGED,\n  SERVER_OPENING,\n  SERVER_RELAY_EVENTS,\n  TIMEOUT,\n  TOPOLOGY_CLOSED,\n  TOPOLOGY_DESCRIPTION_CHANGED,\n  TOPOLOGY_OPENING\n} from '../constants';\nimport {\n  MongoCompatibilityError,\n  type MongoDriverError,\n  MongoError,\n  MongoErrorLabel,\n  MongoRuntimeError,\n  MongoServerSelectionError,\n  MongoTopologyClosedError\n} from '../error';\nimport type { MongoClient, ServerApi } from '../mongo_client';\nimport { MongoLoggableComponent, type MongoLogger, SeverityLevel } from '../mongo_logger';\nimport { TypedEventEmitter } from '../mongo_types';\nimport { ReadPreference, type ReadPreferenceLike } from '../read_preference';\nimport type { ClientSession } from '../sessions';\nimport { Timeout, TimeoutError } from '../timeout';\nimport type { Transaction } from '../transactions';\nimport {\n  type Callback,\n  type EventEmitterWithState,\n  HostAddress,\n  List,\n  makeStateMachine,\n  now,\n  ns,\n  promiseWithResolvers,\n  shuffle\n} from '../utils';\nimport {\n  _advanceClusterTime,\n  type ClusterTime,\n  drainTimerQueue,\n  ServerType,\n  STATE_CLOSED,\n  STATE_CLOSING,\n  STATE_CONNECTED,\n  STATE_CONNECTING,\n  type TimerQueue,\n  TopologyType\n} from './common';\nimport {\n  ServerClosedEvent,\n  ServerDescriptionChangedEvent,\n  ServerOpeningEvent,\n  TopologyClosedEvent,\n  TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent\n} from './events';\nimport type { ServerMonitoringMode } from './monitor';\nimport { Server, type ServerEvents, type ServerOptions } from './server';\nimport { compareTopologyVersion, ServerDescription } from './server_description';\nimport { readPreferenceServerSelector, type ServerSelector } from './server_selection';\nimport {\n  ServerSelectionFailedEvent,\n  ServerSelectionStartedEvent,\n  ServerSelectionSucceededEvent,\n  WaitingForSuitableServerEvent\n} from './server_selection_events';\nimport { SrvPoller, type SrvPollingEvent } from './srv_polling';\nimport { TopologyDescription } from './topology_description';\n\n// Global state\nlet globalTopologyCounter = 0;\n\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\n\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n\n/** @internal */\nexport type ServerSelectionCallback = Callback<Server>;\n\n/** @internal */\nexport interface ServerSelectionRequest {\n  serverSelector: ServerSelector;\n  topologyDescription: TopologyDescription;\n  mongoLogger: MongoLogger | undefined;\n  transaction?: Transaction;\n  startTime: number;\n  resolve: (server: Server) => void;\n  reject: (error: MongoError) => void;\n  [kCancelled]?: boolean;\n  timeout: Timeout;\n  operationName: string;\n  waitingLogged: boolean;\n  previousServer?: ServerDescription;\n}\n\n/** @internal */\nexport interface TopologyPrivate {\n  /** the id of this topology */\n  id: number;\n  /** passed in options */\n  options: TopologyOptions;\n  /** initial seedlist of servers to connect to */\n  seedlist: HostAddress[];\n  /** initial state */\n  state: string;\n  /** the topology description */\n  description: TopologyDescription;\n  serverSelectionTimeoutMS: number;\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n  /** A map of server instances to normalized addresses */\n  servers: Map<string, Server>;\n  credentials?: MongoCredentials;\n  clusterTime?: ClusterTime;\n  /** timers created for the initial connect to a server */\n  connectionTimers: TimerQueue;\n\n  /** related to srv polling */\n  srvPoller?: SrvPoller;\n  detectShardedTopology: (event: TopologyDescriptionChangedEvent) => void;\n  detectSrvRecords: (event: SrvPollingEvent) => void;\n}\n\n/** @internal */\nexport interface TopologyOptions extends BSONSerializeOptions, ServerOptions {\n  srvMaxHosts: number;\n  srvServiceName: string;\n  hosts: HostAddress[];\n  retryWrites: boolean;\n  retryReads: boolean;\n  /** How long to block for server selection before throwing an error */\n  serverSelectionTimeoutMS: number;\n  /** The name of the replica set to connect to */\n  replicaSet?: string;\n  srvHost?: string;\n  srvPoller?: SrvPoller;\n  /** Indicates that a client should directly connect to a node without attempting to discover its topology type */\n  directConnection: boolean;\n  loadBalanced: boolean;\n  metadata: ClientMetadata;\n  extendedMetadata: Promise<Document>;\n  serverMonitoringMode: ServerMonitoringMode;\n  /** MongoDB server API version */\n  serverApi?: ServerApi;\n  [featureFlag: symbol]: any;\n}\n\n/** @public */\nexport interface ConnectOptions {\n  readPreference?: ReadPreference;\n}\n\n/** @public */\nexport interface SelectServerOptions {\n  readPreference?: ReadPreferenceLike;\n  /** How long to block for server selection before throwing an error */\n  serverSelectionTimeoutMS?: number;\n  session?: ClientSession;\n  operationName: string;\n  previousServer?: ServerDescription;\n  /** @internal*/\n  timeout?: Timeout;\n}\n\n/** @public */\nexport type TopologyEvents = {\n  /** Top level MongoClient doesn't emit this so it is marked: @internal */\n  connect(topology: Topology): void;\n  serverOpening(event: ServerOpeningEvent): void;\n  serverClosed(event: ServerClosedEvent): void;\n  serverDescriptionChanged(event: ServerDescriptionChangedEvent): void;\n  topologyClosed(event: TopologyClosedEvent): void;\n  topologyOpening(event: TopologyOpeningEvent): void;\n  topologyDescriptionChanged(event: TopologyDescriptionChangedEvent): void;\n  error(error: Error): void;\n  /** @internal */\n  open(topology: Topology): void;\n  close(): void;\n  timeout(): void;\n} & Omit<ServerEvents, 'connect'> &\n  ConnectionPoolEvents &\n  ConnectionEvents &\n  EventEmitterWithState;\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nexport class Topology extends TypedEventEmitter<TopologyEvents> {\n  /** @internal */\n  s: TopologyPrivate;\n  /** @internal */\n  [kWaitQueue]: List<ServerSelectionRequest>;\n  /** @internal */\n  hello?: Document;\n  /** @internal */\n  _type?: string;\n\n  client!: MongoClient;\n\n  /** @internal */\n  private connectionLock?: Promise<Topology>;\n\n  /** @event */\n  static readonly SERVER_OPENING = SERVER_OPENING;\n  /** @event */\n  static readonly SERVER_CLOSED = SERVER_CLOSED;\n  /** @event */\n  static readonly SERVER_DESCRIPTION_CHANGED = SERVER_DESCRIPTION_CHANGED;\n  /** @event */\n  static readonly TOPOLOGY_OPENING = TOPOLOGY_OPENING;\n  /** @event */\n  static readonly TOPOLOGY_CLOSED = TOPOLOGY_CLOSED;\n  /** @event */\n  static readonly TOPOLOGY_DESCRIPTION_CHANGED = TOPOLOGY_DESCRIPTION_CHANGED;\n  /** @event */\n  static readonly ERROR = ERROR;\n  /** @event */\n  static readonly OPEN = OPEN;\n  /** @event */\n  static readonly CONNECT = CONNECT;\n  /** @event */\n  static readonly CLOSE = CLOSE;\n  /** @event */\n  static readonly TIMEOUT = TIMEOUT;\n\n  /**\n   * @param seedlist - a list of HostAddress instances to connect to\n   */\n  constructor(\n    client: MongoClient,\n    seeds: string | string[] | HostAddress | HostAddress[],\n    options: TopologyOptions\n  ) {\n    super();\n\n    this.client = client;\n    // Options should only be undefined in tests, MongoClient will always have defined options\n    options = options ?? {\n      hosts: [HostAddress.fromString('localhost:27017')],\n      ...Object.fromEntries(DEFAULT_OPTIONS.entries()),\n      ...Object.fromEntries(FEATURE_FLAGS.entries())\n    };\n\n    if (typeof seeds === 'string') {\n      seeds = [HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n\n    const seedlist: HostAddress[] = [];\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(HostAddress.fromString(seed));\n      } else if (seed instanceof HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n      }\n    }\n\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n\n    const selectedHosts =\n      options.srvMaxHosts == null ||\n      options.srvMaxHosts === 0 ||\n      options.srvMaxHosts >= seedlist.length\n        ? seedlist\n        : shuffle(seedlist, options.srvMaxHosts);\n\n    const serverDescriptions = new Map();\n    for (const hostAddress of selectedHosts) {\n      serverDescriptions.set(hostAddress.toString(), new ServerDescription(hostAddress));\n    }\n\n    this[kWaitQueue] = new List();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: STATE_CLOSED,\n      // the topology description\n      description: new TopologyDescription(\n        topologyType,\n        serverDescriptions,\n        options.replicaSet,\n        undefined,\n        undefined,\n        undefined,\n        options\n      ),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      credentials: options?.credentials,\n      clusterTime: undefined,\n\n      // timer management\n      connectionTimers: new Set<NodeJS.Timeout>(),\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n\n    this.mongoLogger = client.mongoLogger;\n    this.component = 'topology';\n\n    if (options.srvHost && !options.loadBalanced) {\n      this.s.srvPoller =\n        options.srvPoller ??\n        new SrvPoller({\n          heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n          srvHost: options.srvHost,\n          srvMaxHosts: options.srvMaxHosts,\n          srvServiceName: options.srvServiceName\n        });\n\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n    this.connectionLock = undefined;\n  }\n\n  private detectShardedTopology(event: TopologyDescriptionChangedEvent) {\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n\n    const transitionToSharded =\n      previousType !== TopologyType.Sharded && newType === TopologyType.Sharded;\n    const srvListeners = this.s.srvPoller?.listeners(SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n\n    if (transitionToSharded && !listeningToSrvPolling) {\n      this.s.srvPoller?.on(SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      this.s.srvPoller?.start();\n    }\n  }\n\n  private detectSrvRecords(ev: SrvPollingEvent) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(\n      ev,\n      this.s.options.srvMaxHosts\n    );\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(this);\n\n    this.emitAndLog(\n      Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n      new TopologyDescriptionChangedEvent(\n        this.s.id,\n        previousTopologyDescription,\n        this.s.description\n      )\n    );\n  }\n\n  /**\n   * @returns A `TopologyDescription` for this topology\n   */\n  get description(): TopologyDescription {\n    return this.s.description;\n  }\n\n  get loadBalanced(): boolean {\n    return this.s.options.loadBalanced;\n  }\n\n  get serverApi(): ServerApi | undefined {\n    return this.s.options.serverApi;\n  }\n\n  get capabilities(): ServerCapabilities {\n    return new ServerCapabilities(this.lastHello());\n  }\n\n  /** Initiate server connect */\n  async connect(options?: ConnectOptions): Promise<Topology> {\n    this.connectionLock ??= this._connect(options);\n    try {\n      await this.connectionLock;\n      return this;\n    } finally {\n      this.connectionLock = undefined;\n    }\n\n    return this;\n  }\n\n  private async _connect(options?: ConnectOptions): Promise<Topology> {\n    options = options ?? {};\n    if (this.s.state === STATE_CONNECTED) {\n      return this;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n\n    // emit SDAM monitoring events\n    this.emitAndLog(Topology.TOPOLOGY_OPENING, new TopologyOpeningEvent(this.s.id));\n\n    // emit an event for the topology change\n    this.emitAndLog(\n      Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n      new TopologyDescriptionChangedEvent(\n        this.s.id,\n        new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\n        this.s.description\n      )\n    );\n\n    // connect all known servers, then attempt server selection to connect\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    this.s.servers = new Map(\n      serverDescriptions.map(serverDescription => [\n        serverDescription.address,\n        createAndConnectServer(this, serverDescription)\n      ])\n    );\n\n    // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n\n    const readPreference = options.readPreference ?? ReadPreference.primary;\n    const selectServerOptions = { operationName: 'ping', ...options };\n    try {\n      const server = await this.selectServer(\n        readPreferenceServerSelector(readPreference),\n        selectServerOptions\n      );\n\n      const skipPingOnConnect = this.s.options[Symbol.for('@@mdb.skipPingOnConnect')] === true;\n      if (!skipPingOnConnect && server && this.s.credentials) {\n        await server.command(ns('admin.$cmd'), { ping: 1 }, {});\n        stateTransition(this, STATE_CONNECTED);\n        this.emit(Topology.OPEN, this);\n        this.emit(Topology.CONNECT, this);\n\n        return this;\n      }\n\n      stateTransition(this, STATE_CONNECTED);\n      this.emit(Topology.OPEN, this);\n      this.emit(Topology.CONNECT, this);\n\n      return this;\n    } catch (error) {\n      this.close();\n      throw error;\n    }\n  }\n\n  /** Close this topology */\n  close(): void {\n    if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {\n      return;\n    }\n\n    for (const server of this.s.servers.values()) {\n      destroyServer(server, this);\n    }\n\n    this.s.servers.clear();\n\n    stateTransition(this, STATE_CLOSING);\n\n    drainWaitQueue(this[kWaitQueue], new MongoTopologyClosedError());\n    drainTimerQueue(this.s.connectionTimers);\n\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n      this.s.srvPoller.removeListener(SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n    }\n\n    this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n\n    stateTransition(this, STATE_CLOSED);\n\n    // emit an event for close\n    this.emitAndLog(Topology.TOPOLOGY_CLOSED, new TopologyClosedEvent(this.s.id));\n  }\n\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param options - Optional settings related to server selection\n   * @param callback - The callback used to indicate success or failure\n   * @returns An instance of a `Server` meeting the criteria of the predicate provided\n   */\n  async selectServer(\n    selector: string | ReadPreference | ServerSelector,\n    options: SelectServerOptions\n  ): Promise<Server> {\n    let serverSelector;\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = readPreferenceServerSelector(ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n        if (selector instanceof ReadPreference) {\n          readPreference = selector;\n        } else {\n          ReadPreference.translate(options);\n          readPreference = options.readPreference || ReadPreference.primary;\n        }\n\n        serverSelector = readPreferenceServerSelector(readPreference as ReadPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n\n    options = { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS, ...options };\n    if (\n      this.client.mongoLogger?.willLog(MongoLoggableComponent.SERVER_SELECTION, SeverityLevel.DEBUG)\n    ) {\n      this.client.mongoLogger?.debug(\n        MongoLoggableComponent.SERVER_SELECTION,\n        new ServerSelectionStartedEvent(selector, this.description, options.operationName)\n      );\n    }\n\n    const isSharded = this.description.type === TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      if (\n        this.client.mongoLogger?.willLog(\n          MongoLoggableComponent.SERVER_SELECTION,\n          SeverityLevel.DEBUG\n        )\n      ) {\n        this.client.mongoLogger?.debug(\n          MongoLoggableComponent.SERVER_SELECTION,\n          new ServerSelectionSucceededEvent(\n            selector,\n            this.description,\n            transaction.server.pool.address,\n            options.operationName\n          )\n        );\n      }\n      return transaction.server;\n    }\n\n    const { promise: serverPromise, resolve, reject } = promiseWithResolvers<Server>();\n    const timeout = Timeout.expires(options.serverSelectionTimeoutMS ?? 0);\n    const waitQueueMember: ServerSelectionRequest = {\n      serverSelector,\n      topologyDescription: this.description,\n      mongoLogger: this.client.mongoLogger,\n      transaction,\n      resolve,\n      reject,\n      timeout,\n      startTime: now(),\n      operationName: options.operationName,\n      waitingLogged: false,\n      previousServer: options.previousServer\n    };\n\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n\n    try {\n      return await Promise.race([serverPromise, waitQueueMember.timeout]);\n    } catch (error) {\n      if (TimeoutError.is(error)) {\n        // Timeout\n        waitQueueMember[kCancelled] = true;\n        timeout.clear();\n        const timeoutError = new MongoServerSelectionError(\n          `Server selection timed out after ${options.serverSelectionTimeoutMS} ms`,\n          this.description\n        );\n        if (\n          this.client.mongoLogger?.willLog(\n            MongoLoggableComponent.SERVER_SELECTION,\n            SeverityLevel.DEBUG\n          )\n        ) {\n          this.client.mongoLogger?.debug(\n            MongoLoggableComponent.SERVER_SELECTION,\n            new ServerSelectionFailedEvent(\n              selector,\n              this.description,\n              timeoutError,\n              options.operationName\n            )\n          );\n        }\n\n        throw timeoutError;\n      }\n      // Other server selection error\n      throw error;\n    }\n  }\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param serverDescription - The server to update in the internal list of server descriptions\n   */\n  serverUpdateHandler(serverDescription: ServerDescription): void {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    }\n\n    // ignore this server update if its from an outdated topologyVersion\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    }\n\n    // these will be used for monitoring events later\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n    if (!previousServerDescription) {\n      return;\n    }\n\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n    const clusterTime = serverDescription.$clusterTime;\n    if (clusterTime) {\n      _advanceClusterTime(this, clusterTime);\n    }\n\n    // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n    const equalDescriptions =\n      previousServerDescription && previousServerDescription.equals(serverDescription);\n\n    // first update the TopologyDescription\n    this.s.description = this.s.description.update(serverDescription);\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    }\n\n    // emit monitoring events for this change\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n      if (newDescription) {\n        this.emit(\n          Topology.SERVER_DESCRIPTION_CHANGED,\n          new ServerDescriptionChangedEvent(\n            this.s.id,\n            serverDescription.address,\n            previousServerDescription,\n            newDescription\n          )\n        );\n      }\n    }\n\n    // update server list from updated descriptions\n    updateServers(this, serverDescription);\n\n    // attempt to resolve any outstanding server selection attempts\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n\n    if (!equalDescriptions) {\n      this.emitAndLog(\n        Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n        new TopologyDescriptionChangedEvent(\n          this.s.id,\n          previousTopologyDescription,\n          this.s.description\n        )\n      );\n    }\n  }\n\n  auth(credentials?: MongoCredentials, callback?: Callback): void {\n    if (typeof credentials === 'function') (callback = credentials), (credentials = undefined);\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n\n  get clientMetadata(): ClientMetadata {\n    return this.s.options.metadata;\n  }\n\n  isConnected(): boolean {\n    return this.s.state === STATE_CONNECTED;\n  }\n\n  isDestroyed(): boolean {\n    return this.s.state === STATE_CLOSED;\n  }\n\n  // NOTE: There are many places in code where we explicitly check the last hello\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first hello seen, which should suffice.\n  lastHello(): Document {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(\n      (sd: ServerDescription) => sd.type !== ServerType.Unknown\n    )[0];\n\n    const result = sd || { maxWireVersion: this.description.commonWireVersion };\n    return result;\n  }\n\n  get commonWireVersion(): number | undefined {\n    return this.description.commonWireVersion;\n  }\n\n  get logicalSessionTimeoutMinutes(): number | null {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get clusterTime(): ClusterTime | undefined {\n    return this.s.clusterTime;\n  }\n\n  set clusterTime(clusterTime: ClusterTime | undefined) {\n    this.s.clusterTime = clusterTime;\n  }\n}\n\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server: Server, topology: Topology) {\n  for (const event of LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n\n  server.destroy();\n  topology.emitAndLog(\n    Topology.SERVER_CLOSED,\n    new ServerClosedEvent(topology.s.id, server.description.address)\n  );\n\n  for (const event of SERVER_RELAY_EVENTS) {\n    server.removeAllListeners(event);\n  }\n}\n\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options?: TopologyOptions) {\n  if (options?.directConnection) {\n    return TopologyType.Single;\n  }\n\n  if (options?.replicaSet) {\n    return TopologyType.ReplicaSetNoPrimary;\n  }\n\n  if (options?.loadBalanced) {\n    return TopologyType.LoadBalanced;\n  }\n\n  return TopologyType.Unknown;\n}\n\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology: Topology, serverDescription: ServerDescription) {\n  topology.emitAndLog(\n    Topology.SERVER_OPENING,\n    new ServerOpeningEvent(topology.s.id, serverDescription.address)\n  );\n\n  const server = new Server(topology, serverDescription, topology.s.options);\n  for (const event of SERVER_RELAY_EVENTS) {\n    server.on(event, (e: any) => topology.emit(event, e));\n  }\n\n  server.on(Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n\n  server.connect();\n  return server;\n}\n\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology: Topology, incomingServerDescription?: ServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    if (server) {\n      server.s.description = incomingServerDescription;\n      if (\n        incomingServerDescription.error instanceof MongoError &&\n        incomingServerDescription.error.hasErrorLabel(MongoErrorLabel.ResetPool)\n      ) {\n        const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(\n          MongoErrorLabel.InterruptInUseConnections\n        );\n\n        server.pool.clear({ interruptInUseConnections });\n      } else if (incomingServerDescription.error == null) {\n        const newTopologyType = topology.s.description.type;\n        const shouldMarkPoolReady =\n          incomingServerDescription.isDataBearing ||\n          (incomingServerDescription.type !== ServerType.Unknown &&\n            newTopologyType === TopologyType.Single);\n        if (shouldMarkPoolReady) {\n          server.pool.ready();\n        }\n      }\n    }\n  }\n\n  // add new servers for all descriptions we currently don't know about locally\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  }\n\n  // for all servers no longer known, remove their descriptions and destroy their instances\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress);\n\n    // prepare server for garbage collection\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\n\nfunction drainWaitQueue(queue: List<ServerSelectionRequest>, drainError: MongoDriverError) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    waitQueueMember.timeout.clear();\n\n    if (!waitQueueMember[kCancelled]) {\n      if (\n        waitQueueMember.mongoLogger?.willLog(\n          MongoLoggableComponent.SERVER_SELECTION,\n          SeverityLevel.DEBUG\n        )\n      ) {\n        waitQueueMember.mongoLogger?.debug(\n          MongoLoggableComponent.SERVER_SELECTION,\n          new ServerSelectionFailedEvent(\n            waitQueueMember.serverSelector,\n            waitQueueMember.topologyDescription,\n            drainError,\n            waitQueueMember.operationName\n          )\n        );\n      }\n      waitQueueMember.reject(drainError);\n    }\n  }\n}\n\nfunction processWaitQueue(topology: Topology) {\n  if (topology.s.state === STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new MongoTopologyClosedError());\n    return;\n  }\n\n  const isSharded = topology.description.type === TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n  for (let i = 0; i < membersToProcess; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    let selectedDescriptions;\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      const previousServer = waitQueueMember.previousServer;\n      selectedDescriptions = serverSelector\n        ? serverSelector(\n            topology.description,\n            serverDescriptions,\n            previousServer ? [previousServer] : []\n          )\n        : serverDescriptions;\n    } catch (selectorError) {\n      waitQueueMember.timeout.clear();\n      if (\n        topology.client.mongoLogger?.willLog(\n          MongoLoggableComponent.SERVER_SELECTION,\n          SeverityLevel.DEBUG\n        )\n      ) {\n        topology.client.mongoLogger?.debug(\n          MongoLoggableComponent.SERVER_SELECTION,\n          new ServerSelectionFailedEvent(\n            waitQueueMember.serverSelector,\n            topology.description,\n            selectorError,\n            waitQueueMember.operationName\n          )\n        );\n      }\n      waitQueueMember.reject(selectorError);\n      continue;\n    }\n\n    let selectedServer: Server | undefined;\n    if (selectedDescriptions.length === 0) {\n      if (!waitQueueMember.waitingLogged) {\n        if (\n          topology.client.mongoLogger?.willLog(\n            MongoLoggableComponent.SERVER_SELECTION,\n            SeverityLevel.INFORMATIONAL\n          )\n        ) {\n          topology.client.mongoLogger?.info(\n            MongoLoggableComponent.SERVER_SELECTION,\n            new WaitingForSuitableServerEvent(\n              waitQueueMember.serverSelector,\n              topology.description,\n              topology.s.serverSelectionTimeoutMS !== 0\n                ? topology.s.serverSelectionTimeoutMS - (now() - waitQueueMember.startTime)\n                : -1,\n              waitQueueMember.operationName\n            )\n          );\n        }\n        waitQueueMember.waitingLogged = true;\n      }\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    } else if (selectedDescriptions.length === 1) {\n      selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n    } else {\n      const descriptions = shuffle(selectedDescriptions, 2);\n      const server1 = topology.s.servers.get(descriptions[0].address);\n      const server2 = topology.s.servers.get(descriptions[1].address);\n\n      selectedServer =\n        server1 && server2 && server1.s.operationCount < server2.s.operationCount\n          ? server1\n          : server2;\n    }\n\n    if (!selectedServer) {\n      const serverSelectionError = new MongoServerSelectionError(\n        'server selection returned a server description but the server was not found in the topology',\n        topology.description\n      );\n      if (\n        topology.client.mongoLogger?.willLog(\n          MongoLoggableComponent.SERVER_SELECTION,\n          SeverityLevel.DEBUG\n        )\n      ) {\n        topology.client.mongoLogger?.debug(\n          MongoLoggableComponent.SERVER_SELECTION,\n          new ServerSelectionFailedEvent(\n            waitQueueMember.serverSelector,\n            topology.description,\n            serverSelectionError,\n            waitQueueMember.operationName\n          )\n        );\n      }\n      waitQueueMember.reject(serverSelectionError);\n      return;\n    }\n    const transaction = waitQueueMember.transaction;\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n\n    waitQueueMember.timeout.clear();\n\n    if (\n      topology.client.mongoLogger?.willLog(\n        MongoLoggableComponent.SERVER_SELECTION,\n        SeverityLevel.DEBUG\n      )\n    ) {\n      topology.client.mongoLogger?.debug(\n        MongoLoggableComponent.SERVER_SELECTION,\n        new ServerSelectionSucceededEvent(\n          waitQueueMember.serverSelector,\n          waitQueueMember.topologyDescription,\n          selectedServer.pool.address,\n          waitQueueMember.operationName\n        )\n      );\n    }\n    waitQueueMember.resolve(selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\n\nfunction isStaleServerDescription(\n  topologyDescription: TopologyDescription,\n  incomingServerDescription: ServerDescription\n) {\n  const currentServerDescription = topologyDescription.servers.get(\n    incomingServerDescription.address\n  );\n  const currentTopologyVersion = currentServerDescription?.topologyVersion;\n  return (\n    compareTopologyVersion(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0\n  );\n}\n\n/** @public */\nexport class ServerCapabilities {\n  maxWireVersion: number;\n  minWireVersion: number;\n\n  constructor(hello: Document) {\n    this.minWireVersion = hello.minWireVersion || 0;\n    this.maxWireVersion = hello.maxWireVersion || 0;\n  }\n\n  get hasAggregationCursor(): boolean {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasWriteCommands(): boolean {\n    return this.maxWireVersion >= 2;\n  }\n  get hasTextSearch(): boolean {\n    return this.minWireVersion >= 0;\n  }\n\n  get hasAuthCommands(): boolean {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasListCollectionsCommand(): boolean {\n    return this.maxWireVersion >= 3;\n  }\n\n  get hasListIndexesCommand(): boolean {\n    return this.maxWireVersion >= 3;\n  }\n\n  get supportsSnapshotReads(): boolean {\n    return this.maxWireVersion >= 13;\n  }\n\n  get commandsTakeWriteConcern(): boolean {\n    return this.maxWireVersion >= 5;\n  }\n\n  get commandsTakeCollation(): boolean {\n    return this.maxWireVersion >= 5;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}