{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InsertManyOperation = exports.InsertOneOperation = exports.InsertOperation = void 0;\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\nconst bulk_write_1 = require(\"./bulk_write\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass InsertOperation extends command_1.CommandOperation {\n  constructor(ns, documents, options) {\n    super(undefined, options);\n    this.options = {\n      ...options,\n      checkKeys: options.checkKeys ?? false\n    };\n    this.ns = ns;\n    this.documents = documents;\n  }\n  get commandName() {\n    return 'insert';\n  }\n  async execute(server, session) {\n    const options = this.options ?? {};\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n    const command = {\n      insert: this.ns.collection,\n      documents: this.documents,\n      ordered\n    };\n    if (typeof options.bypassDocumentValidation === 'boolean') {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      command.comment = options.comment;\n    }\n    return await super.executeCommand(server, session, command);\n  }\n}\nexports.InsertOperation = InsertOperation;\nclass InsertOneOperation extends InsertOperation {\n  constructor(collection, doc, options) {\n    super(collection.s.namespace, (0, utils_1.maybeAddIdToDocuments)(collection, [doc], options), options);\n  }\n  async execute(server, session) {\n    const res = await super.execute(server, session);\n    if (res.code) throw new error_1.MongoServerError(res);\n    if (res.writeErrors) {\n      // This should be a WriteError but we can't change it now because of error hierarchy\n      throw new error_1.MongoServerError(res.writeErrors[0]);\n    }\n    return {\n      acknowledged: this.writeConcern?.w !== 0,\n      insertedId: this.documents[0]._id\n    };\n  }\n}\nexports.InsertOneOperation = InsertOneOperation;\n/** @internal */\nclass InsertManyOperation extends operation_1.AbstractOperation {\n  constructor(collection, docs, options) {\n    super(options);\n    if (!Array.isArray(docs)) {\n      throw new error_1.MongoInvalidArgumentError('Argument \"docs\" must be an array of documents');\n    }\n    this.options = options;\n    this.collection = collection;\n    this.docs = docs;\n  }\n  get commandName() {\n    return 'insert';\n  }\n  async execute(server, session) {\n    const coll = this.collection;\n    const options = {\n      ...this.options,\n      ...this.bsonOptions,\n      readPreference: this.readPreference\n    };\n    const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n    const bulkWriteOperation = new bulk_write_1.BulkWriteOperation(coll, this.docs.map(document => ({\n      insertOne: {\n        document\n      }\n    })), options);\n    try {\n      const res = await bulkWriteOperation.execute(server, session);\n      return {\n        acknowledged: writeConcern?.w !== 0,\n        insertedCount: res.insertedCount,\n        insertedIds: res.insertedIds\n      };\n    } catch (err) {\n      if (err && err.message === 'Operation must be an object with an operation key') {\n        throw new error_1.MongoInvalidArgumentError('Collection.insertMany() cannot be called with an array that has null/undefined values');\n      }\n      throw err;\n    }\n  }\n}\nexports.InsertManyOperation = InsertManyOperation;\n(0, operation_1.defineAspects)(InsertOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertManyOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"mappings":"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","names":["InsertOperation","command_1","constructor","ns","documents","options","undefined","checkKeys","commandName","execute","server","session","ordered","command","insert","collection","bypassDocumentValidation","comment","executeCommand","exports","InsertOneOperation","doc","s","namespace","res","code","error_1","writeErrors","acknowledged","writeConcern","w","insertedId","_id","InsertManyOperation","operation_1","docs","Array","isArray","coll","bsonOptions","readPreference","write_concern_1","fromOptions","bulkWriteOperation","bulk_write_1","map","document","insertOne","insertedCount","insertedIds","err","message","RETRYABLE","WRITE_OPERATION"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/operations/insert.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { BulkWriteOptions } from '../bulk/common';\nimport type { Collection } from '../collection';\nimport { MongoInvalidArgumentError, MongoServerError } from '../error';\nimport type { InferIdType } from '../mongo_types';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { maybeAddIdToDocuments, type MongoDBNamespace } from '../utils';\nimport { WriteConcern } from '../write_concern';\nimport { BulkWriteOperation } from './bulk_write';\nimport { CommandOperation, type CommandOperationOptions } from './command';\nimport { AbstractOperation, Aspect, defineAspects } from './operation';\n\n/** @internal */\nexport class InsertOperation extends CommandOperation<Document> {\n  override options: BulkWriteOptions;\n  documents: Document[];\n\n  constructor(ns: MongoDBNamespace, documents: Document[], options: BulkWriteOptions) {\n    super(undefined, options);\n    this.options = { ...options, checkKeys: options.checkKeys ?? false };\n    this.ns = ns;\n    this.documents = documents;\n  }\n\n  override get commandName() {\n    return 'insert' as const;\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<Document> {\n    const options = this.options ?? {};\n    const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n    const command: Document = {\n      insert: this.ns.collection,\n      documents: this.documents,\n      ordered\n    };\n\n    if (typeof options.bypassDocumentValidation === 'boolean') {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n      command.comment = options.comment;\n    }\n\n    return await super.executeCommand(server, session, command);\n  }\n}\n\n/** @public */\nexport interface InsertOneOptions extends CommandOperationOptions {\n  /** Allow driver to bypass schema validation. */\n  bypassDocumentValidation?: boolean;\n  /** Force server to assign _id values instead of driver. */\n  forceServerObjectId?: boolean;\n}\n\n/** @public */\nexport interface InsertOneResult<TSchema = Document> {\n  /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */\n  acknowledged: boolean;\n  /** The identifier that was inserted. If the server generated the identifier, this value will be null as the driver does not have access to that data */\n  insertedId: InferIdType<TSchema>;\n}\n\nexport class InsertOneOperation extends InsertOperation {\n  constructor(collection: Collection, doc: Document, options: InsertOneOptions) {\n    super(collection.s.namespace, maybeAddIdToDocuments(collection, [doc], options), options);\n  }\n\n  override async execute(\n    server: Server,\n    session: ClientSession | undefined\n  ): Promise<InsertOneResult> {\n    const res = await super.execute(server, session);\n    if (res.code) throw new MongoServerError(res);\n    if (res.writeErrors) {\n      // This should be a WriteError but we can't change it now because of error hierarchy\n      throw new MongoServerError(res.writeErrors[0]);\n    }\n\n    return {\n      acknowledged: this.writeConcern?.w !== 0,\n      insertedId: this.documents[0]._id\n    };\n  }\n}\n\n/** @public */\nexport interface InsertManyResult<TSchema = Document> {\n  /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */\n  acknowledged: boolean;\n  /** The number of inserted documents for this operations */\n  insertedCount: number;\n  /** Map of the index of the inserted document to the id of the inserted document */\n  insertedIds: { [key: number]: InferIdType<TSchema> };\n}\n\n/** @internal */\nexport class InsertManyOperation extends AbstractOperation<InsertManyResult> {\n  override options: BulkWriteOptions;\n  collection: Collection;\n  docs: ReadonlyArray<Document>;\n\n  constructor(collection: Collection, docs: ReadonlyArray<Document>, options: BulkWriteOptions) {\n    super(options);\n\n    if (!Array.isArray(docs)) {\n      throw new MongoInvalidArgumentError('Argument \"docs\" must be an array of documents');\n    }\n\n    this.options = options;\n    this.collection = collection;\n    this.docs = docs;\n  }\n\n  override get commandName() {\n    return 'insert' as const;\n  }\n\n  override async execute(\n    server: Server,\n    session: ClientSession | undefined\n  ): Promise<InsertManyResult> {\n    const coll = this.collection;\n    const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n    const writeConcern = WriteConcern.fromOptions(options);\n    const bulkWriteOperation = new BulkWriteOperation(\n      coll,\n      this.docs.map(document => ({\n        insertOne: { document }\n      })),\n      options\n    );\n\n    try {\n      const res = await bulkWriteOperation.execute(server, session);\n      return {\n        acknowledged: writeConcern?.w !== 0,\n        insertedCount: res.insertedCount,\n        insertedIds: res.insertedIds\n      };\n    } catch (err) {\n      if (err && err.message === 'Operation must be an object with an operation key') {\n        throw new MongoInvalidArgumentError(\n          'Collection.insertMany() cannot be called with an array that has null/undefined values'\n        );\n      }\n      throw err;\n    }\n  }\n}\n\ndefineAspects(InsertOperation, [Aspect.RETRYABLE, Aspect.WRITE_OPERATION]);\ndefineAspects(InsertOneOperation, [Aspect.RETRYABLE, Aspect.WRITE_OPERATION]);\ndefineAspects(InsertManyOperation, [Aspect.WRITE_OPERATION]);\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}