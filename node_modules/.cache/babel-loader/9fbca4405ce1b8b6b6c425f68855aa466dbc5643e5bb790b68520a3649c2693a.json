{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPANID, INVALID_TRACEID } from './invalid-span-constants';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nvar VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nvar VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\nexport function isValidTraceId(traceId) {\n  return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;\n}\nexport function isValidSpanId(spanId) {\n  return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;\n}\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nexport function isSpanContextValid(spanContext) {\n  return isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId);\n}\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nexport function wrapSpanContext(spanContext) {\n  return new NonRecordingSpan(spanContext);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,SAASA,cAAc,EAAEC,eAAe,QAAQ,0BAA0B;AAC1E,SAASC,gBAAgB,QAAQ,oBAAoB;AAIrD,IAAMC,mBAAmB,GAAG,mBAAmB;AAC/C,IAAMC,kBAAkB,GAAG,iBAAiB;AAE5C,OAAM,SAAUC,cAAc,CAACC,OAAe;EAC5C,OAAOH,mBAAmB,CAACI,IAAI,CAACD,OAAO,CAAC,IAAIA,OAAO,KAAKL,eAAe;AACzE;AAEA,OAAM,SAAUO,aAAa,CAACC,MAAc;EAC1C,OAAOL,kBAAkB,CAACG,IAAI,CAACE,MAAM,CAAC,IAAIA,MAAM,KAAKT,cAAc;AACrE;AAEA;;;;AAIA,OAAM,SAAUU,kBAAkB,CAACC,WAAwB;EACzD,OACEN,cAAc,CAACM,WAAW,CAACL,OAAO,CAAC,IAAIE,aAAa,CAACG,WAAW,CAACF,MAAM,CAAC;AAE5E;AAEA;;;;;;AAMA,OAAM,SAAUG,eAAe,CAACD,WAAwB;EACtD,OAAO,IAAIT,gBAAgB,CAACS,WAAW,CAAC;AAC1C","names":["INVALID_SPANID","INVALID_TRACEID","NonRecordingSpan","VALID_TRACEID_REGEX","VALID_SPANID_REGEX","isValidTraceId","traceId","test","isValidSpanId","spanId","isSpanContextValid","spanContext","wrapSpanContext"],"sources":["/home/yadu/Music/Gifty/node_modules/@opentelemetry/api/src/trace/spancontext-utils.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPANID, INVALID_TRACEID } from './invalid-span-constants';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\n\nconst VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;\nconst VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;\n\nexport function isValidTraceId(traceId: string): boolean {\n  return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;\n}\n\nexport function isValidSpanId(spanId: string): boolean {\n  return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;\n}\n\n/**\n * Returns true if this {@link SpanContext} is valid.\n * @return true if this {@link SpanContext} is valid.\n */\nexport function isSpanContextValid(spanContext: SpanContext): boolean {\n  return (\n    isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId)\n  );\n}\n\n/**\n * Wrap the given {@link SpanContext} in a new non-recording {@link Span}\n *\n * @param spanContext span context to be wrapped\n * @returns a new non-recording {@link Span} with the provided context\n */\nexport function wrapSpanContext(spanContext: SpanContext): Span {\n  return new NonRecordingSpan(spanContext);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}