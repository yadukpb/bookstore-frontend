{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hmacSha256Hook = exports.hmacSha512Hook = exports.aes256CtrDecryptHook = exports.aes256CtrEncryptHook = exports.aes256CbcDecryptHook = exports.aes256CbcEncryptHook = void 0;\nexports.makeAES256Hook = makeAES256Hook;\nexports.randomHook = randomHook;\nexports.sha256Hook = sha256Hook;\nexports.makeHmacHook = makeHmacHook;\nexports.signRsaSha256Hook = signRsaSha256Hook;\nconst crypto = require(\"crypto\");\nfunction makeAES256Hook(method, mode) {\n  return function (key, iv, input, output) {\n    let result;\n    try {\n      const cipher = crypto[method](mode, key, iv);\n      cipher.setAutoPadding(false);\n      result = cipher.update(input);\n      const final = cipher.final();\n      if (final.length > 0) {\n        result = Buffer.concat([result, final]);\n      }\n    } catch (e) {\n      return e;\n    }\n    result.copy(output);\n    return result.length;\n  };\n}\nfunction randomHook(buffer, count) {\n  try {\n    crypto.randomFillSync(buffer, 0, count);\n  } catch (e) {\n    return e;\n  }\n  return count;\n}\nfunction sha256Hook(input, output) {\n  let result;\n  try {\n    result = crypto.createHash('sha256').update(input).digest();\n  } catch (e) {\n    return e;\n  }\n  result.copy(output);\n  return result.length;\n}\nfunction makeHmacHook(algorithm) {\n  return (key, input, output) => {\n    let result;\n    try {\n      result = crypto.createHmac(algorithm, key).update(input).digest();\n    } catch (e) {\n      return e;\n    }\n    result.copy(output);\n    return result.length;\n  };\n}\nfunction signRsaSha256Hook(key, input, output) {\n  let result;\n  try {\n    const signer = crypto.createSign('sha256WithRSAEncryption');\n    const privateKey = Buffer.from(`-----BEGIN PRIVATE KEY-----\\n${key.toString('base64')}\\n-----END PRIVATE KEY-----\\n`);\n    result = signer.update(input).end().sign(privateKey);\n  } catch (e) {\n    return e;\n  }\n  result.copy(output);\n  return result.length;\n}\nexports.aes256CbcEncryptHook = makeAES256Hook('createCipheriv', 'aes-256-cbc');\nexports.aes256CbcDecryptHook = makeAES256Hook('createDecipheriv', 'aes-256-cbc');\nexports.aes256CtrEncryptHook = makeAES256Hook('createCipheriv', 'aes-256-ctr');\nexports.aes256CtrDecryptHook = makeAES256Hook('createDecipheriv', 'aes-256-ctr');\nexports.hmacSha512Hook = makeHmacHook('sha512');\nexports.hmacSha256Hook = makeHmacHook('sha256');","map":{"version":3,"mappings":";;;;;;AAIAA;AAwBAA;AASAA;AAaAA;AAcAA;AAhEA;AAIA,SAAgBC,cAAc,CAC5BC,MAA6C,EAC7CC,IAAmC;EAEnC,OAAO,UAAUC,GAAW,EAAEC,EAAU,EAAEC,KAAa,EAAEC,MAAc;IACrE,IAAIC,MAAM;IAEV,IAAI;MACF,MAAMC,MAAM,GAAGC,MAAM,CAACR,MAAM,CAAC,CAACC,IAAI,EAAEC,GAAG,EAAEC,EAAE,CAAC;MAC5CI,MAAM,CAACE,cAAc,CAAC,KAAK,CAAC;MAC5BH,MAAM,GAAGC,MAAM,CAACG,MAAM,CAACN,KAAK,CAAC;MAC7B,MAAMO,KAAK,GAAGJ,MAAM,CAACI,KAAK,EAAE;MAC5B,IAAIA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;QACpBN,MAAM,GAAGO,MAAM,CAACC,MAAM,CAAC,CAACR,MAAM,EAAEK,KAAK,CAAC,CAAC;MACzC;IACF,CAAC,CAAC,OAAOI,CAAC,EAAE;MACV,OAAOA,CAAC;IACV;IAEAT,MAAM,CAACU,IAAI,CAACX,MAAM,CAAC;IACnB,OAAOC,MAAM,CAACM,MAAM;EACtB,CAAC;AACH;AAEA,SAAgBK,UAAU,CAACC,MAAc,EAAEC,KAAa;EACtD,IAAI;IACFX,MAAM,CAACY,cAAc,CAACF,MAAM,EAAE,CAAC,EAAEC,KAAK,CAAC;EACzC,CAAC,CAAC,OAAOJ,CAAC,EAAE;IACV,OAAOA,CAAC;EACV;EACA,OAAOI,KAAK;AACd;AAEA,SAAgBE,UAAU,CAACjB,KAAa,EAAEC,MAAc;EACtD,IAAIC,MAAM;EACV,IAAI;IACFA,MAAM,GAAGE,MAAM,CAACc,UAAU,CAAC,QAAQ,CAAC,CAACZ,MAAM,CAACN,KAAK,CAAC,CAACmB,MAAM,EAAE;EAC7D,CAAC,CAAC,OAAOR,CAAC,EAAE;IACV,OAAOA,CAAC;EACV;EAEAT,MAAM,CAACU,IAAI,CAACX,MAAM,CAAC;EACnB,OAAOC,MAAM,CAACM,MAAM;AACtB;AAGA,SAAgBY,YAAY,CAACC,SAA8B;EACzD,OAAO,CAACvB,GAAW,EAAEE,KAAa,EAAEC,MAAc,KAAoB;IACpE,IAAIC,MAAM;IACV,IAAI;MACFA,MAAM,GAAGE,MAAM,CAACkB,UAAU,CAACD,SAAS,EAAEvB,GAAG,CAAC,CAACQ,MAAM,CAACN,KAAK,CAAC,CAACmB,MAAM,EAAE;IACnE,CAAC,CAAC,OAAOR,CAAC,EAAE;MACV,OAAOA,CAAC;IACV;IAEAT,MAAM,CAACU,IAAI,CAACX,MAAM,CAAC;IACnB,OAAOC,MAAM,CAACM,MAAM;EACtB,CAAC;AACH;AAEA,SAAgBe,iBAAiB,CAACzB,GAAW,EAAEE,KAAa,EAAEC,MAAc;EAC1E,IAAIC,MAAM;EACV,IAAI;IACF,MAAMsB,MAAM,GAAGpB,MAAM,CAACqB,UAAU,CAAC,yBAAyB,CAAC;IAC3D,MAAMC,UAAU,GAAGjB,MAAM,CAACkB,IAAI,CAC5B,gCAAgC7B,GAAG,CAAC8B,QAAQ,CAAC,QAAQ,CAAC,+BAA+B,CACtF;IAED1B,MAAM,GAAGsB,MAAM,CAAClB,MAAM,CAACN,KAAK,CAAC,CAAC6B,GAAG,EAAE,CAACC,IAAI,CAACJ,UAAU,CAAC;EACtD,CAAC,CAAC,OAAOf,CAAC,EAAE;IACV,OAAOA,CAAC;EACV;EAEAT,MAAM,CAACU,IAAI,CAACX,MAAM,CAAC;EACnB,OAAOC,MAAM,CAACM,MAAM;AACtB;AAEad,4BAAoB,GAAGC,cAAc,CAAC,gBAAgB,EAAE,aAAa,CAAC;AACtED,4BAAoB,GAAGC,cAAc,CAAC,kBAAkB,EAAE,aAAa,CAAC;AACxED,4BAAoB,GAAGC,cAAc,CAAC,gBAAgB,EAAE,aAAa,CAAC;AACtED,4BAAoB,GAAGC,cAAc,CAAC,kBAAkB,EAAE,aAAa,CAAC;AACxED,sBAAc,GAAG0B,YAAY,CAAC,QAAQ,CAAC;AACvC1B,sBAAc,GAAG0B,YAAY,CAAC,QAAQ,CAAC","names":["exports","makeAES256Hook","method","mode","key","iv","input","output","result","cipher","crypto","setAutoPadding","update","final","length","Buffer","concat","e","copy","randomHook","buffer","count","randomFillSync","sha256Hook","createHash","digest","makeHmacHook","algorithm","createHmac","signRsaSha256Hook","signer","createSign","privateKey","from","toString","end","sign"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/client-side-encryption/crypto_callbacks.ts"],"sourcesContent":["import * as crypto from 'crypto';\n\ntype AES256Callback = (key: Buffer, iv: Buffer, input: Buffer, output: Buffer) => number | Error;\n\nexport function makeAES256Hook(\n  method: 'createCipheriv' | 'createDecipheriv',\n  mode: 'aes-256-cbc' | 'aes-256-ctr'\n): AES256Callback {\n  return function (key: Buffer, iv: Buffer, input: Buffer, output: Buffer): number | Error {\n    let result;\n\n    try {\n      const cipher = crypto[method](mode, key, iv);\n      cipher.setAutoPadding(false);\n      result = cipher.update(input);\n      const final = cipher.final();\n      if (final.length > 0) {\n        result = Buffer.concat([result, final]);\n      }\n    } catch (e) {\n      return e;\n    }\n\n    result.copy(output);\n    return result.length;\n  };\n}\n\nexport function randomHook(buffer: Buffer, count: number): number | Error {\n  try {\n    crypto.randomFillSync(buffer, 0, count);\n  } catch (e) {\n    return e;\n  }\n  return count;\n}\n\nexport function sha256Hook(input: Buffer, output: Buffer): number | Error {\n  let result;\n  try {\n    result = crypto.createHash('sha256').update(input).digest();\n  } catch (e) {\n    return e;\n  }\n\n  result.copy(output);\n  return result.length;\n}\n\ntype HMACHook = (key: Buffer, input: Buffer, output: Buffer) => number | Error;\nexport function makeHmacHook(algorithm: 'sha512' | 'sha256'): HMACHook {\n  return (key: Buffer, input: Buffer, output: Buffer): number | Error => {\n    let result;\n    try {\n      result = crypto.createHmac(algorithm, key).update(input).digest();\n    } catch (e) {\n      return e;\n    }\n\n    result.copy(output);\n    return result.length;\n  };\n}\n\nexport function signRsaSha256Hook(key: Buffer, input: Buffer, output: Buffer): number | Error {\n  let result;\n  try {\n    const signer = crypto.createSign('sha256WithRSAEncryption');\n    const privateKey = Buffer.from(\n      `-----BEGIN PRIVATE KEY-----\\n${key.toString('base64')}\\n-----END PRIVATE KEY-----\\n`\n    );\n\n    result = signer.update(input).end().sign(privateKey);\n  } catch (e) {\n    return e;\n  }\n\n  result.copy(output);\n  return result.length;\n}\n\nexport const aes256CbcEncryptHook = makeAES256Hook('createCipheriv', 'aes-256-cbc');\nexport const aes256CbcDecryptHook = makeAES256Hook('createDecipheriv', 'aes-256-cbc');\nexport const aes256CtrEncryptHook = makeAES256Hook('createCipheriv', 'aes-256-ctr');\nexport const aes256CtrDecryptHook = makeAES256Hook('createDecipheriv', 'aes-256-ctr');\nexport const hmacSha512Hook = makeHmacHook('sha512');\nexport const hmacSha256Hook = makeHmacHook('sha256');\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}