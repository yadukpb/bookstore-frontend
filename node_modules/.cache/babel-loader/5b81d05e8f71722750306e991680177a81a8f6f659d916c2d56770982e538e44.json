{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CryptoConnection = exports.SizedMessageTransform = exports.Connection = void 0;\nexports.hasSessionSupport = hasSessionSupport;\nconst stream_1 = require(\"stream\");\nconst timers_1 = require(\"timers\");\nconst bson_1 = require(\"../bson\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_logger_1 = require(\"../mongo_logger\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst read_preference_1 = require(\"../read_preference\");\nconst common_1 = require(\"../sdam/common\");\nconst sessions_1 = require(\"../sessions\");\nconst utils_1 = require(\"../utils\");\nconst command_monitoring_events_1 = require(\"./command_monitoring_events\");\nconst commands_1 = require(\"./commands\");\nconst stream_description_1 = require(\"./stream_description\");\nconst compression_1 = require(\"./wire_protocol/compression\");\nconst on_data_1 = require(\"./wire_protocol/on_data\");\nconst responses_1 = require(\"./wire_protocol/responses\");\nconst shared_1 = require(\"./wire_protocol/shared\");\n/** @internal */\nfunction hasSessionSupport(conn) {\n  const description = conn.description;\n  return description.logicalSessionTimeoutMinutes != null;\n}\nfunction streamIdentifier(stream, options) {\n  if (options.proxyHost) {\n    // If proxy options are specified, the properties of `stream` itself\n    // will not accurately reflect what endpoint this is connected to.\n    return options.hostAddress.toString();\n  }\n  const {\n    remoteAddress,\n    remotePort\n  } = stream;\n  if (typeof remoteAddress === 'string' && typeof remotePort === 'number') {\n    return utils_1.HostAddress.fromHostPort(remoteAddress, remotePort).toString();\n  }\n  return (0, utils_1.uuidV4)().toString('hex');\n}\n/** @internal */\nclass Connection extends mongo_types_1.TypedEventEmitter {\n  constructor(stream, options) {\n    super();\n    this.lastHelloMS = -1;\n    this.helloOk = false;\n    this.delayedTimeoutId = null;\n    /** Indicates that the connection (including underlying TCP socket) has been closed. */\n    this.closed = false;\n    this.clusterTime = null;\n    this.error = null;\n    this.dataEvents = null;\n    this.socket = stream;\n    this.id = options.id;\n    this.address = streamIdentifier(stream, options);\n    this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n    this.monitorCommands = options.monitorCommands;\n    this.serverApi = options.serverApi;\n    this.mongoLogger = options.mongoLogger;\n    this.established = false;\n    this.description = new stream_description_1.StreamDescription(this.address, options);\n    this.generation = options.generation;\n    this.lastUseTime = (0, utils_1.now)();\n    this.messageStream = this.socket.on('error', this.onError.bind(this)).pipe(new SizedMessageTransform({\n      connection: this\n    })).on('error', this.onError.bind(this));\n    this.socket.on('close', this.onClose.bind(this));\n    this.socket.on('timeout', this.onTimeout.bind(this));\n    this.messageStream.pause();\n  }\n  get hello() {\n    return this.description.hello;\n  }\n  // the `connect` method stores the result of the handshake hello on the connection\n  set hello(response) {\n    this.description.receiveResponse(response);\n    Object.freeze(this.description);\n  }\n  get serviceId() {\n    return this.hello?.serviceId;\n  }\n  get loadBalanced() {\n    return this.description.loadBalanced;\n  }\n  get idleTime() {\n    return (0, utils_1.calculateDurationInMs)(this.lastUseTime);\n  }\n  get hasSessionSupport() {\n    return this.description.logicalSessionTimeoutMinutes != null;\n  }\n  get supportsOpMsg() {\n    return this.description != null && (0, utils_1.maxWireVersion)(this) >= 6 && !this.description.__nodejs_mock_server__;\n  }\n  get shouldEmitAndLogCommand() {\n    return (this.monitorCommands || this.established && !this.authContext?.reauthenticating && this.mongoLogger?.willLog(mongo_logger_1.MongoLoggableComponent.COMMAND, mongo_logger_1.SeverityLevel.DEBUG)) ?? false;\n  }\n  markAvailable() {\n    this.lastUseTime = (0, utils_1.now)();\n  }\n  onError(error) {\n    this.cleanup(error);\n  }\n  onClose() {\n    const message = `connection ${this.id} to ${this.address} closed`;\n    this.cleanup(new error_1.MongoNetworkError(message));\n  }\n  onTimeout() {\n    this.delayedTimeoutId = (0, timers_1.setTimeout)(() => {\n      const message = `connection ${this.id} to ${this.address} timed out`;\n      const beforeHandshake = this.hello == null;\n      this.cleanup(new error_1.MongoNetworkTimeoutError(message, {\n        beforeHandshake\n      }));\n    }, 1).unref(); // No need for this timer to hold the event loop open\n  }\n\n  destroy() {\n    if (this.closed) {\n      return;\n    }\n    // load balanced mode requires that these listeners remain on the connection\n    // after cleanup on timeouts, errors or close so we remove them before calling\n    // cleanup.\n    this.removeAllListeners(Connection.PINNED);\n    this.removeAllListeners(Connection.UNPINNED);\n    const message = `connection ${this.id} to ${this.address} closed`;\n    this.cleanup(new error_1.MongoNetworkError(message));\n  }\n  /**\n   * A method that cleans up the connection.  When `force` is true, this method\n   * forcibly destroys the socket.\n   *\n   * If an error is provided, any in-flight operations will be closed with the error.\n   *\n   * This method does nothing if the connection is already closed.\n   */\n  cleanup(error) {\n    if (this.closed) {\n      return;\n    }\n    this.socket.destroy();\n    this.error = error;\n    this.dataEvents?.throw(error).then(undefined, utils_1.squashError);\n    this.closed = true;\n    this.emit(Connection.CLOSE);\n  }\n  prepareCommand(db, command, options) {\n    let cmd = {\n      ...command\n    };\n    const readPreference = (0, shared_1.getReadPreference)(options);\n    const session = options?.session;\n    let clusterTime = this.clusterTime;\n    if (this.serverApi) {\n      const {\n        version,\n        strict,\n        deprecationErrors\n      } = this.serverApi;\n      cmd.apiVersion = version;\n      if (strict != null) cmd.apiStrict = strict;\n      if (deprecationErrors != null) cmd.apiDeprecationErrors = deprecationErrors;\n    }\n    if (this.hasSessionSupport && session) {\n      if (session.clusterTime && clusterTime && session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {\n        clusterTime = session.clusterTime;\n      }\n      const sessionError = (0, sessions_1.applySession)(session, cmd, options);\n      if (sessionError) throw sessionError;\n    } else if (session?.explicit) {\n      throw new error_1.MongoCompatibilityError('Current topology does not support sessions');\n    }\n    // if we have a known cluster time, gossip it\n    if (clusterTime) {\n      cmd.$clusterTime = clusterTime;\n    }\n    // For standalone, drivers MUST NOT set $readPreference.\n    if (this.description.type !== common_1.ServerType.Standalone) {\n      if (!(0, shared_1.isSharded)(this) && !this.description.loadBalanced && this.supportsOpMsg && options.directConnection === true && readPreference?.mode === 'primary') {\n        // For mongos and load balancers with 'primary' mode, drivers MUST NOT set $readPreference.\n        // For all other types with a direct connection, if the read preference is 'primary'\n        // (driver sets 'primary' as default if no read preference is configured),\n        // the $readPreference MUST be set to 'primaryPreferred'\n        // to ensure that any server type can handle the request.\n        cmd.$readPreference = read_preference_1.ReadPreference.primaryPreferred.toJSON();\n      } else if ((0, shared_1.isSharded)(this) && !this.supportsOpMsg && readPreference?.mode !== 'primary') {\n        // When sending a read operation via OP_QUERY and the $readPreference modifier,\n        // the query MUST be provided using the $query modifier.\n        cmd = {\n          $query: cmd,\n          $readPreference: readPreference.toJSON()\n        };\n      } else if (readPreference?.mode !== 'primary') {\n        // For mode 'primary', drivers MUST NOT set $readPreference.\n        // For all other read preference modes (i.e. 'secondary', 'primaryPreferred', ...),\n        // drivers MUST set $readPreference\n        cmd.$readPreference = readPreference.toJSON();\n      }\n    }\n    const commandOptions = {\n      numberToSkip: 0,\n      numberToReturn: -1,\n      checkKeys: false,\n      // This value is not overridable\n      secondaryOk: readPreference.secondaryOk(),\n      ...options\n    };\n    const message = this.supportsOpMsg ? new commands_1.OpMsgRequest(db, cmd, commandOptions) : new commands_1.OpQueryRequest(db, cmd, commandOptions);\n    return message;\n  }\n  async *sendWire(message, options, responseType) {\n    this.throwIfAborted();\n    if (typeof options.socketTimeoutMS === 'number') {\n      this.socket.setTimeout(options.socketTimeoutMS);\n    } else if (this.socketTimeoutMS !== 0) {\n      this.socket.setTimeout(this.socketTimeoutMS);\n    }\n    try {\n      await this.writeCommand(message, {\n        agreedCompressor: this.description.compressor ?? 'none',\n        zlibCompressionLevel: this.description.zlibCompressionLevel\n      });\n      if (options.noResponse || message.moreToCome) {\n        yield responses_1.MongoDBResponse.empty;\n        return;\n      }\n      this.throwIfAborted();\n      for await (const response of this.readMany()) {\n        this.socket.setTimeout(0);\n        const bson = response.parse();\n        const document = (responseType ?? responses_1.MongoDBResponse).make(bson);\n        yield document;\n        this.throwIfAborted();\n        if (typeof options.socketTimeoutMS === 'number') {\n          this.socket.setTimeout(options.socketTimeoutMS);\n        } else if (this.socketTimeoutMS !== 0) {\n          this.socket.setTimeout(this.socketTimeoutMS);\n        }\n      }\n    } finally {\n      this.socket.setTimeout(0);\n    }\n  }\n  async *sendCommand(ns, command, options, responseType) {\n    const message = this.prepareCommand(ns.db, command, options);\n    let started = 0;\n    if (this.shouldEmitAndLogCommand) {\n      started = (0, utils_1.now)();\n      this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_STARTED, message.databaseName, this.established, new command_monitoring_events_1.CommandStartedEvent(this, message, this.description.serverConnectionId));\n    }\n    // If `documentsReturnedIn` not set or raw is not enabled, use input bson options\n    // Otherwise, support raw flag. Raw only works for cursors that hardcode firstBatch/nextBatch fields\n    const bsonOptions = options.documentsReturnedIn == null || !options.raw ? options : {\n      ...options,\n      raw: false,\n      fieldsAsRaw: {\n        [options.documentsReturnedIn]: true\n      }\n    };\n    /** MongoDBResponse instance or subclass */\n    let document = undefined;\n    /** Cached result of a toObject call */\n    let object = undefined;\n    try {\n      this.throwIfAborted();\n      for await (document of this.sendWire(message, options, responseType)) {\n        object = undefined;\n        if (options.session != null) {\n          (0, sessions_1.updateSessionFromResponse)(options.session, document);\n        }\n        if (document.$clusterTime) {\n          this.clusterTime = document.$clusterTime;\n          this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n        }\n        if (document.ok === 0) {\n          throw new error_1.MongoServerError(object ??= document.toObject(bsonOptions));\n        }\n        if (this.shouldEmitAndLogCommand) {\n          this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_SUCCEEDED, message.databaseName, this.established, new command_monitoring_events_1.CommandSucceededEvent(this, message, options.noResponse ? undefined : message.moreToCome ? {\n            ok: 1\n          } : object ??= document.toObject(bsonOptions), started, this.description.serverConnectionId));\n        }\n        if (responseType == null) {\n          yield object ??= document.toObject(bsonOptions);\n        } else {\n          yield document;\n        }\n        this.throwIfAborted();\n      }\n    } catch (error) {\n      if (this.shouldEmitAndLogCommand) {\n        this.emitAndLogCommand(this.monitorCommands, Connection.COMMAND_FAILED, message.databaseName, this.established, new command_monitoring_events_1.CommandFailedEvent(this, message, error, started, this.description.serverConnectionId));\n      }\n      throw error;\n    }\n  }\n  async command(ns, command) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let responseType = arguments.length > 3 ? arguments[3] : undefined;\n    this.throwIfAborted();\n    for await (const document of this.sendCommand(ns, command, options, responseType)) {\n      return document;\n    }\n    throw new error_1.MongoUnexpectedServerResponseError('Unable to get response from server');\n  }\n  exhaustCommand(ns, command, options, replyListener) {\n    const exhaustLoop = async () => {\n      this.throwIfAborted();\n      for await (const reply of this.sendCommand(ns, command, options)) {\n        replyListener(undefined, reply);\n        this.throwIfAborted();\n      }\n      throw new error_1.MongoUnexpectedServerResponseError('Server ended moreToCome unexpectedly');\n    };\n    exhaustLoop().then(undefined, replyListener);\n  }\n  throwIfAborted() {\n    if (this.error) throw this.error;\n  }\n  /**\n   * @internal\n   *\n   * Writes an OP_MSG or OP_QUERY request to the socket, optionally compressing the command. This method\n   * waits until the socket's buffer has emptied (the Nodejs socket `drain` event has fired).\n   */\n  async writeCommand(command, options) {\n    const finalCommand = options.agreedCompressor === 'none' || !commands_1.OpCompressedRequest.canCompress(command) ? command : new commands_1.OpCompressedRequest(command, {\n      agreedCompressor: options.agreedCompressor ?? 'none',\n      zlibCompressionLevel: options.zlibCompressionLevel ?? 0\n    });\n    const buffer = Buffer.concat(await finalCommand.toBin());\n    if (this.socket.write(buffer)) return;\n    return await (0, utils_1.once)(this.socket, 'drain');\n  }\n  /**\n   * @internal\n   *\n   * Returns an async generator that yields full wire protocol messages from the underlying socket.  This function\n   * yields messages until `moreToCome` is false or not present in a response, or the caller cancels the request\n   * by calling `return` on the generator.\n   *\n   * Note that `for-await` loops call `return` automatically when the loop is exited.\n   */\n  async *readMany() {\n    try {\n      this.dataEvents = (0, on_data_1.onData)(this.messageStream);\n      this.messageStream.resume();\n      for await (const message of this.dataEvents) {\n        const response = await (0, compression_1.decompressResponse)(message);\n        yield response;\n        if (!response.moreToCome) {\n          return;\n        }\n      }\n    } finally {\n      this.dataEvents = null;\n      this.messageStream.pause();\n      this.throwIfAborted();\n    }\n  }\n}\nexports.Connection = Connection;\n/** @event */\nConnection.COMMAND_STARTED = constants_1.COMMAND_STARTED;\n/** @event */\nConnection.COMMAND_SUCCEEDED = constants_1.COMMAND_SUCCEEDED;\n/** @event */\nConnection.COMMAND_FAILED = constants_1.COMMAND_FAILED;\n/** @event */\nConnection.CLUSTER_TIME_RECEIVED = constants_1.CLUSTER_TIME_RECEIVED;\n/** @event */\nConnection.CLOSE = constants_1.CLOSE;\n/** @event */\nConnection.PINNED = constants_1.PINNED;\n/** @event */\nConnection.UNPINNED = constants_1.UNPINNED;\n/** @internal */\nclass SizedMessageTransform extends stream_1.Transform {\n  constructor(_ref) {\n    let {\n      connection\n    } = _ref;\n    super({\n      objectMode: false\n    });\n    this.bufferPool = new utils_1.BufferPool();\n    this.connection = connection;\n  }\n  _transform(chunk, encoding, callback) {\n    if (this.connection.delayedTimeoutId != null) {\n      (0, timers_1.clearTimeout)(this.connection.delayedTimeoutId);\n      this.connection.delayedTimeoutId = null;\n    }\n    this.bufferPool.append(chunk);\n    const sizeOfMessage = this.bufferPool.getInt32();\n    if (sizeOfMessage == null) {\n      return callback();\n    }\n    if (sizeOfMessage < 0) {\n      return callback(new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}, too small`));\n    }\n    if (sizeOfMessage > this.bufferPool.length) {\n      return callback();\n    }\n    const message = this.bufferPool.read(sizeOfMessage);\n    return callback(null, message);\n  }\n}\nexports.SizedMessageTransform = SizedMessageTransform;\n/** @internal */\nclass CryptoConnection extends Connection {\n  constructor(stream, options) {\n    super(stream, options);\n    this.autoEncrypter = options.autoEncrypter;\n  }\n  async command(ns, cmd, options, responseType) {\n    const {\n      autoEncrypter\n    } = this;\n    if (!autoEncrypter) {\n      // TODO(NODE-6065): throw a MongoRuntimeError in Node V7\n      // @ts-expect-error No cause provided because there is no underlying error.\n      throw new error_1.MongoMissingDependencyError('No AutoEncrypter available for encryption', {\n        dependencyName: 'n/a'\n      });\n    }\n    const serverWireVersion = (0, utils_1.maxWireVersion)(this);\n    if (serverWireVersion === 0) {\n      // This means the initial handshake hasn't happened yet\n      return await super.command(ns, cmd, options, responseType);\n    }\n    if (serverWireVersion < 8) {\n      throw new error_1.MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2');\n    }\n    // Save sort or indexKeys based on the command being run\n    // the encrypt API serializes our JS objects to BSON to pass to the native code layer\n    // and then deserializes the encrypted result, the protocol level components\n    // of the command (ex. sort) are then converted to JS objects potentially losing\n    // import key order information. These fields are never encrypted so we can save the values\n    // from before the encryption and replace them after encryption has been performed\n    const sort = cmd.find || cmd.findAndModify ? cmd.sort : null;\n    const indexKeys = cmd.createIndexes ? cmd.indexes.map(index => index.key) : null;\n    const encrypted = await autoEncrypter.encrypt(ns.toString(), cmd, options);\n    // Replace the saved values\n    if (sort != null && (cmd.find || cmd.findAndModify)) {\n      encrypted.sort = sort;\n    }\n    if (indexKeys != null && cmd.createIndexes) {\n      for (const [offset, index] of indexKeys.entries()) {\n        // @ts-expect-error `encrypted` is a generic \"command\", but we've narrowed for only `createIndexes` commands here\n        encrypted.indexes[offset].key = index;\n      }\n    }\n    const encryptedResponse = await super.command(ns, encrypted, options,\n    // Eventually we want to require `responseType` which means we would satisfy `T` as the return type.\n    // In the meantime, we want encryptedResponse to always be _at least_ a MongoDBResponse if not a more specific subclass\n    // So that we can ensure we have access to the on-demand APIs for decorate response\n    responseType ?? responses_1.MongoDBResponse);\n    const result = await autoEncrypter.decrypt(encryptedResponse.toBytes(), options);\n    const decryptedResponse = responseType?.make(result) ?? (0, bson_1.deserialize)(result, options);\n    if (autoEncrypter[constants_1.kDecorateResult]) {\n      if (responseType == null) {\n        (0, utils_1.decorateDecryptionResult)(decryptedResponse, encryptedResponse.toObject(), true);\n      } else if (decryptedResponse instanceof responses_1.CursorResponse) {\n        decryptedResponse.encryptedResponse = encryptedResponse;\n      }\n    }\n    return decryptedResponse;\n  }\n}\nexports.CryptoConnection = CryptoConnection;","map":{"version":3,"mappings":"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","names":["exports","hasSessionSupport","conn","description","logicalSessionTimeoutMinutes","streamIdentifier","stream","options","proxyHost","hostAddress","toString","remoteAddress","remotePort","utils_1","fromHostPort","Connection","mongo_types_1","constructor","socket","id","address","socketTimeoutMS","monitorCommands","serverApi","mongoLogger","established","stream_description_1","generation","lastUseTime","messageStream","on","onError","bind","pipe","SizedMessageTransform","connection","onClose","onTimeout","pause","hello","response","receiveResponse","Object","freeze","serviceId","loadBalanced","idleTime","supportsOpMsg","__nodejs_mock_server__","shouldEmitAndLogCommand","authContext","reauthenticating","willLog","mongo_logger_1","COMMAND","DEBUG","markAvailable","error","cleanup","message","error_1","delayedTimeoutId","beforeHandshake","unref","destroy","closed","removeAllListeners","PINNED","UNPINNED","dataEvents","throw","then","undefined","emit","CLOSE","prepareCommand","db","command","cmd","readPreference","session","clusterTime","version","strict","deprecationErrors","apiVersion","apiStrict","apiDeprecationErrors","greaterThan","sessionError","explicit","$clusterTime","type","common_1","Standalone","directConnection","mode","$readPreference","read_preference_1","primaryPreferred","toJSON","$query","commandOptions","numberToSkip","numberToReturn","checkKeys","secondaryOk","commands_1","sendWire","responseType","throwIfAborted","setTimeout","writeCommand","agreedCompressor","compressor","zlibCompressionLevel","noResponse","moreToCome","responses_1","empty","readMany","bson","parse","document","make","sendCommand","ns","started","emitAndLogCommand","COMMAND_STARTED","databaseName","command_monitoring_events_1","serverConnectionId","bsonOptions","documentsReturnedIn","raw","fieldsAsRaw","object","CLUSTER_TIME_RECEIVED","ok","toObject","COMMAND_SUCCEEDED","COMMAND_FAILED","exhaustCommand","replyListener","exhaustLoop","reply","finalCommand","canCompress","buffer","Buffer","concat","toBin","write","resume","constants_1","stream_1","objectMode","bufferPool","_transform","chunk","encoding","callback","append","sizeOfMessage","getInt32","length","read","CryptoConnection","autoEncrypter","dependencyName","serverWireVersion","sort","find","findAndModify","indexKeys","createIndexes","indexes","map","index","key","encrypted","encrypt","offset","entries","encryptedResponse","result","decrypt","toBytes","decryptedResponse"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/cmap/connection.ts"],"sourcesContent":["import { type Readable, Transform, type TransformCallback } from 'stream';\nimport { clearTimeout, setTimeout } from 'timers';\n\nimport {\n  type BSONSerializeOptions,\n  deserialize,\n  type DeserializeOptions,\n  type Document,\n  type ObjectId\n} from '../bson';\nimport { type AutoEncrypter } from '../client-side-encryption/auto_encrypter';\nimport {\n  CLOSE,\n  CLUSTER_TIME_RECEIVED,\n  COMMAND_FAILED,\n  COMMAND_STARTED,\n  COMMAND_SUCCEEDED,\n  kDecorateResult,\n  PINNED,\n  UNPINNED\n} from '../constants';\nimport {\n  MongoCompatibilityError,\n  MongoMissingDependencyError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoParseError,\n  MongoServerError,\n  MongoUnexpectedServerResponseError\n} from '../error';\nimport type { ServerApi, SupportedNodeConnectionOptions } from '../mongo_client';\nimport { type MongoClientAuthProviders } from '../mongo_client_auth_providers';\nimport { MongoLoggableComponent, type MongoLogger, SeverityLevel } from '../mongo_logger';\nimport { type CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport { ReadPreference, type ReadPreferenceLike } from '../read_preference';\nimport { ServerType } from '../sdam/common';\nimport { applySession, type ClientSession, updateSessionFromResponse } from '../sessions';\nimport {\n  BufferPool,\n  calculateDurationInMs,\n  type Callback,\n  decorateDecryptionResult,\n  HostAddress,\n  maxWireVersion,\n  type MongoDBNamespace,\n  now,\n  once,\n  squashError,\n  uuidV4\n} from '../utils';\nimport type { WriteConcern } from '../write_concern';\nimport type { AuthContext } from './auth/auth_provider';\nimport type { MongoCredentials } from './auth/mongo_credentials';\nimport {\n  CommandFailedEvent,\n  CommandStartedEvent,\n  CommandSucceededEvent\n} from './command_monitoring_events';\nimport {\n  OpCompressedRequest,\n  OpMsgRequest,\n  type OpMsgResponse,\n  OpQueryRequest,\n  type OpReply,\n  type WriteProtocolMessageType\n} from './commands';\nimport type { Stream } from './connect';\nimport type { ClientMetadata } from './handshake/client_metadata';\nimport { StreamDescription, type StreamDescriptionOptions } from './stream_description';\nimport { type CompressorName, decompressResponse } from './wire_protocol/compression';\nimport { onData } from './wire_protocol/on_data';\nimport {\n  CursorResponse,\n  MongoDBResponse,\n  type MongoDBResponseConstructor\n} from './wire_protocol/responses';\nimport { getReadPreference, isSharded } from './wire_protocol/shared';\n\n/** @internal */\nexport interface CommandOptions extends BSONSerializeOptions {\n  secondaryOk?: boolean;\n  /** Specify read preference if command supports it */\n  readPreference?: ReadPreferenceLike;\n  monitoring?: boolean;\n  socketTimeoutMS?: number;\n  /** Session to use for the operation */\n  session?: ClientSession;\n  documentsReturnedIn?: string;\n  noResponse?: boolean;\n  omitReadPreference?: boolean;\n\n  // TODO(NODE-2802): Currently the CommandOptions take a property willRetryWrite which is a hint\n  // from executeOperation that the txnNum should be applied to this command.\n  // Applying a session to a command should happen as part of command construction,\n  // most likely in the CommandOperation#executeCommand method, where we have access to\n  // the details we need to determine if a txnNum should also be applied.\n  willRetryWrite?: boolean;\n\n  writeConcern?: WriteConcern;\n\n  directConnection?: boolean;\n}\n\n/** @public */\nexport interface ProxyOptions {\n  proxyHost?: string;\n  proxyPort?: number;\n  proxyUsername?: string;\n  proxyPassword?: string;\n}\n\n/** @public */\nexport interface ConnectionOptions\n  extends SupportedNodeConnectionOptions,\n    StreamDescriptionOptions,\n    ProxyOptions {\n  // Internal creation info\n  id: number | '<monitor>';\n  generation: number;\n  hostAddress: HostAddress;\n  /** @internal */\n  autoEncrypter?: AutoEncrypter;\n  serverApi?: ServerApi;\n  monitorCommands: boolean;\n  /** @internal */\n  connectionType?: any;\n  credentials?: MongoCredentials;\n  /** @internal */\n  authProviders: MongoClientAuthProviders;\n  connectTimeoutMS?: number;\n  tls: boolean;\n  noDelay?: boolean;\n  socketTimeoutMS?: number;\n  cancellationToken?: CancellationToken;\n  metadata: ClientMetadata;\n  /** @internal */\n  extendedMetadata: Promise<Document>;\n  /** @internal */\n  mongoLogger?: MongoLogger | undefined;\n}\n\n/** @public */\nexport type ConnectionEvents = {\n  commandStarted(event: CommandStartedEvent): void;\n  commandSucceeded(event: CommandSucceededEvent): void;\n  commandFailed(event: CommandFailedEvent): void;\n  clusterTimeReceived(clusterTime: Document): void;\n  close(): void;\n  pinned(pinType: string): void;\n  unpinned(pinType: string): void;\n};\n\n/** @internal */\nexport function hasSessionSupport(conn: Connection): boolean {\n  const description = conn.description;\n  return description.logicalSessionTimeoutMinutes != null;\n}\n\nfunction streamIdentifier(stream: Stream, options: ConnectionOptions): string {\n  if (options.proxyHost) {\n    // If proxy options are specified, the properties of `stream` itself\n    // will not accurately reflect what endpoint this is connected to.\n    return options.hostAddress.toString();\n  }\n\n  const { remoteAddress, remotePort } = stream;\n  if (typeof remoteAddress === 'string' && typeof remotePort === 'number') {\n    return HostAddress.fromHostPort(remoteAddress, remotePort).toString();\n  }\n\n  return uuidV4().toString('hex');\n}\n\n/** @internal */\nexport class Connection extends TypedEventEmitter<ConnectionEvents> {\n  public id: number | '<monitor>';\n  public address: string;\n  public lastHelloMS = -1;\n  public serverApi?: ServerApi;\n  public helloOk = false;\n  public authContext?: AuthContext;\n  public delayedTimeoutId: NodeJS.Timeout | null = null;\n  public generation: number;\n  public accessToken?: string;\n  public readonly description: Readonly<StreamDescription>;\n  /**\n   * Represents if the connection has been established:\n   *  - TCP handshake\n   *  - TLS negotiated\n   *  - mongodb handshake (saslStart, saslContinue), includes authentication\n   *\n   * Once connection is established, command logging can log events (if enabled)\n   */\n  public established: boolean;\n  /** Indicates that the connection (including underlying TCP socket) has been closed. */\n  public closed = false;\n\n  private lastUseTime: number;\n  private clusterTime: Document | null = null;\n  private error: Error | null = null;\n  private dataEvents: AsyncGenerator<Buffer, void, void> | null = null;\n\n  private readonly socketTimeoutMS: number;\n  private readonly monitorCommands: boolean;\n  private readonly socket: Stream;\n  private readonly messageStream: Readable;\n\n  /** @event */\n  static readonly COMMAND_STARTED = COMMAND_STARTED;\n  /** @event */\n  static readonly COMMAND_SUCCEEDED = COMMAND_SUCCEEDED;\n  /** @event */\n  static readonly COMMAND_FAILED = COMMAND_FAILED;\n  /** @event */\n  static readonly CLUSTER_TIME_RECEIVED = CLUSTER_TIME_RECEIVED;\n  /** @event */\n  static readonly CLOSE = CLOSE;\n  /** @event */\n  static readonly PINNED = PINNED;\n  /** @event */\n  static readonly UNPINNED = UNPINNED;\n\n  constructor(stream: Stream, options: ConnectionOptions) {\n    super();\n\n    this.socket = stream;\n    this.id = options.id;\n    this.address = streamIdentifier(stream, options);\n    this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n    this.monitorCommands = options.monitorCommands;\n    this.serverApi = options.serverApi;\n    this.mongoLogger = options.mongoLogger;\n    this.established = false;\n\n    this.description = new StreamDescription(this.address, options);\n    this.generation = options.generation;\n    this.lastUseTime = now();\n\n    this.messageStream = this.socket\n      .on('error', this.onError.bind(this))\n      .pipe(new SizedMessageTransform({ connection: this }))\n      .on('error', this.onError.bind(this));\n    this.socket.on('close', this.onClose.bind(this));\n    this.socket.on('timeout', this.onTimeout.bind(this));\n\n    this.messageStream.pause();\n  }\n\n  public get hello() {\n    return this.description.hello;\n  }\n\n  // the `connect` method stores the result of the handshake hello on the connection\n  public set hello(response: Document | null) {\n    this.description.receiveResponse(response);\n    Object.freeze(this.description);\n  }\n\n  public get serviceId(): ObjectId | undefined {\n    return this.hello?.serviceId;\n  }\n\n  public get loadBalanced(): boolean {\n    return this.description.loadBalanced;\n  }\n\n  public get idleTime(): number {\n    return calculateDurationInMs(this.lastUseTime);\n  }\n\n  private get hasSessionSupport(): boolean {\n    return this.description.logicalSessionTimeoutMinutes != null;\n  }\n\n  private get supportsOpMsg(): boolean {\n    return (\n      this.description != null &&\n      maxWireVersion(this) >= 6 &&\n      !this.description.__nodejs_mock_server__\n    );\n  }\n\n  private get shouldEmitAndLogCommand(): boolean {\n    return (\n      (this.monitorCommands ||\n        (this.established &&\n          !this.authContext?.reauthenticating &&\n          this.mongoLogger?.willLog(MongoLoggableComponent.COMMAND, SeverityLevel.DEBUG))) ??\n      false\n    );\n  }\n\n  public markAvailable(): void {\n    this.lastUseTime = now();\n  }\n\n  public onError(error: Error) {\n    this.cleanup(error);\n  }\n\n  private onClose() {\n    const message = `connection ${this.id} to ${this.address} closed`;\n    this.cleanup(new MongoNetworkError(message));\n  }\n\n  private onTimeout() {\n    this.delayedTimeoutId = setTimeout(() => {\n      const message = `connection ${this.id} to ${this.address} timed out`;\n      const beforeHandshake = this.hello == null;\n      this.cleanup(new MongoNetworkTimeoutError(message, { beforeHandshake }));\n    }, 1).unref(); // No need for this timer to hold the event loop open\n  }\n\n  public destroy(): void {\n    if (this.closed) {\n      return;\n    }\n\n    // load balanced mode requires that these listeners remain on the connection\n    // after cleanup on timeouts, errors or close so we remove them before calling\n    // cleanup.\n    this.removeAllListeners(Connection.PINNED);\n    this.removeAllListeners(Connection.UNPINNED);\n    const message = `connection ${this.id} to ${this.address} closed`;\n    this.cleanup(new MongoNetworkError(message));\n  }\n\n  /**\n   * A method that cleans up the connection.  When `force` is true, this method\n   * forcibly destroys the socket.\n   *\n   * If an error is provided, any in-flight operations will be closed with the error.\n   *\n   * This method does nothing if the connection is already closed.\n   */\n  private cleanup(error: Error): void {\n    if (this.closed) {\n      return;\n    }\n\n    this.socket.destroy();\n    this.error = error;\n\n    this.dataEvents?.throw(error).then(undefined, squashError);\n    this.closed = true;\n    this.emit(Connection.CLOSE);\n  }\n\n  private prepareCommand(db: string, command: Document, options: CommandOptions) {\n    let cmd = { ...command };\n\n    const readPreference = getReadPreference(options);\n    const session = options?.session;\n\n    let clusterTime = this.clusterTime;\n\n    if (this.serverApi) {\n      const { version, strict, deprecationErrors } = this.serverApi;\n      cmd.apiVersion = version;\n      if (strict != null) cmd.apiStrict = strict;\n      if (deprecationErrors != null) cmd.apiDeprecationErrors = deprecationErrors;\n    }\n\n    if (this.hasSessionSupport && session) {\n      if (\n        session.clusterTime &&\n        clusterTime &&\n        session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)\n      ) {\n        clusterTime = session.clusterTime;\n      }\n\n      const sessionError = applySession(session, cmd, options);\n      if (sessionError) throw sessionError;\n    } else if (session?.explicit) {\n      throw new MongoCompatibilityError('Current topology does not support sessions');\n    }\n\n    // if we have a known cluster time, gossip it\n    if (clusterTime) {\n      cmd.$clusterTime = clusterTime;\n    }\n\n    // For standalone, drivers MUST NOT set $readPreference.\n    if (this.description.type !== ServerType.Standalone) {\n      if (\n        !isSharded(this) &&\n        !this.description.loadBalanced &&\n        this.supportsOpMsg &&\n        options.directConnection === true &&\n        readPreference?.mode === 'primary'\n      ) {\n        // For mongos and load balancers with 'primary' mode, drivers MUST NOT set $readPreference.\n        // For all other types with a direct connection, if the read preference is 'primary'\n        // (driver sets 'primary' as default if no read preference is configured),\n        // the $readPreference MUST be set to 'primaryPreferred'\n        // to ensure that any server type can handle the request.\n        cmd.$readPreference = ReadPreference.primaryPreferred.toJSON();\n      } else if (isSharded(this) && !this.supportsOpMsg && readPreference?.mode !== 'primary') {\n        // When sending a read operation via OP_QUERY and the $readPreference modifier,\n        // the query MUST be provided using the $query modifier.\n        cmd = {\n          $query: cmd,\n          $readPreference: readPreference.toJSON()\n        };\n      } else if (readPreference?.mode !== 'primary') {\n        // For mode 'primary', drivers MUST NOT set $readPreference.\n        // For all other read preference modes (i.e. 'secondary', 'primaryPreferred', ...),\n        // drivers MUST set $readPreference\n        cmd.$readPreference = readPreference.toJSON();\n      }\n    }\n\n    const commandOptions = {\n      numberToSkip: 0,\n      numberToReturn: -1,\n      checkKeys: false,\n      // This value is not overridable\n      secondaryOk: readPreference.secondaryOk(),\n      ...options\n    };\n\n    const message = this.supportsOpMsg\n      ? new OpMsgRequest(db, cmd, commandOptions)\n      : new OpQueryRequest(db, cmd, commandOptions);\n\n    return message;\n  }\n\n  private async *sendWire(\n    message: WriteProtocolMessageType,\n    options: CommandOptions,\n    responseType?: MongoDBResponseConstructor\n  ): AsyncGenerator<MongoDBResponse> {\n    this.throwIfAborted();\n\n    if (typeof options.socketTimeoutMS === 'number') {\n      this.socket.setTimeout(options.socketTimeoutMS);\n    } else if (this.socketTimeoutMS !== 0) {\n      this.socket.setTimeout(this.socketTimeoutMS);\n    }\n\n    try {\n      await this.writeCommand(message, {\n        agreedCompressor: this.description.compressor ?? 'none',\n        zlibCompressionLevel: this.description.zlibCompressionLevel\n      });\n\n      if (options.noResponse || message.moreToCome) {\n        yield MongoDBResponse.empty;\n        return;\n      }\n\n      this.throwIfAborted();\n\n      for await (const response of this.readMany()) {\n        this.socket.setTimeout(0);\n        const bson = response.parse();\n\n        const document = (responseType ?? MongoDBResponse).make(bson);\n\n        yield document;\n        this.throwIfAborted();\n\n        if (typeof options.socketTimeoutMS === 'number') {\n          this.socket.setTimeout(options.socketTimeoutMS);\n        } else if (this.socketTimeoutMS !== 0) {\n          this.socket.setTimeout(this.socketTimeoutMS);\n        }\n      }\n    } finally {\n      this.socket.setTimeout(0);\n    }\n  }\n\n  private async *sendCommand(\n    ns: MongoDBNamespace,\n    command: Document,\n    options: CommandOptions,\n    responseType?: MongoDBResponseConstructor\n  ) {\n    const message = this.prepareCommand(ns.db, command, options);\n\n    let started = 0;\n    if (this.shouldEmitAndLogCommand) {\n      started = now();\n      this.emitAndLogCommand(\n        this.monitorCommands,\n        Connection.COMMAND_STARTED,\n        message.databaseName,\n        this.established,\n        new CommandStartedEvent(this, message, this.description.serverConnectionId)\n      );\n    }\n\n    // If `documentsReturnedIn` not set or raw is not enabled, use input bson options\n    // Otherwise, support raw flag. Raw only works for cursors that hardcode firstBatch/nextBatch fields\n    const bsonOptions: DeserializeOptions =\n      options.documentsReturnedIn == null || !options.raw\n        ? options\n        : {\n            ...options,\n            raw: false,\n            fieldsAsRaw: { [options.documentsReturnedIn]: true }\n          };\n\n    /** MongoDBResponse instance or subclass */\n    let document: MongoDBResponse | undefined = undefined;\n    /** Cached result of a toObject call */\n    let object: Document | undefined = undefined;\n    try {\n      this.throwIfAborted();\n      for await (document of this.sendWire(message, options, responseType)) {\n        object = undefined;\n        if (options.session != null) {\n          updateSessionFromResponse(options.session, document);\n        }\n\n        if (document.$clusterTime) {\n          this.clusterTime = document.$clusterTime;\n          this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n        }\n\n        if (document.ok === 0) {\n          throw new MongoServerError((object ??= document.toObject(bsonOptions)));\n        }\n\n        if (this.shouldEmitAndLogCommand) {\n          this.emitAndLogCommand(\n            this.monitorCommands,\n            Connection.COMMAND_SUCCEEDED,\n            message.databaseName,\n            this.established,\n            new CommandSucceededEvent(\n              this,\n              message,\n              options.noResponse\n                ? undefined\n                : message.moreToCome\n                  ? { ok: 1 }\n                  : (object ??= document.toObject(bsonOptions)),\n              started,\n              this.description.serverConnectionId\n            )\n          );\n        }\n\n        if (responseType == null) {\n          yield (object ??= document.toObject(bsonOptions));\n        } else {\n          yield document;\n        }\n\n        this.throwIfAborted();\n      }\n    } catch (error) {\n      if (this.shouldEmitAndLogCommand) {\n        this.emitAndLogCommand(\n          this.monitorCommands,\n          Connection.COMMAND_FAILED,\n          message.databaseName,\n          this.established,\n          new CommandFailedEvent(this, message, error, started, this.description.serverConnectionId)\n        );\n      }\n      throw error;\n    }\n  }\n\n  public async command<T extends MongoDBResponseConstructor>(\n    ns: MongoDBNamespace,\n    command: Document,\n    options: CommandOptions | undefined,\n    responseType: T\n  ): Promise<InstanceType<T>>;\n\n  public async command<T extends MongoDBResponseConstructor>(\n    ns: MongoDBNamespace,\n    command: Document,\n    options: CommandOptions | undefined,\n    responseType: T | undefined\n  ): Promise<typeof responseType extends undefined ? Document : InstanceType<T>>;\n\n  public async command(\n    ns: MongoDBNamespace,\n    command: Document,\n    options?: CommandOptions\n  ): Promise<Document>;\n\n  public async command(\n    ns: MongoDBNamespace,\n    command: Document,\n    options: CommandOptions = {},\n    responseType?: MongoDBResponseConstructor\n  ): Promise<Document> {\n    this.throwIfAborted();\n    for await (const document of this.sendCommand(ns, command, options, responseType)) {\n      return document;\n    }\n    throw new MongoUnexpectedServerResponseError('Unable to get response from server');\n  }\n\n  public exhaustCommand(\n    ns: MongoDBNamespace,\n    command: Document,\n    options: CommandOptions,\n    replyListener: Callback\n  ) {\n    const exhaustLoop = async () => {\n      this.throwIfAborted();\n      for await (const reply of this.sendCommand(ns, command, options)) {\n        replyListener(undefined, reply);\n        this.throwIfAborted();\n      }\n      throw new MongoUnexpectedServerResponseError('Server ended moreToCome unexpectedly');\n    };\n\n    exhaustLoop().then(undefined, replyListener);\n  }\n\n  private throwIfAborted() {\n    if (this.error) throw this.error;\n  }\n\n  /**\n   * @internal\n   *\n   * Writes an OP_MSG or OP_QUERY request to the socket, optionally compressing the command. This method\n   * waits until the socket's buffer has emptied (the Nodejs socket `drain` event has fired).\n   */\n  private async writeCommand(\n    command: WriteProtocolMessageType,\n    options: { agreedCompressor?: CompressorName; zlibCompressionLevel?: number }\n  ): Promise<void> {\n    const finalCommand =\n      options.agreedCompressor === 'none' || !OpCompressedRequest.canCompress(command)\n        ? command\n        : new OpCompressedRequest(command, {\n            agreedCompressor: options.agreedCompressor ?? 'none',\n            zlibCompressionLevel: options.zlibCompressionLevel ?? 0\n          });\n\n    const buffer = Buffer.concat(await finalCommand.toBin());\n\n    if (this.socket.write(buffer)) return;\n    return await once(this.socket, 'drain');\n  }\n\n  /**\n   * @internal\n   *\n   * Returns an async generator that yields full wire protocol messages from the underlying socket.  This function\n   * yields messages until `moreToCome` is false or not present in a response, or the caller cancels the request\n   * by calling `return` on the generator.\n   *\n   * Note that `for-await` loops call `return` automatically when the loop is exited.\n   */\n  private async *readMany(): AsyncGenerator<OpMsgResponse | OpReply> {\n    try {\n      this.dataEvents = onData(this.messageStream);\n      this.messageStream.resume();\n      for await (const message of this.dataEvents) {\n        const response = await decompressResponse(message);\n        yield response;\n\n        if (!response.moreToCome) {\n          return;\n        }\n      }\n    } finally {\n      this.dataEvents = null;\n      this.messageStream.pause();\n      this.throwIfAborted();\n    }\n  }\n}\n\n/** @internal */\nexport class SizedMessageTransform extends Transform {\n  bufferPool: BufferPool;\n  connection: Connection;\n\n  constructor({ connection }: { connection: Connection }) {\n    super({ objectMode: false });\n    this.bufferPool = new BufferPool();\n    this.connection = connection;\n  }\n\n  override _transform(chunk: Buffer, encoding: unknown, callback: TransformCallback): void {\n    if (this.connection.delayedTimeoutId != null) {\n      clearTimeout(this.connection.delayedTimeoutId);\n      this.connection.delayedTimeoutId = null;\n    }\n\n    this.bufferPool.append(chunk);\n    const sizeOfMessage = this.bufferPool.getInt32();\n\n    if (sizeOfMessage == null) {\n      return callback();\n    }\n\n    if (sizeOfMessage < 0) {\n      return callback(new MongoParseError(`Invalid message size: ${sizeOfMessage}, too small`));\n    }\n\n    if (sizeOfMessage > this.bufferPool.length) {\n      return callback();\n    }\n\n    const message = this.bufferPool.read(sizeOfMessage);\n    return callback(null, message);\n  }\n}\n\n/** @internal */\nexport class CryptoConnection extends Connection {\n  /** @internal */\n  autoEncrypter?: AutoEncrypter;\n\n  constructor(stream: Stream, options: ConnectionOptions) {\n    super(stream, options);\n    this.autoEncrypter = options.autoEncrypter;\n  }\n\n  public override async command<T extends MongoDBResponseConstructor>(\n    ns: MongoDBNamespace,\n    command: Document,\n    options: CommandOptions | undefined,\n    responseType: T\n  ): Promise<InstanceType<T>>;\n\n  public override async command(\n    ns: MongoDBNamespace,\n    command: Document,\n    options?: CommandOptions\n  ): Promise<Document>;\n\n  override async command<T extends MongoDBResponseConstructor>(\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options?: CommandOptions,\n    responseType?: T | undefined\n  ): Promise<Document> {\n    const { autoEncrypter } = this;\n    if (!autoEncrypter) {\n      // TODO(NODE-6065): throw a MongoRuntimeError in Node V7\n      // @ts-expect-error No cause provided because there is no underlying error.\n      throw new MongoMissingDependencyError('No AutoEncrypter available for encryption', {\n        dependencyName: 'n/a'\n      });\n    }\n\n    const serverWireVersion = maxWireVersion(this);\n    if (serverWireVersion === 0) {\n      // This means the initial handshake hasn't happened yet\n      return await super.command<T>(ns, cmd, options, responseType);\n    }\n\n    if (serverWireVersion < 8) {\n      throw new MongoCompatibilityError(\n        'Auto-encryption requires a minimum MongoDB version of 4.2'\n      );\n    }\n\n    // Save sort or indexKeys based on the command being run\n    // the encrypt API serializes our JS objects to BSON to pass to the native code layer\n    // and then deserializes the encrypted result, the protocol level components\n    // of the command (ex. sort) are then converted to JS objects potentially losing\n    // import key order information. These fields are never encrypted so we can save the values\n    // from before the encryption and replace them after encryption has been performed\n    const sort: Map<string, number> | null = cmd.find || cmd.findAndModify ? cmd.sort : null;\n    const indexKeys: Map<string, number>[] | null = cmd.createIndexes\n      ? cmd.indexes.map((index: { key: Map<string, number> }) => index.key)\n      : null;\n\n    const encrypted = await autoEncrypter.encrypt(ns.toString(), cmd, options);\n\n    // Replace the saved values\n    if (sort != null && (cmd.find || cmd.findAndModify)) {\n      encrypted.sort = sort;\n    }\n\n    if (indexKeys != null && cmd.createIndexes) {\n      for (const [offset, index] of indexKeys.entries()) {\n        // @ts-expect-error `encrypted` is a generic \"command\", but we've narrowed for only `createIndexes` commands here\n        encrypted.indexes[offset].key = index;\n      }\n    }\n\n    const encryptedResponse = await super.command(\n      ns,\n      encrypted,\n      options,\n      // Eventually we want to require `responseType` which means we would satisfy `T` as the return type.\n      // In the meantime, we want encryptedResponse to always be _at least_ a MongoDBResponse if not a more specific subclass\n      // So that we can ensure we have access to the on-demand APIs for decorate response\n      responseType ?? MongoDBResponse\n    );\n\n    const result = await autoEncrypter.decrypt(encryptedResponse.toBytes(), options);\n\n    const decryptedResponse = responseType?.make(result) ?? deserialize(result, options);\n\n    if (autoEncrypter[kDecorateResult]) {\n      if (responseType == null) {\n        decorateDecryptionResult(decryptedResponse, encryptedResponse.toObject(), true);\n      } else if (decryptedResponse instanceof CursorResponse) {\n        decryptedResponse.encryptedResponse = encryptedResponse;\n      }\n    }\n\n    return decryptedResponse;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}