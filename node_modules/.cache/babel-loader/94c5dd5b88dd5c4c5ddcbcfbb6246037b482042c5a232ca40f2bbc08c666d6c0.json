{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar consoleMap = [{\n  n: 'error',\n  c: 'error'\n}, {\n  n: 'warn',\n  c: 'warn'\n}, {\n  n: 'info',\n  c: 'info'\n}, {\n  n: 'debug',\n  c: 'debug'\n}, {\n  n: 'verbose',\n  c: 'trace'\n}];\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\nvar DiagConsoleLogger = /** @class */function () {\n  function DiagConsoleLogger() {\n    function _consoleFunc(funcName) {\n      return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        if (console) {\n          // Some environments only expose the console when the F12 developer console is open\n          // eslint-disable-next-line no-console\n          var theFunc = console[funcName];\n          if (typeof theFunc !== 'function') {\n            // Not all environments support all functions\n            // eslint-disable-next-line no-console\n            theFunc = console.log;\n          }\n          // One last final check\n          if (typeof theFunc === 'function') {\n            return theFunc.apply(console, args);\n          }\n        }\n      };\n    }\n    for (var i = 0; i < consoleMap.length; i++) {\n      this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n    }\n  }\n  return DiagConsoleLogger;\n}();\nexport { DiagConsoleLogger };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAmBA,IAAMA,UAAU,GAAiD,CAC/D;EAAEC,CAAC,EAAE,OAAO;EAAEC,CAAC,EAAE;AAAO,CAAE,EAC1B;EAAED,CAAC,EAAE,MAAM;EAAEC,CAAC,EAAE;AAAM,CAAE,EACxB;EAAED,CAAC,EAAE,MAAM;EAAEC,CAAC,EAAE;AAAM,CAAE,EACxB;EAAED,CAAC,EAAE,OAAO;EAAEC,CAAC,EAAE;AAAO,CAAE,EAC1B;EAAED,CAAC,EAAE,SAAS;EAAEC,CAAC,EAAE;AAAO,CAAE,CAC7B;AAED;;;;;AAKA;EACE;IACE,SAASC,YAAY,CAACC,QAAwB;MAC5C,OAAO;QAAU;aAAA,UAAO,EAAPC,qBAAO,EAAPA,IAAO;UAAPC;;QACf,IAAIC,OAAO,EAAE;UACX;UACA;UACA,IAAIC,OAAO,GAAGD,OAAO,CAACH,QAAQ,CAAC;UAC/B,IAAI,OAAOI,OAAO,KAAK,UAAU,EAAE;YACjC;YACA;YACAA,OAAO,GAAGD,OAAO,CAACE,GAAG;;UAGvB;UACA,IAAI,OAAOD,OAAO,KAAK,UAAU,EAAE;YACjC,OAAOA,OAAO,CAACE,KAAK,CAACH,OAAO,EAAED,IAAI,CAAC;;;MAGzC,CAAC;IACH;IAEA,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,UAAU,CAACY,MAAM,EAAED,CAAC,EAAE,EAAE;MAC1C,IAAI,CAACX,UAAU,CAACW,CAAC,CAAC,CAACV,CAAC,CAAC,GAAGE,YAAY,CAACH,UAAU,CAACW,CAAC,CAAC,CAACT,CAAC,CAAC;;EAEzD;EAkCF,wBAAC;AAAD,CAAC,EA3DD","names":["consoleMap","n","c","_consoleFunc","funcName","_i","args","console","theFunc","log","apply","i","length"],"sources":["/home/yadu/Music/Gifty/node_modules/@opentelemetry/api/src/diag/consoleLogger.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogger, DiagLogFunction } from './types';\n\ntype ConsoleMapKeys = 'error' | 'warn' | 'info' | 'debug' | 'trace';\nconst consoleMap: { n: keyof DiagLogger; c: ConsoleMapKeys }[] = [\n  { n: 'error', c: 'error' },\n  { n: 'warn', c: 'warn' },\n  { n: 'info', c: 'info' },\n  { n: 'debug', c: 'debug' },\n  { n: 'verbose', c: 'trace' },\n];\n\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\nexport class DiagConsoleLogger implements DiagLogger {\n  constructor() {\n    function _consoleFunc(funcName: ConsoleMapKeys): DiagLogFunction {\n      return function (...args) {\n        if (console) {\n          // Some environments only expose the console when the F12 developer console is open\n          // eslint-disable-next-line no-console\n          let theFunc = console[funcName];\n          if (typeof theFunc !== 'function') {\n            // Not all environments support all functions\n            // eslint-disable-next-line no-console\n            theFunc = console.log;\n          }\n\n          // One last final check\n          if (typeof theFunc === 'function') {\n            return theFunc.apply(console, args);\n          }\n        }\n      };\n    }\n\n    for (let i = 0; i < consoleMap.length; i++) {\n      this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n    }\n  }\n\n  /** Log an error scenario that was not expected and caused the requested operation to fail. */\n  public error!: DiagLogFunction;\n\n  /**\n   * Log a warning scenario to inform the developer of an issues that should be investigated.\n   * The requested operation may or may not have succeeded or completed.\n   */\n  public warn!: DiagLogFunction;\n\n  /**\n   * Log a general informational message, this should not affect functionality.\n   * This is also the default logging level so this should NOT be used for logging\n   * debugging level information.\n   */\n  public info!: DiagLogFunction;\n\n  /**\n   * Log a general debug message that can be useful for identifying a failure.\n   * Information logged at this level may include diagnostic details that would\n   * help identify a failure scenario. Useful scenarios would be to log the execution\n   * order of async operations\n   */\n  public debug!: DiagLogFunction;\n\n  /**\n   * Log a detailed (verbose) trace level logging that can be used to identify failures\n   * where debug level logging would be insufficient, this level of tracing can include\n   * input and output parameters and as such may include PII information passing through\n   * the API. As such it is recommended that this level of tracing should not be enabled\n   * in a production environment.\n   */\n  public verbose!: DiagLogFunction;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}