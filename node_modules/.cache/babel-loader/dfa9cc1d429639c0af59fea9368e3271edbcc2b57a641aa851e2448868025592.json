{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Explain = exports.ExplainVerbosity = void 0;\n/** @public */\nexports.ExplainVerbosity = Object.freeze({\n  queryPlanner: 'queryPlanner',\n  queryPlannerExtended: 'queryPlannerExtended',\n  executionStats: 'executionStats',\n  allPlansExecution: 'allPlansExecution'\n});\n/** @internal */\nclass Explain {\n  constructor(verbosity, maxTimeMS) {\n    if (typeof verbosity === 'boolean') {\n      this.verbosity = verbosity ? exports.ExplainVerbosity.allPlansExecution : exports.ExplainVerbosity.queryPlanner;\n    } else {\n      this.verbosity = verbosity;\n    }\n    this.maxTimeMS = maxTimeMS;\n  }\n  static fromOptions() {\n    let {\n      explain\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (explain == null) return;\n    if (typeof explain === 'boolean' || typeof explain === 'string') {\n      return new Explain(explain);\n    }\n    const {\n      verbosity,\n      maxTimeMS\n    } = explain;\n    return new Explain(verbosity, maxTimeMS);\n  }\n}\nexports.Explain = Explain;","map":{"version":3,"mappings":";;;;;;AAAA;AACaA,wBAAgB,GAAGC,MAAM,CAACC,MAAM,CAAC;EAC5CC,YAAY,EAAE,cAAc;EAC5BC,oBAAoB,EAAE,sBAAsB;EAC5CC,cAAc,EAAE,gBAAgB;EAChCC,iBAAiB,EAAE;CACX,CAAC;AAsDX;AACA,MAAaC,OAAO;EAIlBC,YAAoBC,SAA+B,EAAEC,SAAkB;IACrE,IAAI,OAAOD,SAAS,KAAK,SAAS,EAAE;MAClC,IAAI,CAACA,SAAS,GAAGA,SAAS,GACtBT,wBAAgB,CAACM,iBAAiB,GAClCN,wBAAgB,CAACG,YAAY;IACnC,CAAC,MAAM;MACL,IAAI,CAACM,SAAS,GAAGA,SAAS;IAC5B;IAEA,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC5B;EAEA,OAAOC,WAAW,GAAiC;IAAA,IAAhC;MAAEC;IAAO,wEAAqB,EAAE;IACjD,IAAIA,OAAO,IAAI,IAAI,EAAE;IAErB,IAAI,OAAOA,OAAO,KAAK,SAAS,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;MAC/D,OAAO,IAAIL,OAAO,CAACK,OAAO,CAAC;IAC7B;IAEA,MAAM;MAAEH,SAAS;MAAEC;IAAS,CAAE,GAAGE,OAAO;IACxC,OAAO,IAAIL,OAAO,CAACE,SAAS,EAAEC,SAAS,CAAC;EAC1C;;AAzBFV","names":["exports","Object","freeze","queryPlanner","queryPlannerExtended","executionStats","allPlansExecution","Explain","constructor","verbosity","maxTimeMS","fromOptions","explain"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/explain.ts"],"sourcesContent":["/** @public */\nexport const ExplainVerbosity = Object.freeze({\n  queryPlanner: 'queryPlanner',\n  queryPlannerExtended: 'queryPlannerExtended',\n  executionStats: 'executionStats',\n  allPlansExecution: 'allPlansExecution'\n} as const);\n\n/** @public */\nexport type ExplainVerbosity = string;\n\n/**\n * For backwards compatibility, true is interpreted as \"allPlansExecution\"\n * and false as \"queryPlanner\".\n * @public\n */\nexport type ExplainVerbosityLike = ExplainVerbosity | boolean;\n\n/** @public */\nexport interface ExplainCommandOptions {\n  /** The explain verbosity for the command. */\n  verbosity: ExplainVerbosity;\n  /** The maxTimeMS setting for the command. */\n  maxTimeMS?: number;\n}\n\n/**\n * @public\n *\n * When set, this configures an explain command.  Valid values are boolean (for legacy compatibility,\n * see {@link ExplainVerbosityLike}), a string containing the explain verbosity, or an object containing the verbosity and\n * an optional maxTimeMS.\n *\n * Examples of valid usage:\n *\n * ```typescript\n * collection.find({ name: 'john doe' }, { explain: true });\n * collection.find({ name: 'john doe' }, { explain: false });\n * collection.find({ name: 'john doe' }, { explain: 'queryPlanner' });\n * collection.find({ name: 'john doe' }, { explain: { verbosity: 'queryPlanner' } });\n * ```\n *\n * maxTimeMS can be configured to limit the amount of time the server\n * spends executing an explain by providing an object:\n *\n * ```typescript\n * // limits the `explain` command to no more than 2 seconds\n * collection.find({ name: 'john doe' }, {\n *   explain:  {\n *    verbosity: 'queryPlanner',\n *    maxTimeMS: 2000\n *  }\n * });\n * ```\n */\nexport interface ExplainOptions {\n  /** Specifies the verbosity mode for the explain output. */\n  explain?: ExplainVerbosityLike | ExplainCommandOptions;\n}\n\n/** @internal */\nexport class Explain {\n  readonly verbosity: ExplainVerbosity;\n  readonly maxTimeMS?: number;\n\n  private constructor(verbosity: ExplainVerbosityLike, maxTimeMS?: number) {\n    if (typeof verbosity === 'boolean') {\n      this.verbosity = verbosity\n        ? ExplainVerbosity.allPlansExecution\n        : ExplainVerbosity.queryPlanner;\n    } else {\n      this.verbosity = verbosity;\n    }\n\n    this.maxTimeMS = maxTimeMS;\n  }\n\n  static fromOptions({ explain }: ExplainOptions = {}): Explain | undefined {\n    if (explain == null) return;\n\n    if (typeof explain === 'boolean' || typeof explain === 'string') {\n      return new Explain(explain);\n    }\n\n    const { verbosity, maxTimeMS } = explain;\n    return new Explain(verbosity, maxTimeMS);\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}