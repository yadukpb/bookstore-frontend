{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EnabledTraceUtil = void 0;\nconst api_1 = require(\"@opentelemetry/api\");\nconst span_1 = require(\"./span\");\nclass EnabledTraceUtil {\n  constructor(settings) {\n    var _a;\n    let tracerProvider = (_a = settings.openTelemetryOptions) === null || _a === void 0 ? void 0 : _a.tracerProvider;\n    // If a TracerProvider has not been given to us, we try to use the global one.\n    if (!tracerProvider) {\n      const {\n        trace\n      } = require('@opentelemetry/api');\n      tracerProvider = trace.getTracerProvider();\n    }\n    const libVersion = require('../../../package.json').version;\n    const libName = require('../../../package.json').name;\n    this.tracer = tracerProvider.getTracer(libName, libVersion);\n  }\n  endSpan(otelSpan, error) {\n    otelSpan.setStatus({\n      code: api_1.SpanStatusCode.ERROR,\n      message: error.message\n    });\n    otelSpan.recordException(error);\n    otelSpan.end();\n  }\n  startActiveSpan(name, fn, attributes) {\n    return this.tracer.startActiveSpan(name, {\n      attributes: attributes\n    }, otelSpan => {\n      // Note that if `fn` returns a `Promise`, we want the otelSpan to end\n      // after the `Promise` has resolved, NOT after the `fn` has returned.\n      // Therefore, we should not use a `finally` clause to end the otelSpan.\n      try {\n        let result = fn(new span_1.Span(otelSpan));\n        if (result instanceof Promise) {\n          result = result.then(value => {\n            otelSpan.end();\n            return value;\n          }).catch(error => {\n            this.endSpan(otelSpan, error);\n            // Returns a Promise.reject the same as the underlying function.\n            return Promise.reject(error);\n          });\n        } else {\n          otelSpan.end();\n        }\n        return result;\n      } catch (error) {\n        this.endSpan(otelSpan, error);\n        // Re-throw the exception to maintain normal error handling.\n        throw error;\n      }\n    });\n  }\n  startSpan(name) {\n    return new span_1.Span(this.tracer.startSpan(name, undefined, api_1.context.active()));\n  }\n  currentSpan() {\n    return new span_1.Span(api_1.trace.getActiveSpan());\n  }\n}\nexports.EnabledTraceUtil = EnabledTraceUtil;","map":{"version":3,"names":["Object","defineProperty","exports","value","EnabledTraceUtil","api_1","require","span_1","constructor","settings","_a","tracerProvider","openTelemetryOptions","trace","getTracerProvider","libVersion","version","libName","name","tracer","getTracer","endSpan","otelSpan","error","setStatus","code","SpanStatusCode","ERROR","message","recordException","end","startActiveSpan","fn","attributes","result","Span","Promise","then","catch","reject","startSpan","undefined","context","active","currentSpan","getActiveSpan"],"sources":["/home/yadu/Music/Gifty/node_modules/@google-cloud/firestore/build/src/telemetry/enabled-trace-util.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2024 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EnabledTraceUtil = void 0;\nconst api_1 = require(\"@opentelemetry/api\");\nconst span_1 = require(\"./span\");\nclass EnabledTraceUtil {\n    constructor(settings) {\n        var _a;\n        let tracerProvider = (_a = settings.openTelemetryOptions) === null || _a === void 0 ? void 0 : _a.tracerProvider;\n        // If a TracerProvider has not been given to us, we try to use the global one.\n        if (!tracerProvider) {\n            const { trace } = require('@opentelemetry/api');\n            tracerProvider = trace.getTracerProvider();\n        }\n        const libVersion = require('../../../package.json').version;\n        const libName = require('../../../package.json').name;\n        this.tracer = tracerProvider.getTracer(libName, libVersion);\n    }\n    endSpan(otelSpan, error) {\n        otelSpan.setStatus({\n            code: api_1.SpanStatusCode.ERROR,\n            message: error.message,\n        });\n        otelSpan.recordException(error);\n        otelSpan.end();\n    }\n    startActiveSpan(name, fn, attributes) {\n        return this.tracer.startActiveSpan(name, {\n            attributes: attributes,\n        }, (otelSpan) => {\n            // Note that if `fn` returns a `Promise`, we want the otelSpan to end\n            // after the `Promise` has resolved, NOT after the `fn` has returned.\n            // Therefore, we should not use a `finally` clause to end the otelSpan.\n            try {\n                let result = fn(new span_1.Span(otelSpan));\n                if (result instanceof Promise) {\n                    result = result\n                        .then(value => {\n                        otelSpan.end();\n                        return value;\n                    })\n                        .catch(error => {\n                        this.endSpan(otelSpan, error);\n                        // Returns a Promise.reject the same as the underlying function.\n                        return Promise.reject(error);\n                    });\n                }\n                else {\n                    otelSpan.end();\n                }\n                return result;\n            }\n            catch (error) {\n                this.endSpan(otelSpan, error);\n                // Re-throw the exception to maintain normal error handling.\n                throw error;\n            }\n        });\n    }\n    startSpan(name) {\n        return new span_1.Span(this.tracer.startSpan(name, undefined, api_1.context.active()));\n    }\n    currentSpan() {\n        return new span_1.Span(api_1.trace.getActiveSpan());\n    }\n}\nexports.EnabledTraceUtil = EnabledTraceUtil;\n//# sourceMappingURL=enabled-trace-util.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}