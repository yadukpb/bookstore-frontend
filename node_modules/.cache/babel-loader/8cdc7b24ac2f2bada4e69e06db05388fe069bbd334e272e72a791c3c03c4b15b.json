{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.randomBytes = exports.COSMOS_DB_MSG = exports.DOCUMENT_DB_MSG = exports.COSMOS_DB_CHECK = exports.DOCUMENT_DB_CHECK = exports.MONGODB_WARNING_CODE = exports.DEFAULT_PK_FACTORY = exports.HostAddress = exports.BufferPool = exports.List = exports.MongoDBCollectionNamespace = exports.MongoDBNamespace = exports.ByteUtils = void 0;\nexports.isUint8Array = isUint8Array;\nexports.hostMatchesWildcards = hostMatchesWildcards;\nexports.normalizeHintField = normalizeHintField;\nexports.isObject = isObject;\nexports.mergeOptions = mergeOptions;\nexports.filterOptions = filterOptions;\nexports.applyRetryableWrites = applyRetryableWrites;\nexports.isPromiseLike = isPromiseLike;\nexports.decorateWithCollation = decorateWithCollation;\nexports.decorateWithReadConcern = decorateWithReadConcern;\nexports.decorateWithExplain = decorateWithExplain;\nexports.getTopology = getTopology;\nexports.ns = ns;\nexports.makeCounter = makeCounter;\nexports.uuidV4 = uuidV4;\nexports.maxWireVersion = maxWireVersion;\nexports.arrayStrictEqual = arrayStrictEqual;\nexports.errorStrictEqual = errorStrictEqual;\nexports.makeStateMachine = makeStateMachine;\nexports.now = now;\nexports.calculateDurationInMs = calculateDurationInMs;\nexports.hasAtomicOperators = hasAtomicOperators;\nexports.resolveOptions = resolveOptions;\nexports.isSuperset = isSuperset;\nexports.isHello = isHello;\nexports.setDifference = setDifference;\nexports.isRecord = isRecord;\nexports.deepCopy = deepCopy;\nexports.emitWarning = emitWarning;\nexports.emitWarningOnce = emitWarningOnce;\nexports.enumToString = enumToString;\nexports.supportsRetryableWrites = supportsRetryableWrites;\nexports.shuffle = shuffle;\nexports.commandSupportsReadConcern = commandSupportsReadConcern;\nexports.compareObjectId = compareObjectId;\nexports.parseInteger = parseInteger;\nexports.parseUnsignedInteger = parseUnsignedInteger;\nexports.checkParentDomainMatch = checkParentDomainMatch;\nexports.get = get;\nexports.request = request;\nexports.isHostMatch = isHostMatch;\nexports.promiseWithResolvers = promiseWithResolvers;\nexports.squashError = squashError;\nexports.once = once;\nexports.maybeAddIdToDocuments = maybeAddIdToDocuments;\nexports.fileIsAccessible = fileIsAccessible;\nexports.noop = noop;\nexports.decorateDecryptionResult = decorateDecryptionResult;\nconst crypto = require(\"crypto\");\nconst fs_1 = require(\"fs\");\nconst http = require(\"http\");\nconst timers_1 = require(\"timers\");\nconst url = require(\"url\");\nconst url_1 = require(\"url\");\nconst util_1 = require(\"util\");\nconst bson_1 = require(\"./bson\");\nconst constants_1 = require(\"./cmap/wire_protocol/constants\");\nconst constants_2 = require(\"./constants\");\nconst error_1 = require(\"./error\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst common_1 = require(\"./sdam/common\");\nconst write_concern_1 = require(\"./write_concern\");\nexports.ByteUtils = {\n  toLocalBufferType(buffer) {\n    return Buffer.isBuffer(buffer) ? buffer : Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  },\n  equals(seqA, seqB) {\n    return exports.ByteUtils.toLocalBufferType(seqA).equals(seqB);\n  },\n  compare(seqA, seqB) {\n    return exports.ByteUtils.toLocalBufferType(seqA).compare(seqB);\n  },\n  toBase64(uint8array) {\n    return exports.ByteUtils.toLocalBufferType(uint8array).toString('base64');\n  }\n};\n/**\n * Returns true if value is a Uint8Array or a Buffer\n * @param value - any value that may be a Uint8Array\n */\nfunction isUint8Array(value) {\n  return value != null && typeof value === 'object' && Symbol.toStringTag in value && value[Symbol.toStringTag] === 'Uint8Array';\n}\n/**\n * Determines if a connection's address matches a user provided list\n * of domain wildcards.\n */\nfunction hostMatchesWildcards(host, wildcards) {\n  for (const wildcard of wildcards) {\n    if (host === wildcard || wildcard.startsWith('*.') && host?.endsWith(wildcard.substring(2, wildcard.length)) || wildcard.startsWith('*/') && host?.endsWith(wildcard.substring(2, wildcard.length))) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\nfunction normalizeHintField(hint) {\n  let finalHint = undefined;\n  if (typeof hint === 'string') {\n    finalHint = hint;\n  } else if (Array.isArray(hint)) {\n    finalHint = {};\n    hint.forEach(param => {\n      finalHint[param] = 1;\n    });\n  } else if (hint != null && typeof hint === 'object') {\n    finalHint = {};\n    for (const name in hint) {\n      finalHint[name] = hint[name];\n    }\n  }\n  return finalHint;\n}\nconst TO_STRING = object => Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\nfunction isObject(arg) {\n  return '[object Object]' === TO_STRING(arg);\n}\n/** @internal */\nfunction mergeOptions(target, source) {\n  return {\n    ...target,\n    ...source\n  };\n}\n/** @internal */\nfunction filterOptions(options, names) {\n  const filterOptions = {};\n  for (const name in options) {\n    if (names.includes(name)) {\n      filterOptions[name] = options[name];\n    }\n  }\n  // Filtered options\n  return filterOptions;\n}\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\nfunction applyRetryableWrites(target, db) {\n  if (db && db.s.options?.retryWrites) {\n    target.retryWrites = true;\n  }\n  return target;\n}\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The resolution type of the possible promise\n * @param value - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\nfunction isPromiseLike(value) {\n  return value != null && typeof value === 'object' && 'then' in value && typeof value.then === 'function';\n}\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\nfunction decorateWithCollation(command, target, options) {\n  const capabilities = getTopology(target).capabilities;\n  if (options.collation && typeof options.collation === 'object') {\n    if (capabilities && capabilities.commandsTakeCollation) {\n      command.collation = options.collation;\n    } else {\n      throw new error_1.MongoCompatibilityError(`Current topology does not support collation`);\n    }\n  }\n}\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\nfunction decorateWithReadConcern(command, coll, options) {\n  if (options && options.session && options.session.inTransaction()) {\n    return;\n  }\n  const readConcern = Object.assign({}, command.readConcern || {});\n  if (coll.s.readConcern) {\n    Object.assign(readConcern, coll.s.readConcern);\n  }\n  if (Object.keys(readConcern).length > 0) {\n    Object.assign(command, {\n      readConcern: readConcern\n    });\n  }\n}\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nfunction decorateWithExplain(command, explain) {\n  const {\n    verbosity,\n    maxTimeMS\n  } = explain;\n  const baseCommand = {\n    explain: command,\n    verbosity\n  };\n  if (typeof maxTimeMS === 'number') {\n    baseCommand.maxTimeMS = maxTimeMS;\n  }\n  return baseCommand;\n}\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */\nfunction getTopology(provider) {\n  // MongoClient or ClientSession or AbstractCursor\n  if ('topology' in provider && provider.topology) {\n    return provider.topology;\n  } else if ('client' in provider && provider.client.topology) {\n    return provider.client.topology;\n  }\n  throw new error_1.MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\n/** @internal */\nfunction ns(ns) {\n  return MongoDBNamespace.fromString(ns);\n}\n/** @public */\nclass MongoDBNamespace {\n  /**\n   * Create a namespace object\n   *\n   * @param db - database name\n   * @param collection - collection name\n   */\n  constructor(db, collection) {\n    this.db = db;\n    this.collection = collection;\n    this.collection = collection === '' ? undefined : collection;\n  }\n  toString() {\n    return this.collection ? `${this.db}.${this.collection}` : this.db;\n  }\n  withCollection(collection) {\n    return new MongoDBCollectionNamespace(this.db, collection);\n  }\n  static fromString(namespace) {\n    if (typeof namespace !== 'string' || namespace === '') {\n      // TODO(NODE-3483): Replace with MongoNamespaceError\n      throw new error_1.MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n    }\n    const [db, ...collectionParts] = namespace.split('.');\n    const collection = collectionParts.join('.');\n    return new MongoDBNamespace(db, collection === '' ? undefined : collection);\n  }\n}\nexports.MongoDBNamespace = MongoDBNamespace;\n/**\n * @public\n *\n * A class representing a collection's namespace.  This class enforces (through Typescript) that\n * the `collection` portion of the namespace is defined and should only be\n * used in scenarios where this can be guaranteed.\n */\nclass MongoDBCollectionNamespace extends MongoDBNamespace {\n  constructor(db, collection) {\n    super(db, collection);\n    this.collection = collection;\n  }\n  static fromString(namespace) {\n    return super.fromString(namespace);\n  }\n}\nexports.MongoDBCollectionNamespace = MongoDBCollectionNamespace;\n/** @internal */\nfunction makeCounter() {\n  let seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return function* () {\n    let count = seed;\n    while (true) {\n      const newCount = count;\n      count += 1;\n      yield newCount;\n    }\n  }();\n}\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\nfunction uuidV4() {\n  const result = crypto.randomBytes(16);\n  result[6] = result[6] & 0x0f | 0x40;\n  result[8] = result[8] & 0x3f | 0x80;\n  return result;\n}\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\nfunction maxWireVersion(topologyOrServer) {\n  if (topologyOrServer) {\n    if (topologyOrServer.loadBalanced || topologyOrServer.serverApi?.version) {\n      // Since we do not have a monitor in the load balanced mode,\n      // we assume the load-balanced server is always pointed at the latest mongodb version.\n      // There is a risk that for on-prem deployments\n      // that don't upgrade immediately that this could alert to the\n      // application that a feature is available that is actually not.\n      // We also return the max supported wire version for serverAPI.\n      return constants_1.MAX_SUPPORTED_WIRE_VERSION;\n    }\n    if (topologyOrServer.hello) {\n      return topologyOrServer.hello.maxWireVersion;\n    }\n    if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n      const lastHello = topologyOrServer.lastHello();\n      if (lastHello) {\n        return lastHello.maxWireVersion;\n      }\n    }\n    if (topologyOrServer.description && 'maxWireVersion' in topologyOrServer.description && topologyOrServer.description.maxWireVersion != null) {\n      return topologyOrServer.description.maxWireVersion;\n    }\n  }\n  return 0;\n}\n/** @internal */\nfunction arrayStrictEqual(arr, arr2) {\n  if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n    return false;\n  }\n  return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\n/** @internal */\nfunction errorStrictEqual(lhs, rhs) {\n  if (lhs === rhs) {\n    return true;\n  }\n  if (!lhs || !rhs) {\n    return lhs === rhs;\n  }\n  if (lhs == null && rhs != null || lhs != null && rhs == null) {\n    return false;\n  }\n  if (lhs.constructor.name !== rhs.constructor.name) {\n    return false;\n  }\n  if (lhs.message !== rhs.message) {\n    return false;\n  }\n  return true;\n}\n/** @internal */\nfunction makeStateMachine(stateTable) {\n  return function stateTransition(target, newState) {\n    const legalStates = stateTable[target.s.state];\n    if (legalStates && legalStates.indexOf(newState) < 0) {\n      throw new error_1.MongoRuntimeError(`illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`);\n    }\n    target.emit('stateChanged', target.s.state, newState);\n    target.s.state = newState;\n  };\n}\n/** @internal */\nfunction now() {\n  const hrtime = process.hrtime();\n  return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\n/** @internal */\nfunction calculateDurationInMs(started) {\n  if (typeof started !== 'number') {\n    return -1;\n  }\n  const elapsed = now() - started;\n  return elapsed < 0 ? 0 : elapsed;\n}\n/** @internal */\nfunction hasAtomicOperators(doc) {\n  if (Array.isArray(doc)) {\n    for (const document of doc) {\n      if (hasAtomicOperators(document)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  const keys = Object.keys(doc);\n  return keys.length > 0 && keys[0][0] === '$';\n}\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n * @internal\n */\nfunction resolveOptions(parent, options) {\n  const result = Object.assign({}, options, (0, bson_1.resolveBSONOptions)(options, parent));\n  // Users cannot pass a readConcern/writeConcern to operations in a transaction\n  const session = options?.session;\n  if (!session?.inTransaction()) {\n    const readConcern = read_concern_1.ReadConcern.fromOptions(options) ?? parent?.readConcern;\n    if (readConcern) {\n      result.readConcern = readConcern;\n    }\n    const writeConcern = write_concern_1.WriteConcern.fromOptions(options) ?? parent?.writeConcern;\n    if (writeConcern) {\n      result.writeConcern = writeConcern;\n    }\n  }\n  const readPreference = read_preference_1.ReadPreference.fromOptions(options) ?? parent?.readPreference;\n  if (readPreference) {\n    result.readPreference = readPreference;\n  }\n  return result;\n}\nfunction isSuperset(set, subset) {\n  set = Array.isArray(set) ? new Set(set) : set;\n  subset = Array.isArray(subset) ? new Set(subset) : subset;\n  for (const elem of subset) {\n    if (!set.has(elem)) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Checks if the document is a Hello request\n * @internal\n */\nfunction isHello(doc) {\n  return doc[constants_2.LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\n/** Returns the items that are uniquely in setA */\nfunction setDifference(setA, setB) {\n  const difference = new Set(setA);\n  for (const elem of setB) {\n    difference.delete(elem);\n  }\n  return difference;\n}\nconst HAS_OWN = (object, prop) => Object.prototype.hasOwnProperty.call(object, prop);\nfunction isRecord(value) {\n  let requiredKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  if (!isObject(value)) {\n    return false;\n  }\n  const ctor = value.constructor;\n  if (ctor && ctor.prototype) {\n    if (!isObject(ctor.prototype)) {\n      return false;\n    }\n    // Check to see if some method exists from the Object exists\n    if (!HAS_OWN(ctor.prototype, 'isPrototypeOf')) {\n      return false;\n    }\n  }\n  if (requiredKeys) {\n    const keys = Object.keys(value);\n    return isSuperset(keys, requiredKeys);\n  }\n  return true;\n}\n/**\n * Make a deep copy of an object\n *\n * NOTE: This is not meant to be the perfect implementation of a deep copy,\n * but instead something that is good enough for the purposes of\n * command monitoring.\n */\nfunction deepCopy(value) {\n  if (value == null) {\n    return value;\n  } else if (Array.isArray(value)) {\n    return value.map(item => deepCopy(item));\n  } else if (isRecord(value)) {\n    const res = {};\n    for (const key in value) {\n      res[key] = deepCopy(value[key]);\n    }\n    return res;\n  }\n  const ctor = value.constructor;\n  if (ctor) {\n    switch (ctor.name.toLowerCase()) {\n      case 'date':\n        return new ctor(Number(value));\n      case 'map':\n        return new Map(value);\n      case 'set':\n        return new Set(value);\n      case 'buffer':\n        return Buffer.from(value);\n    }\n  }\n  return value;\n}\n/**\n * A sequential list of items in a circularly linked list\n * @remarks\n * The head node is special, it is always defined and has a value of null.\n * It is never \"included\" in the list, in that, it is not returned by pop/shift or yielded by the iterator.\n * The circular linkage and always defined head node are to reduce checks for null next/prev references to zero.\n * New nodes are declared as object literals with keys always in the same order: next, prev, value.\n * @internal\n */\nclass List {\n  get length() {\n    return this.count;\n  }\n  get [Symbol.toStringTag]() {\n    return 'List';\n  }\n  constructor() {\n    this.count = 0;\n    // this is carefully crafted:\n    // declaring a complete and consistently key ordered\n    // object is beneficial to the runtime optimizations\n    this.head = {\n      next: null,\n      prev: null,\n      value: null\n    };\n    this.head.next = this.head;\n    this.head.prev = this.head;\n  }\n  toArray() {\n    return Array.from(this);\n  }\n  toString() {\n    return `head <=> ${this.toArray().join(' <=> ')} <=> head`;\n  }\n  *[Symbol.iterator]() {\n    for (const node of this.nodes()) {\n      yield node.value;\n    }\n  }\n  *nodes() {\n    let ptr = this.head.next;\n    while (ptr !== this.head) {\n      // Save next before yielding so that we make removing within iteration safe\n      const {\n        next\n      } = ptr;\n      yield ptr;\n      ptr = next;\n    }\n  }\n  /** Insert at end of list */\n  push(value) {\n    this.count += 1;\n    const newNode = {\n      next: this.head,\n      prev: this.head.prev,\n      value\n    };\n    this.head.prev.next = newNode;\n    this.head.prev = newNode;\n  }\n  /** Inserts every item inside an iterable instead of the iterable itself */\n  pushMany(iterable) {\n    for (const value of iterable) {\n      this.push(value);\n    }\n  }\n  /** Insert at front of list */\n  unshift(value) {\n    this.count += 1;\n    const newNode = {\n      next: this.head.next,\n      prev: this.head,\n      value\n    };\n    this.head.next.prev = newNode;\n    this.head.next = newNode;\n  }\n  remove(node) {\n    if (node === this.head || this.length === 0) {\n      return null;\n    }\n    this.count -= 1;\n    const prevNode = node.prev;\n    const nextNode = node.next;\n    prevNode.next = nextNode;\n    nextNode.prev = prevNode;\n    return node.value;\n  }\n  /** Removes the first node at the front of the list */\n  shift() {\n    return this.remove(this.head.next);\n  }\n  /** Removes the last node at the end of the list */\n  pop() {\n    return this.remove(this.head.prev);\n  }\n  /** Iterates through the list and removes nodes where filter returns true */\n  prune(filter) {\n    for (const node of this.nodes()) {\n      if (filter(node.value)) {\n        this.remove(node);\n      }\n    }\n  }\n  clear() {\n    this.count = 0;\n    this.head.next = this.head;\n    this.head.prev = this.head;\n  }\n  /** Returns the first item in the list, does not remove */\n  first() {\n    // If the list is empty, value will be the head's null\n    return this.head.next.value;\n  }\n  /** Returns the last item in the list, does not remove */\n  last() {\n    // If the list is empty, value will be the head's null\n    return this.head.prev.value;\n  }\n}\nexports.List = List;\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\nclass BufferPool {\n  constructor() {\n    this.buffers = new List();\n    this.totalByteLength = 0;\n  }\n  get length() {\n    return this.totalByteLength;\n  }\n  /** Adds a buffer to the internal buffer pool list */\n  append(buffer) {\n    this.buffers.push(buffer);\n    this.totalByteLength += buffer.length;\n  }\n  /**\n   * If BufferPool contains 4 bytes or more construct an int32 from the leading bytes,\n   * otherwise return null. Size can be negative, caller should error check.\n   */\n  getInt32() {\n    if (this.totalByteLength < 4) {\n      return null;\n    }\n    const firstBuffer = this.buffers.first();\n    if (firstBuffer != null && firstBuffer.byteLength >= 4) {\n      return firstBuffer.readInt32LE(0);\n    }\n    // Unlikely case: an int32 is split across buffers.\n    // Use read and put the returned buffer back on top\n    const top4Bytes = this.read(4);\n    const value = top4Bytes.readInt32LE(0);\n    // Put it back.\n    this.totalByteLength += 4;\n    this.buffers.unshift(top4Bytes);\n    return value;\n  }\n  /** Reads the requested number of bytes, optionally consuming them */\n  read(size) {\n    if (typeof size !== 'number' || size < 0) {\n      throw new error_1.MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n    }\n    // oversized request returns empty buffer\n    if (size > this.totalByteLength) {\n      return Buffer.alloc(0);\n    }\n    // We know we have enough, we just don't know how it is spread across chunks\n    // TODO(NODE-4732): alloc API should change based on raw option\n    const result = Buffer.allocUnsafe(size);\n    for (let bytesRead = 0; bytesRead < size;) {\n      const buffer = this.buffers.shift();\n      if (buffer == null) {\n        break;\n      }\n      const bytesRemaining = size - bytesRead;\n      const bytesReadable = Math.min(bytesRemaining, buffer.byteLength);\n      const bytes = buffer.subarray(0, bytesReadable);\n      result.set(bytes, bytesRead);\n      bytesRead += bytesReadable;\n      this.totalByteLength -= bytesReadable;\n      if (bytesReadable < buffer.byteLength) {\n        this.buffers.unshift(buffer.subarray(bytesReadable));\n      }\n    }\n    return result;\n  }\n}\nexports.BufferPool = BufferPool;\n/** @public */\nclass HostAddress {\n  constructor(hostString) {\n    this.host = undefined;\n    this.port = undefined;\n    this.socketPath = undefined;\n    this.isIPv6 = false;\n    const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n    if (escapedHost.endsWith('.sock')) {\n      // heuristically determine if we're working with a domain socket\n      this.socketPath = decodeURIComponent(escapedHost);\n      return;\n    }\n    const urlString = `iLoveJS://${escapedHost}`;\n    let url;\n    try {\n      url = new url_1.URL(urlString);\n    } catch (urlError) {\n      const runtimeError = new error_1.MongoRuntimeError(`Unable to parse ${escapedHost} with URL`);\n      runtimeError.cause = urlError;\n      throw runtimeError;\n    }\n    const hostname = url.hostname;\n    const port = url.port;\n    let normalized = decodeURIComponent(hostname).toLowerCase();\n    if (normalized.startsWith('[') && normalized.endsWith(']')) {\n      this.isIPv6 = true;\n      normalized = normalized.substring(1, hostname.length - 1);\n    }\n    this.host = normalized.toLowerCase();\n    if (typeof port === 'number') {\n      this.port = port;\n    } else if (typeof port === 'string' && port !== '') {\n      this.port = Number.parseInt(port, 10);\n    } else {\n      this.port = 27017;\n    }\n    if (this.port === 0) {\n      throw new error_1.MongoParseError('Invalid port (zero) with hostname');\n    }\n    Object.freeze(this);\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n  inspect() {\n    return `new HostAddress('${this.toString()}')`;\n  }\n  toString() {\n    if (typeof this.host === 'string') {\n      if (this.isIPv6) {\n        return `[${this.host}]:${this.port}`;\n      }\n      return `${this.host}:${this.port}`;\n    }\n    return `${this.socketPath}`;\n  }\n  static fromString(s) {\n    return new HostAddress(s);\n  }\n  static fromHostPort(host, port) {\n    if (host.includes(':')) {\n      host = `[${host}]`; // IPv6 address\n    }\n\n    return HostAddress.fromString(`${host}:${port}`);\n  }\n  static fromSrvRecord(_ref) {\n    let {\n      name,\n      port\n    } = _ref;\n    return HostAddress.fromHostPort(name, port);\n  }\n  toHostPort() {\n    if (this.socketPath) {\n      return {\n        host: this.socketPath,\n        port: 0\n      };\n    }\n    const host = this.host ?? '';\n    const port = this.port ?? 0;\n    return {\n      host,\n      port\n    };\n  }\n}\nexports.HostAddress = HostAddress;\nexports.DEFAULT_PK_FACTORY = {\n  // We prefer not to rely on ObjectId having a createPk method\n  createPk() {\n    return new bson_1.ObjectId();\n  }\n};\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```ts\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\nexports.MONGODB_WARNING_CODE = 'MONGODB DRIVER';\n/** @internal */\nfunction emitWarning(message) {\n  return process.emitWarning(message, {\n    code: exports.MONGODB_WARNING_CODE\n  });\n}\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\nfunction emitWarningOnce(message) {\n  if (!emittedWarnings.has(message)) {\n    emittedWarnings.add(message);\n    return emitWarning(message);\n  }\n}\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\nfunction enumToString(en) {\n  return Object.values(en).join(', ');\n}\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\nfunction supportsRetryableWrites(server) {\n  if (!server) {\n    return false;\n  }\n  if (server.loadBalanced) {\n    // Loadbalanced topologies will always support retry writes\n    return true;\n  }\n  if (server.description.logicalSessionTimeoutMinutes != null) {\n    // that supports sessions\n    if (server.description.type !== common_1.ServerType.Standalone) {\n      // and that is not a standalone\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\nfunction shuffle(sequence) {\n  let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n  if (limit > items.length) {\n    throw new error_1.MongoRuntimeError('Limit must be less than the number of items');\n  }\n  let remainingItemsToShuffle = items.length;\n  const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n  while (remainingItemsToShuffle > lowerBound) {\n    // Pick a remaining element\n    const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n    remainingItemsToShuffle -= 1;\n    // And swap it with the current element\n    const swapHold = items[remainingItemsToShuffle];\n    items[remainingItemsToShuffle] = items[randomIndex];\n    items[randomIndex] = swapHold;\n  }\n  return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\n// TODO(NODE-4936): read concern eligibility for commands should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nfunction commandSupportsReadConcern(command) {\n  if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n    return true;\n  }\n  return false;\n}\n/**\n * Compare objectIds. `null` is always less\n * - `+1 = oid1 is greater than oid2`\n * - `-1 = oid1 is less than oid2`\n * - `+0 = oid1 is equal oid2`\n */\nfunction compareObjectId(oid1, oid2) {\n  if (oid1 == null && oid2 == null) {\n    return 0;\n  }\n  if (oid1 == null) {\n    return -1;\n  }\n  if (oid2 == null) {\n    return 1;\n  }\n  return exports.ByteUtils.compare(oid1.id, oid2.id);\n}\nfunction parseInteger(value) {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n  return Number.isNaN(parsedValue) ? null : parsedValue;\n}\nfunction parseUnsignedInteger(value) {\n  const parsedInt = parseInteger(value);\n  return parsedInt != null && parsedInt >= 0 ? parsedInt : null;\n}\n/**\n * This function throws a MongoAPIError in the event that either of the following is true:\n * * If the provided address domain does not match the provided parent domain\n * * If the parent domain contains less than three `.` separated parts and the provided address does not contain at least one more domain level than its parent\n *\n * If a DNS server were to become compromised SRV records would still need to\n * advertise addresses that are under the same domain as the srvHost.\n *\n * @param address - The address to check against a domain\n * @param srvHost - The domain to check the provided address against\n * @returns void\n */\nfunction checkParentDomainMatch(address, srvHost) {\n  // Remove trailing dot if exists on either the resolved address or the srv hostname\n  const normalizedAddress = address.endsWith('.') ? address.slice(0, address.length - 1) : address;\n  const normalizedSrvHost = srvHost.endsWith('.') ? srvHost.slice(0, srvHost.length - 1) : srvHost;\n  const allCharacterBeforeFirstDot = /^.*?\\./;\n  const srvIsLessThanThreeParts = normalizedSrvHost.split('.').length < 3;\n  // Remove all characters before first dot\n  // Add leading dot back to string so\n  //   an srvHostDomain = '.trusted.site'\n  //   will not satisfy an addressDomain that endsWith '.fake-trusted.site'\n  const addressDomain = `.${normalizedAddress.replace(allCharacterBeforeFirstDot, '')}`;\n  let srvHostDomain = srvIsLessThanThreeParts ? normalizedSrvHost : `.${normalizedSrvHost.replace(allCharacterBeforeFirstDot, '')}`;\n  if (!srvHostDomain.startsWith('.')) {\n    srvHostDomain = '.' + srvHostDomain;\n  }\n  if (srvIsLessThanThreeParts && normalizedAddress.split('.').length <= normalizedSrvHost.split('.').length) {\n    throw new error_1.MongoAPIError('Server record does not have at least one more domain level than parent URI');\n  }\n  if (!addressDomain.endsWith(srvHostDomain)) {\n    throw new error_1.MongoAPIError('Server record does not share hostname with parent URI');\n  }\n}\n/**\n * Perform a get request that returns status and body.\n * @internal\n */\nfunction get(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise((resolve, reject) => {\n    /* eslint-disable prefer-const */\n    let timeoutId;\n    const request = http.get(url, options, response => {\n      response.setEncoding('utf8');\n      let body = '';\n      response.on('data', chunk => body += chunk);\n      response.on('end', () => {\n        (0, timers_1.clearTimeout)(timeoutId);\n        resolve({\n          status: response.statusCode,\n          body\n        });\n      });\n    }).on('error', error => {\n      (0, timers_1.clearTimeout)(timeoutId);\n      reject(error);\n    }).end();\n    timeoutId = (0, timers_1.setTimeout)(() => {\n      request.destroy(new error_1.MongoNetworkTimeoutError(`request timed out after 10 seconds`));\n    }, 10000);\n  });\n}\nasync function request(uri) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return await new Promise((resolve, reject) => {\n    const requestOptions = {\n      method: 'GET',\n      timeout: 10000,\n      json: true,\n      ...url.parse(uri),\n      ...options\n    };\n    const req = http.request(requestOptions, res => {\n      res.setEncoding('utf8');\n      let data = '';\n      res.on('data', d => {\n        data += d;\n      });\n      res.once('end', () => {\n        if (options.json === false) {\n          resolve(data);\n          return;\n        }\n        try {\n          const parsed = JSON.parse(data);\n          resolve(parsed);\n        } catch {\n          // TODO(NODE-3483)\n          reject(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n        }\n      });\n    });\n    req.once('timeout', () => req.destroy(new error_1.MongoNetworkTimeoutError(`Network request to ${uri} timed out after ${options.timeout} ms`)));\n    req.once('error', error => reject(error));\n    req.end();\n  });\n}\n/** @internal */\nexports.DOCUMENT_DB_CHECK = /(\\.docdb\\.amazonaws\\.com$)|(\\.docdb-elastic\\.amazonaws\\.com$)/;\n/** @internal */\nexports.COSMOS_DB_CHECK = /\\.cosmos\\.azure\\.com$/;\n/** @internal */\nexports.DOCUMENT_DB_MSG = 'You appear to be connected to a DocumentDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/documentdb';\n/** @internal */\nexports.COSMOS_DB_MSG = 'You appear to be connected to a CosmosDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/cosmosdb';\n/** @internal */\nfunction isHostMatch(match, host) {\n  return host && match.test(host.toLowerCase()) ? true : false;\n}\nfunction promiseWithResolvers() {\n  let resolve;\n  let reject;\n  const promise = new Promise(function withResolversExecutor(promiseResolve, promiseReject) {\n    resolve = promiseResolve;\n    reject = promiseReject;\n  });\n  return {\n    promise,\n    resolve,\n    reject\n  };\n}\n/**\n * A noop function intended for use in preventing unhandled rejections.\n *\n * @example\n * ```js\n * const promise = myAsyncTask();\n * // eslint-disable-next-line github/no-then\n * promise.then(undefined, squashError);\n * ```\n */\nfunction squashError(_error) {\n  return;\n}\nexports.randomBytes = (0, util_1.promisify)(crypto.randomBytes);\n/**\n * Replicates the events.once helper.\n *\n * Removes unused signal logic and It **only** supports 0 or 1 argument events.\n *\n * @param ee - An event emitter that may emit `ev`\n * @param name - An event name to wait for\n */\nasync function once(ee, name) {\n  const {\n    promise,\n    resolve,\n    reject\n  } = promiseWithResolvers();\n  const onEvent = data => resolve(data);\n  const onError = error => reject(error);\n  ee.once(name, onEvent).once('error', onError);\n  try {\n    const res = await promise;\n    ee.off('error', onError);\n    return res;\n  } catch (error) {\n    ee.off(name, onEvent);\n    throw error;\n  }\n}\nfunction maybeAddIdToDocuments(coll, docOrDocs, options) {\n  const forceServerObjectId = typeof options.forceServerObjectId === 'boolean' ? options.forceServerObjectId : coll.s.db.options?.forceServerObjectId;\n  // no need to modify the docs if server sets the ObjectId\n  if (forceServerObjectId === true) {\n    return docOrDocs;\n  }\n  const transform = doc => {\n    if (doc._id == null) {\n      doc._id = coll.s.pkFactory.createPk();\n    }\n    return doc;\n  };\n  return Array.isArray(docOrDocs) ? docOrDocs.map(transform) : transform(docOrDocs);\n}\nasync function fileIsAccessible(fileName, mode) {\n  try {\n    await fs_1.promises.access(fileName, mode);\n    return true;\n  } catch {\n    return false;\n  }\n}\nfunction noop() {\n  return;\n}\n/**\n * Recurse through the (identically-shaped) `decrypted` and `original`\n * objects and attach a `decryptedKeys` property on each sub-object that\n * contained encrypted fields. Because we only call this on BSON responses,\n * we do not need to worry about circular references.\n *\n * @internal\n */\nfunction decorateDecryptionResult(decrypted, original) {\n  let isTopLevelDecorateCall = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (isTopLevelDecorateCall) {\n    // The original value could have been either a JS object or a BSON buffer\n    if (Buffer.isBuffer(original)) {\n      original = (0, bson_1.deserialize)(original);\n    }\n    if (Buffer.isBuffer(decrypted)) {\n      throw new error_1.MongoRuntimeError('Expected result of decryption to be deserialized BSON object');\n    }\n  }\n  if (!decrypted || typeof decrypted !== 'object') return;\n  for (const k of Object.keys(decrypted)) {\n    const originalValue = original[k];\n    // An object was decrypted by libmongocrypt if and only if it was\n    // a BSON Binary object with subtype 6.\n    if (originalValue && originalValue._bsontype === 'Binary' && originalValue.sub_type === 6) {\n      if (!decrypted[constants_2.kDecoratedKeys]) {\n        Object.defineProperty(decrypted, constants_2.kDecoratedKeys, {\n          value: [],\n          configurable: true,\n          enumerable: false,\n          writable: false\n        });\n      }\n      // this is defined in the preceding if-statement\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      decrypted[constants_2.kDecoratedKeys].push(k);\n      // Do not recurse into this decrypted value. It could be a sub-document/array,\n      // in which case there is no original value associated with its subfields.\n      continue;\n    }\n    decorateDecryptionResult(decrypted[k], originalValue, false);\n  }\n}","map":{"version":3,"mappings":"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","names":["exports","toLocalBufferType","buffer","Buffer","isBuffer","from","byteOffset","byteLength","equals","seqA","seqB","compare","toBase64","uint8array","toString","isUint8Array","value","Symbol","toStringTag","hostMatchesWildcards","host","wildcards","wildcard","startsWith","endsWith","substring","length","normalizeHintField","hint","finalHint","undefined","Array","isArray","forEach","param","name","TO_STRING","object","Object","prototype","call","isObject","arg","mergeOptions","target","source","filterOptions","options","names","includes","applyRetryableWrites","db","s","retryWrites","isPromiseLike","then","decorateWithCollation","command","capabilities","getTopology","collation","commandsTakeCollation","error_1","decorateWithReadConcern","coll","session","inTransaction","readConcern","assign","keys","decorateWithExplain","explain","verbosity","maxTimeMS","baseCommand","provider","topology","client","ns","MongoDBNamespace","fromString","constructor","collection","withCollection","MongoDBCollectionNamespace","namespace","collectionParts","split","join","makeCounter","seed","count","newCount","uuidV4","result","crypto","randomBytes","maxWireVersion","topologyOrServer","loadBalanced","serverApi","version","constants_1","hello","lastHello","description","arrayStrictEqual","arr","arr2","every","elt","idx","errorStrictEqual","lhs","rhs","message","makeStateMachine","stateTable","stateTransition","newState","legalStates","state","indexOf","emit","now","hrtime","process","Math","floor","calculateDurationInMs","started","elapsed","hasAtomicOperators","doc","document","resolveOptions","parent","read_concern_1","fromOptions","writeConcern","write_concern_1","readPreference","read_preference_1","isSuperset","set","subset","Set","elem","has","isHello","constants_2","setDifference","setA","setB","difference","delete","HAS_OWN","prop","hasOwnProperty","isRecord","requiredKeys","ctor","deepCopy","map","item","res","key","toLowerCase","Number","Map","List","head","next","prev","toArray","iterator","node","nodes","ptr","push","newNode","pushMany","iterable","unshift","remove","prevNode","nextNode","shift","pop","prune","filter","clear","first","last","BufferPool","buffers","totalByteLength","append","getInt32","firstBuffer","readInt32LE","top4Bytes","read","size","alloc","allocUnsafe","bytesRead","bytesRemaining","bytesReadable","min","bytes","subarray","HostAddress","hostString","escapedHost","socketPath","decodeURIComponent","urlString","url","url_1","urlError","runtimeError","cause","hostname","port","normalized","isIPv6","parseInt","freeze","for","inspect","fromHostPort","fromSrvRecord","toHostPort","createPk","bson_1","emitWarning","code","emittedWarnings","emitWarningOnce","add","enumToString","en","values","supportsRetryableWrites","server","logicalSessionTimeoutMinutes","type","common_1","Standalone","shuffle","sequence","limit","items","remainingItemsToShuffle","lowerBound","randomIndex","random","swapHold","slice","commandSupportsReadConcern","aggregate","distinct","find","geoNear","compareObjectId","oid1","oid2","id","parseInteger","trunc","parsedValue","String","isNaN","parseUnsignedInteger","parsedInt","checkParentDomainMatch","address","srvHost","normalizedAddress","normalizedSrvHost","allCharacterBeforeFirstDot","srvIsLessThanThreeParts","addressDomain","replace","srvHostDomain","get","Promise","resolve","reject","timeoutId","request","http","response","setEncoding","body","on","chunk","status","statusCode","error","end","destroy","uri","requestOptions","method","timeout","json","parse","req","data","d","once","parsed","JSON","isHostMatch","match","test","promiseWithResolvers","promise","withResolversExecutor","promiseResolve","promiseReject","squashError","_error","ee","onEvent","onError","off","maybeAddIdToDocuments","docOrDocs","forceServerObjectId","transform","_id","pkFactory","fileIsAccessible","fileName","mode","fs_1","access","noop","decorateDecryptionResult","decrypted","original","isTopLevelDecorateCall","k","originalValue","_bsontype","sub_type","defineProperty","configurable","enumerable","writable"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/utils.ts"],"sourcesContent":["import * as crypto from 'crypto';\nimport type { SrvRecord } from 'dns';\nimport { type EventEmitter } from 'events';\nimport { promises as fs } from 'fs';\nimport * as http from 'http';\nimport { clearTimeout, setTimeout } from 'timers';\nimport * as url from 'url';\nimport { URL } from 'url';\nimport { promisify } from 'util';\n\nimport { deserialize, type Document, ObjectId, resolveBSONOptions } from './bson';\nimport type { Connection } from './cmap/connection';\nimport { MAX_SUPPORTED_WIRE_VERSION } from './cmap/wire_protocol/constants';\nimport type { Collection } from './collection';\nimport { kDecoratedKeys, LEGACY_HELLO_COMMAND } from './constants';\nimport type { AbstractCursor } from './cursor/abstract_cursor';\nimport type { FindCursor } from './cursor/find_cursor';\nimport type { Db } from './db';\nimport {\n  type AnyError,\n  MongoAPIError,\n  MongoCompatibilityError,\n  MongoInvalidArgumentError,\n  MongoNetworkTimeoutError,\n  MongoNotConnectedError,\n  MongoParseError,\n  MongoRuntimeError\n} from './error';\nimport type { Explain, ExplainVerbosity } from './explain';\nimport type { MongoClient } from './mongo_client';\nimport type { CommandOperationOptions, OperationParent } from './operations/command';\nimport type { Hint, OperationOptions } from './operations/operation';\nimport { ReadConcern } from './read_concern';\nimport { ReadPreference } from './read_preference';\nimport { ServerType } from './sdam/common';\nimport type { Server } from './sdam/server';\nimport type { Topology } from './sdam/topology';\nimport type { ClientSession } from './sessions';\nimport { WriteConcern } from './write_concern';\n\n/**\n * MongoDB Driver style callback\n * @public\n */\nexport type Callback<T = any> = (error?: AnyError, result?: T) => void;\n\nexport type AnyOptions = Document;\n\nexport const ByteUtils = {\n  toLocalBufferType(this: void, buffer: Buffer | Uint8Array): Buffer {\n    return Buffer.isBuffer(buffer)\n      ? buffer\n      : Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  },\n\n  equals(this: void, seqA: Uint8Array, seqB: Uint8Array) {\n    return ByteUtils.toLocalBufferType(seqA).equals(seqB);\n  },\n\n  compare(this: void, seqA: Uint8Array, seqB: Uint8Array) {\n    return ByteUtils.toLocalBufferType(seqA).compare(seqB);\n  },\n\n  toBase64(this: void, uint8array: Uint8Array) {\n    return ByteUtils.toLocalBufferType(uint8array).toString('base64');\n  }\n};\n\n/**\n * Returns true if value is a Uint8Array or a Buffer\n * @param value - any value that may be a Uint8Array\n */\nexport function isUint8Array(value: unknown): value is Uint8Array {\n  return (\n    value != null &&\n    typeof value === 'object' &&\n    Symbol.toStringTag in value &&\n    value[Symbol.toStringTag] === 'Uint8Array'\n  );\n}\n\n/**\n * Determines if a connection's address matches a user provided list\n * of domain wildcards.\n */\nexport function hostMatchesWildcards(host: string, wildcards: string[]): boolean {\n  for (const wildcard of wildcards) {\n    if (\n      host === wildcard ||\n      (wildcard.startsWith('*.') && host?.endsWith(wildcard.substring(2, wildcard.length))) ||\n      (wildcard.startsWith('*/') && host?.endsWith(wildcard.substring(2, wildcard.length)))\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\nexport function normalizeHintField(hint?: Hint): Hint | undefined {\n  let finalHint = undefined;\n\n  if (typeof hint === 'string') {\n    finalHint = hint;\n  } else if (Array.isArray(hint)) {\n    finalHint = {};\n\n    hint.forEach(param => {\n      finalHint[param] = 1;\n    });\n  } else if (hint != null && typeof hint === 'object') {\n    finalHint = {} as Document;\n    for (const name in hint) {\n      finalHint[name] = hint[name];\n    }\n  }\n\n  return finalHint;\n}\n\nconst TO_STRING = (object: unknown) => Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\n\nexport function isObject(arg: unknown): arg is object {\n  return '[object Object]' === TO_STRING(arg);\n}\n\n/** @internal */\nexport function mergeOptions<T, S>(target: T, source: S): T & S {\n  return { ...target, ...source };\n}\n\n/** @internal */\nexport function filterOptions(options: AnyOptions, names: ReadonlyArray<string>): AnyOptions {\n  const filterOptions: AnyOptions = {};\n\n  for (const name in options) {\n    if (names.includes(name)) {\n      filterOptions[name] = options[name];\n    }\n  }\n\n  // Filtered options\n  return filterOptions;\n}\n\ninterface HasRetryableWrites {\n  retryWrites?: boolean;\n}\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\nexport function applyRetryableWrites<T extends HasRetryableWrites>(target: T, db?: Db): T {\n  if (db && db.s.options?.retryWrites) {\n    target.retryWrites = true;\n  }\n\n  return target;\n}\n\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\n\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The resolution type of the possible promise\n * @param value - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\nexport function isPromiseLike<T = unknown>(value?: unknown): value is PromiseLike<T> {\n  return (\n    value != null &&\n    typeof value === 'object' &&\n    'then' in value &&\n    typeof value.then === 'function'\n  );\n}\n\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\nexport function decorateWithCollation(\n  command: Document,\n  target: MongoClient | Db | Collection,\n  options: AnyOptions\n): void {\n  const capabilities = getTopology(target).capabilities;\n  if (options.collation && typeof options.collation === 'object') {\n    if (capabilities && capabilities.commandsTakeCollation) {\n      command.collation = options.collation;\n    } else {\n      throw new MongoCompatibilityError(`Current topology does not support collation`);\n    }\n  }\n}\n\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\nexport function decorateWithReadConcern(\n  command: Document,\n  coll: { s: { readConcern?: ReadConcern } },\n  options?: OperationOptions\n): void {\n  if (options && options.session && options.session.inTransaction()) {\n    return;\n  }\n  const readConcern = Object.assign({}, command.readConcern || {});\n  if (coll.s.readConcern) {\n    Object.assign(readConcern, coll.s.readConcern);\n  }\n\n  if (Object.keys(readConcern).length > 0) {\n    Object.assign(command, { readConcern: readConcern });\n  }\n}\n\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nexport function decorateWithExplain(\n  command: Document,\n  explain: Explain\n): {\n  explain: Document;\n  verbosity: ExplainVerbosity;\n  maxTimeMS?: number;\n} {\n  type ExplainCommand = ReturnType<typeof decorateWithExplain>;\n  const { verbosity, maxTimeMS } = explain;\n  const baseCommand: ExplainCommand = { explain: command, verbosity };\n\n  if (typeof maxTimeMS === 'number') {\n    baseCommand.maxTimeMS = maxTimeMS;\n  }\n\n  return baseCommand;\n}\n\n/**\n * @internal\n */\nexport type TopologyProvider =\n  | MongoClient\n  | ClientSession\n  | FindCursor\n  | AbstractCursor\n  | Collection<any>\n  | Db;\n\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */\nexport function getTopology(provider: TopologyProvider): Topology {\n  // MongoClient or ClientSession or AbstractCursor\n  if ('topology' in provider && provider.topology) {\n    return provider.topology;\n  } else if ('client' in provider && provider.client.topology) {\n    return provider.client.topology;\n  }\n\n  throw new MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\n\n/** @internal */\nexport function ns(ns: string): MongoDBNamespace {\n  return MongoDBNamespace.fromString(ns);\n}\n\n/** @public */\nexport class MongoDBNamespace {\n  /**\n   * Create a namespace object\n   *\n   * @param db - database name\n   * @param collection - collection name\n   */\n  constructor(\n    public db: string,\n    public collection?: string\n  ) {\n    this.collection = collection === '' ? undefined : collection;\n  }\n\n  toString(): string {\n    return this.collection ? `${this.db}.${this.collection}` : this.db;\n  }\n\n  withCollection(collection: string): MongoDBCollectionNamespace {\n    return new MongoDBCollectionNamespace(this.db, collection);\n  }\n\n  static fromString(namespace?: string): MongoDBNamespace {\n    if (typeof namespace !== 'string' || namespace === '') {\n      // TODO(NODE-3483): Replace with MongoNamespaceError\n      throw new MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n    }\n\n    const [db, ...collectionParts] = namespace.split('.');\n    const collection = collectionParts.join('.');\n    return new MongoDBNamespace(db, collection === '' ? undefined : collection);\n  }\n}\n\n/**\n * @public\n *\n * A class representing a collection's namespace.  This class enforces (through Typescript) that\n * the `collection` portion of the namespace is defined and should only be\n * used in scenarios where this can be guaranteed.\n */\nexport class MongoDBCollectionNamespace extends MongoDBNamespace {\n  constructor(\n    db: string,\n    override collection: string\n  ) {\n    super(db, collection);\n  }\n\n  static override fromString(namespace?: string): MongoDBCollectionNamespace {\n    return super.fromString(namespace) as MongoDBCollectionNamespace;\n  }\n}\n\n/** @internal */\nexport function* makeCounter(seed = 0): Generator<number> {\n  let count = seed;\n  while (true) {\n    const newCount = count;\n    count += 1;\n    yield newCount;\n  }\n}\n\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\nexport function uuidV4(): Buffer {\n  const result = crypto.randomBytes(16);\n  result[6] = (result[6] & 0x0f) | 0x40;\n  result[8] = (result[8] & 0x3f) | 0x80;\n  return result;\n}\n\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\nexport function maxWireVersion(topologyOrServer?: Connection | Topology | Server): number {\n  if (topologyOrServer) {\n    if (topologyOrServer.loadBalanced || topologyOrServer.serverApi?.version) {\n      // Since we do not have a monitor in the load balanced mode,\n      // we assume the load-balanced server is always pointed at the latest mongodb version.\n      // There is a risk that for on-prem deployments\n      // that don't upgrade immediately that this could alert to the\n      // application that a feature is available that is actually not.\n      // We also return the max supported wire version for serverAPI.\n      return MAX_SUPPORTED_WIRE_VERSION;\n    }\n    if (topologyOrServer.hello) {\n      return topologyOrServer.hello.maxWireVersion;\n    }\n\n    if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n      const lastHello = topologyOrServer.lastHello();\n      if (lastHello) {\n        return lastHello.maxWireVersion;\n      }\n    }\n\n    if (\n      topologyOrServer.description &&\n      'maxWireVersion' in topologyOrServer.description &&\n      topologyOrServer.description.maxWireVersion != null\n    ) {\n      return topologyOrServer.description.maxWireVersion;\n    }\n  }\n\n  return 0;\n}\n\n/** @internal */\nexport function arrayStrictEqual(arr: unknown[], arr2: unknown[]): boolean {\n  if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n    return false;\n  }\n\n  return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\n\n/** @internal */\nexport function errorStrictEqual(lhs?: AnyError | null, rhs?: AnyError | null): boolean {\n  if (lhs === rhs) {\n    return true;\n  }\n\n  if (!lhs || !rhs) {\n    return lhs === rhs;\n  }\n\n  if ((lhs == null && rhs != null) || (lhs != null && rhs == null)) {\n    return false;\n  }\n\n  if (lhs.constructor.name !== rhs.constructor.name) {\n    return false;\n  }\n\n  if (lhs.message !== rhs.message) {\n    return false;\n  }\n\n  return true;\n}\n\ninterface StateTable {\n  [key: string]: string[];\n}\ninterface ObjectWithState {\n  s: { state: string };\n  emit(event: 'stateChanged', state: string, newState: string): void;\n}\ninterface StateTransitionFunction {\n  (target: ObjectWithState, newState: string): void;\n}\n\n/** @public */\nexport type EventEmitterWithState = {\n  /** @internal */\n  stateChanged(previous: string, current: string): void;\n};\n\n/** @internal */\nexport function makeStateMachine(stateTable: StateTable): StateTransitionFunction {\n  return function stateTransition(target, newState) {\n    const legalStates = stateTable[target.s.state];\n    if (legalStates && legalStates.indexOf(newState) < 0) {\n      throw new MongoRuntimeError(\n        `illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`\n      );\n    }\n\n    target.emit('stateChanged', target.s.state, newState);\n    target.s.state = newState;\n  };\n}\n\n/** @internal */\nexport function now(): number {\n  const hrtime = process.hrtime();\n  return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\n\n/** @internal */\nexport function calculateDurationInMs(started: number | undefined): number {\n  if (typeof started !== 'number') {\n    return -1;\n  }\n\n  const elapsed = now() - started;\n  return elapsed < 0 ? 0 : elapsed;\n}\n\n/** @internal */\nexport function hasAtomicOperators(doc: Document | Document[]): boolean {\n  if (Array.isArray(doc)) {\n    for (const document of doc) {\n      if (hasAtomicOperators(document)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const keys = Object.keys(doc);\n  return keys.length > 0 && keys[0][0] === '$';\n}\n\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n * @internal\n */\nexport function resolveOptions<T extends CommandOperationOptions>(\n  parent: OperationParent | undefined,\n  options?: T\n): T {\n  const result: T = Object.assign({}, options, resolveBSONOptions(options, parent));\n\n  // Users cannot pass a readConcern/writeConcern to operations in a transaction\n  const session = options?.session;\n  if (!session?.inTransaction()) {\n    const readConcern = ReadConcern.fromOptions(options) ?? parent?.readConcern;\n    if (readConcern) {\n      result.readConcern = readConcern;\n    }\n\n    const writeConcern = WriteConcern.fromOptions(options) ?? parent?.writeConcern;\n    if (writeConcern) {\n      result.writeConcern = writeConcern;\n    }\n  }\n\n  const readPreference = ReadPreference.fromOptions(options) ?? parent?.readPreference;\n  if (readPreference) {\n    result.readPreference = readPreference;\n  }\n\n  return result;\n}\n\nexport function isSuperset(set: Set<any> | any[], subset: Set<any> | any[]): boolean {\n  set = Array.isArray(set) ? new Set(set) : set;\n  subset = Array.isArray(subset) ? new Set(subset) : subset;\n  for (const elem of subset) {\n    if (!set.has(elem)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Checks if the document is a Hello request\n * @internal\n */\nexport function isHello(doc: Document): boolean {\n  return doc[LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\n\n/** Returns the items that are uniquely in setA */\nexport function setDifference<T>(setA: Iterable<T>, setB: Iterable<T>): Set<T> {\n  const difference = new Set<T>(setA);\n  for (const elem of setB) {\n    difference.delete(elem);\n  }\n  return difference;\n}\n\nconst HAS_OWN = (object: unknown, prop: string) =>\n  Object.prototype.hasOwnProperty.call(object, prop);\n\nexport function isRecord<T extends readonly string[]>(\n  value: unknown,\n  requiredKeys: T\n): value is Record<T[number], any>;\nexport function isRecord(value: unknown): value is Record<string, any>;\nexport function isRecord(\n  value: unknown,\n  requiredKeys: string[] | undefined = undefined\n): value is Record<string, any> {\n  if (!isObject(value)) {\n    return false;\n  }\n\n  const ctor = (value as any).constructor;\n  if (ctor && ctor.prototype) {\n    if (!isObject(ctor.prototype)) {\n      return false;\n    }\n\n    // Check to see if some method exists from the Object exists\n    if (!HAS_OWN(ctor.prototype, 'isPrototypeOf')) {\n      return false;\n    }\n  }\n\n  if (requiredKeys) {\n    const keys = Object.keys(value as Record<string, any>);\n    return isSuperset(keys, requiredKeys);\n  }\n\n  return true;\n}\n\n/**\n * Make a deep copy of an object\n *\n * NOTE: This is not meant to be the perfect implementation of a deep copy,\n * but instead something that is good enough for the purposes of\n * command monitoring.\n */\nexport function deepCopy<T>(value: T): T {\n  if (value == null) {\n    return value;\n  } else if (Array.isArray(value)) {\n    return value.map(item => deepCopy(item)) as unknown as T;\n  } else if (isRecord(value)) {\n    const res = {} as any;\n    for (const key in value) {\n      res[key] = deepCopy(value[key]);\n    }\n    return res;\n  }\n\n  const ctor = (value as any).constructor;\n  if (ctor) {\n    switch (ctor.name.toLowerCase()) {\n      case 'date':\n        return new ctor(Number(value));\n      case 'map':\n        return new Map(value as any) as unknown as T;\n      case 'set':\n        return new Set(value as any) as unknown as T;\n      case 'buffer':\n        return Buffer.from(value as unknown as Buffer) as unknown as T;\n    }\n  }\n\n  return value;\n}\n\ntype ListNode<T> = {\n  value: T;\n  next: ListNode<T> | HeadNode<T>;\n  prev: ListNode<T> | HeadNode<T>;\n};\n\ntype HeadNode<T> = {\n  value: null;\n  next: ListNode<T>;\n  prev: ListNode<T>;\n};\n\n/**\n * When a list is empty the head is a reference with pointers to itself\n * So this type represents that self referential state\n */\ntype EmptyNode = {\n  value: null;\n  next: EmptyNode;\n  prev: EmptyNode;\n};\n\n/**\n * A sequential list of items in a circularly linked list\n * @remarks\n * The head node is special, it is always defined and has a value of null.\n * It is never \"included\" in the list, in that, it is not returned by pop/shift or yielded by the iterator.\n * The circular linkage and always defined head node are to reduce checks for null next/prev references to zero.\n * New nodes are declared as object literals with keys always in the same order: next, prev, value.\n * @internal\n */\nexport class List<T = unknown> {\n  private readonly head: HeadNode<T> | EmptyNode;\n  private count: number;\n\n  get length() {\n    return this.count;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'List' as const;\n  }\n\n  constructor() {\n    this.count = 0;\n\n    // this is carefully crafted:\n    // declaring a complete and consistently key ordered\n    // object is beneficial to the runtime optimizations\n    this.head = {\n      next: null,\n      prev: null,\n      value: null\n    } as unknown as EmptyNode;\n    this.head.next = this.head;\n    this.head.prev = this.head;\n  }\n\n  toArray() {\n    return Array.from(this);\n  }\n\n  toString() {\n    return `head <=> ${this.toArray().join(' <=> ')} <=> head`;\n  }\n\n  *[Symbol.iterator](): Generator<T, void, void> {\n    for (const node of this.nodes()) {\n      yield node.value;\n    }\n  }\n\n  private *nodes(): Generator<ListNode<T>, void, void> {\n    let ptr: HeadNode<T> | ListNode<T> | EmptyNode = this.head.next;\n    while (ptr !== this.head) {\n      // Save next before yielding so that we make removing within iteration safe\n      const { next } = ptr as ListNode<T>;\n      yield ptr as ListNode<T>;\n      ptr = next;\n    }\n  }\n\n  /** Insert at end of list */\n  push(value: T) {\n    this.count += 1;\n    const newNode: ListNode<T> = {\n      next: this.head as HeadNode<T>,\n      prev: this.head.prev as ListNode<T>,\n      value\n    };\n    this.head.prev.next = newNode;\n    this.head.prev = newNode;\n  }\n\n  /** Inserts every item inside an iterable instead of the iterable itself */\n  pushMany(iterable: Iterable<T>) {\n    for (const value of iterable) {\n      this.push(value);\n    }\n  }\n\n  /** Insert at front of list */\n  unshift(value: T) {\n    this.count += 1;\n    const newNode: ListNode<T> = {\n      next: this.head.next as ListNode<T>,\n      prev: this.head as HeadNode<T>,\n      value\n    };\n    this.head.next.prev = newNode;\n    this.head.next = newNode;\n  }\n\n  private remove(node: ListNode<T> | EmptyNode): T | null {\n    if (node === this.head || this.length === 0) {\n      return null;\n    }\n\n    this.count -= 1;\n\n    const prevNode = node.prev;\n    const nextNode = node.next;\n    prevNode.next = nextNode;\n    nextNode.prev = prevNode;\n\n    return node.value;\n  }\n\n  /** Removes the first node at the front of the list */\n  shift(): T | null {\n    return this.remove(this.head.next);\n  }\n\n  /** Removes the last node at the end of the list */\n  pop(): T | null {\n    return this.remove(this.head.prev);\n  }\n\n  /** Iterates through the list and removes nodes where filter returns true */\n  prune(filter: (value: T) => boolean) {\n    for (const node of this.nodes()) {\n      if (filter(node.value)) {\n        this.remove(node);\n      }\n    }\n  }\n\n  clear() {\n    this.count = 0;\n    this.head.next = this.head as EmptyNode;\n    this.head.prev = this.head as EmptyNode;\n  }\n\n  /** Returns the first item in the list, does not remove */\n  first(): T | null {\n    // If the list is empty, value will be the head's null\n    return this.head.next.value;\n  }\n\n  /** Returns the last item in the list, does not remove */\n  last(): T | null {\n    // If the list is empty, value will be the head's null\n    return this.head.prev.value;\n  }\n}\n\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\nexport class BufferPool {\n  private buffers: List<Buffer>;\n  private totalByteLength: number;\n\n  constructor() {\n    this.buffers = new List();\n    this.totalByteLength = 0;\n  }\n\n  get length(): number {\n    return this.totalByteLength;\n  }\n\n  /** Adds a buffer to the internal buffer pool list */\n  append(buffer: Buffer): void {\n    this.buffers.push(buffer);\n    this.totalByteLength += buffer.length;\n  }\n\n  /**\n   * If BufferPool contains 4 bytes or more construct an int32 from the leading bytes,\n   * otherwise return null. Size can be negative, caller should error check.\n   */\n  getInt32(): number | null {\n    if (this.totalByteLength < 4) {\n      return null;\n    }\n    const firstBuffer = this.buffers.first();\n    if (firstBuffer != null && firstBuffer.byteLength >= 4) {\n      return firstBuffer.readInt32LE(0);\n    }\n\n    // Unlikely case: an int32 is split across buffers.\n    // Use read and put the returned buffer back on top\n    const top4Bytes = this.read(4);\n    const value = top4Bytes.readInt32LE(0);\n\n    // Put it back.\n    this.totalByteLength += 4;\n    this.buffers.unshift(top4Bytes);\n\n    return value;\n  }\n\n  /** Reads the requested number of bytes, optionally consuming them */\n  read(size: number): Buffer {\n    if (typeof size !== 'number' || size < 0) {\n      throw new MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n    }\n\n    // oversized request returns empty buffer\n    if (size > this.totalByteLength) {\n      return Buffer.alloc(0);\n    }\n\n    // We know we have enough, we just don't know how it is spread across chunks\n    // TODO(NODE-4732): alloc API should change based on raw option\n    const result = Buffer.allocUnsafe(size);\n\n    for (let bytesRead = 0; bytesRead < size; ) {\n      const buffer = this.buffers.shift();\n      if (buffer == null) {\n        break;\n      }\n      const bytesRemaining = size - bytesRead;\n      const bytesReadable = Math.min(bytesRemaining, buffer.byteLength);\n      const bytes = buffer.subarray(0, bytesReadable);\n\n      result.set(bytes, bytesRead);\n\n      bytesRead += bytesReadable;\n      this.totalByteLength -= bytesReadable;\n      if (bytesReadable < buffer.byteLength) {\n        this.buffers.unshift(buffer.subarray(bytesReadable));\n      }\n    }\n\n    return result;\n  }\n}\n\n/** @public */\nexport class HostAddress {\n  host: string | undefined = undefined;\n  port: number | undefined = undefined;\n  socketPath: string | undefined = undefined;\n  isIPv6 = false;\n\n  constructor(hostString: string) {\n    const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n\n    if (escapedHost.endsWith('.sock')) {\n      // heuristically determine if we're working with a domain socket\n      this.socketPath = decodeURIComponent(escapedHost);\n      return;\n    }\n\n    const urlString = `iLoveJS://${escapedHost}`;\n    let url;\n    try {\n      url = new URL(urlString);\n    } catch (urlError) {\n      const runtimeError = new MongoRuntimeError(`Unable to parse ${escapedHost} with URL`);\n      runtimeError.cause = urlError;\n      throw runtimeError;\n    }\n\n    const hostname = url.hostname;\n    const port = url.port;\n\n    let normalized = decodeURIComponent(hostname).toLowerCase();\n    if (normalized.startsWith('[') && normalized.endsWith(']')) {\n      this.isIPv6 = true;\n      normalized = normalized.substring(1, hostname.length - 1);\n    }\n\n    this.host = normalized.toLowerCase();\n\n    if (typeof port === 'number') {\n      this.port = port;\n    } else if (typeof port === 'string' && port !== '') {\n      this.port = Number.parseInt(port, 10);\n    } else {\n      this.port = 27017;\n    }\n\n    if (this.port === 0) {\n      throw new MongoParseError('Invalid port (zero) with hostname');\n    }\n    Object.freeze(this);\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n\n  inspect(): string {\n    return `new HostAddress('${this.toString()}')`;\n  }\n\n  toString(): string {\n    if (typeof this.host === 'string') {\n      if (this.isIPv6) {\n        return `[${this.host}]:${this.port}`;\n      }\n      return `${this.host}:${this.port}`;\n    }\n    return `${this.socketPath}`;\n  }\n\n  static fromString(this: void, s: string): HostAddress {\n    return new HostAddress(s);\n  }\n\n  static fromHostPort(host: string, port: number): HostAddress {\n    if (host.includes(':')) {\n      host = `[${host}]`; // IPv6 address\n    }\n    return HostAddress.fromString(`${host}:${port}`);\n  }\n\n  static fromSrvRecord({ name, port }: SrvRecord): HostAddress {\n    return HostAddress.fromHostPort(name, port);\n  }\n\n  toHostPort(): { host: string; port: number } {\n    if (this.socketPath) {\n      return { host: this.socketPath, port: 0 };\n    }\n\n    const host = this.host ?? '';\n    const port = this.port ?? 0;\n    return { host, port };\n  }\n}\n\nexport const DEFAULT_PK_FACTORY = {\n  // We prefer not to rely on ObjectId having a createPk method\n  createPk(): ObjectId {\n    return new ObjectId();\n  }\n};\n\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```ts\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\nexport const MONGODB_WARNING_CODE = 'MONGODB DRIVER';\n\n/** @internal */\nexport function emitWarning(message: string): void {\n  return process.emitWarning(message, { code: MONGODB_WARNING_CODE } as any);\n}\n\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\nexport function emitWarningOnce(message: string): void {\n  if (!emittedWarnings.has(message)) {\n    emittedWarnings.add(message);\n    return emitWarning(message);\n  }\n}\n\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\nexport function enumToString(en: Record<string, unknown>): string {\n  return Object.values(en).join(', ');\n}\n\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\nexport function supportsRetryableWrites(server?: Server): boolean {\n  if (!server) {\n    return false;\n  }\n\n  if (server.loadBalanced) {\n    // Loadbalanced topologies will always support retry writes\n    return true;\n  }\n\n  if (server.description.logicalSessionTimeoutMinutes != null) {\n    // that supports sessions\n    if (server.description.type !== ServerType.Standalone) {\n      // and that is not a standalone\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\nexport function shuffle<T>(sequence: Iterable<T>, limit = 0): Array<T> {\n  const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n\n  if (limit > items.length) {\n    throw new MongoRuntimeError('Limit must be less than the number of items');\n  }\n\n  let remainingItemsToShuffle = items.length;\n  const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n  while (remainingItemsToShuffle > lowerBound) {\n    // Pick a remaining element\n    const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n    remainingItemsToShuffle -= 1;\n\n    // And swap it with the current element\n    const swapHold = items[remainingItemsToShuffle];\n    items[remainingItemsToShuffle] = items[randomIndex];\n    items[randomIndex] = swapHold;\n  }\n\n  return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\n\n// TODO(NODE-4936): read concern eligibility for commands should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nexport function commandSupportsReadConcern(command: Document): boolean {\n  if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Compare objectIds. `null` is always less\n * - `+1 = oid1 is greater than oid2`\n * - `-1 = oid1 is less than oid2`\n * - `+0 = oid1 is equal oid2`\n */\nexport function compareObjectId(oid1?: ObjectId | null, oid2?: ObjectId | null): 0 | 1 | -1 {\n  if (oid1 == null && oid2 == null) {\n    return 0;\n  }\n\n  if (oid1 == null) {\n    return -1;\n  }\n\n  if (oid2 == null) {\n    return 1;\n  }\n\n  return ByteUtils.compare(oid1.id, oid2.id);\n}\n\nexport function parseInteger(value: unknown): number | null {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n\n  return Number.isNaN(parsedValue) ? null : parsedValue;\n}\n\nexport function parseUnsignedInteger(value: unknown): number | null {\n  const parsedInt = parseInteger(value);\n\n  return parsedInt != null && parsedInt >= 0 ? parsedInt : null;\n}\n\n/**\n * This function throws a MongoAPIError in the event that either of the following is true:\n * * If the provided address domain does not match the provided parent domain\n * * If the parent domain contains less than three `.` separated parts and the provided address does not contain at least one more domain level than its parent\n *\n * If a DNS server were to become compromised SRV records would still need to\n * advertise addresses that are under the same domain as the srvHost.\n *\n * @param address - The address to check against a domain\n * @param srvHost - The domain to check the provided address against\n * @returns void\n */\nexport function checkParentDomainMatch(address: string, srvHost: string): void {\n  // Remove trailing dot if exists on either the resolved address or the srv hostname\n  const normalizedAddress = address.endsWith('.') ? address.slice(0, address.length - 1) : address;\n  const normalizedSrvHost = srvHost.endsWith('.') ? srvHost.slice(0, srvHost.length - 1) : srvHost;\n\n  const allCharacterBeforeFirstDot = /^.*?\\./;\n  const srvIsLessThanThreeParts = normalizedSrvHost.split('.').length < 3;\n  // Remove all characters before first dot\n  // Add leading dot back to string so\n  //   an srvHostDomain = '.trusted.site'\n  //   will not satisfy an addressDomain that endsWith '.fake-trusted.site'\n  const addressDomain = `.${normalizedAddress.replace(allCharacterBeforeFirstDot, '')}`;\n  let srvHostDomain = srvIsLessThanThreeParts\n    ? normalizedSrvHost\n    : `.${normalizedSrvHost.replace(allCharacterBeforeFirstDot, '')}`;\n\n  if (!srvHostDomain.startsWith('.')) {\n    srvHostDomain = '.' + srvHostDomain;\n  }\n  if (\n    srvIsLessThanThreeParts &&\n    normalizedAddress.split('.').length <= normalizedSrvHost.split('.').length\n  ) {\n    throw new MongoAPIError(\n      'Server record does not have at least one more domain level than parent URI'\n    );\n  }\n  if (!addressDomain.endsWith(srvHostDomain)) {\n    throw new MongoAPIError('Server record does not share hostname with parent URI');\n  }\n}\n\ninterface RequestOptions {\n  json?: boolean;\n  method?: string;\n  timeout?: number;\n  headers?: http.OutgoingHttpHeaders;\n}\n\n/**\n * Perform a get request that returns status and body.\n * @internal\n */\nexport function get(\n  url: URL | string,\n  options: http.RequestOptions = {}\n): Promise<{ body: string; status: number | undefined }> {\n  return new Promise((resolve, reject) => {\n    /* eslint-disable prefer-const */\n    let timeoutId: NodeJS.Timeout;\n    const request = http\n      .get(url, options, response => {\n        response.setEncoding('utf8');\n        let body = '';\n        response.on('data', chunk => (body += chunk));\n        response.on('end', () => {\n          clearTimeout(timeoutId);\n          resolve({ status: response.statusCode, body });\n        });\n      })\n      .on('error', error => {\n        clearTimeout(timeoutId);\n        reject(error);\n      })\n      .end();\n    timeoutId = setTimeout(() => {\n      request.destroy(new MongoNetworkTimeoutError(`request timed out after 10 seconds`));\n    }, 10000);\n  });\n}\n\nexport async function request(uri: string): Promise<Record<string, any>>;\nexport async function request(\n  uri: string,\n  options?: { json?: true } & RequestOptions\n): Promise<Record<string, any>>;\nexport async function request(\n  uri: string,\n  options?: { json: false } & RequestOptions\n): Promise<string>;\nexport async function request(\n  uri: string,\n  options: RequestOptions = {}\n): Promise<string | Record<string, any>> {\n  return await new Promise<string | Record<string, any>>((resolve, reject) => {\n    const requestOptions = {\n      method: 'GET',\n      timeout: 10000,\n      json: true,\n      ...url.parse(uri),\n      ...options\n    };\n\n    const req = http.request(requestOptions, res => {\n      res.setEncoding('utf8');\n\n      let data = '';\n      res.on('data', d => {\n        data += d;\n      });\n\n      res.once('end', () => {\n        if (options.json === false) {\n          resolve(data);\n          return;\n        }\n\n        try {\n          const parsed = JSON.parse(data);\n          resolve(parsed);\n        } catch {\n          // TODO(NODE-3483)\n          reject(new MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n        }\n      });\n    });\n\n    req.once('timeout', () =>\n      req.destroy(\n        new MongoNetworkTimeoutError(\n          `Network request to ${uri} timed out after ${options.timeout} ms`\n        )\n      )\n    );\n    req.once('error', error => reject(error));\n    req.end();\n  });\n}\n\n/** @internal */\nexport const DOCUMENT_DB_CHECK = /(\\.docdb\\.amazonaws\\.com$)|(\\.docdb-elastic\\.amazonaws\\.com$)/;\n/** @internal */\nexport const COSMOS_DB_CHECK = /\\.cosmos\\.azure\\.com$/;\n\n/** @internal */\nexport const DOCUMENT_DB_MSG =\n  'You appear to be connected to a DocumentDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/documentdb';\n/** @internal */\nexport const COSMOS_DB_MSG =\n  'You appear to be connected to a CosmosDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/cosmosdb';\n\n/** @internal */\nexport function isHostMatch(match: RegExp, host?: string): boolean {\n  return host && match.test(host.toLowerCase()) ? true : false;\n}\n\nexport function promiseWithResolvers<T>(): {\n  promise: Promise<T>;\n  resolve: (value: T) => void;\n  reject: (error: Error) => void;\n} {\n  let resolve!: (value: T) => void;\n  let reject!: (error: Error) => void;\n  const promise = new Promise<T>(function withResolversExecutor(promiseResolve, promiseReject) {\n    resolve = promiseResolve;\n    reject = promiseReject;\n  });\n  return { promise, resolve, reject } as const;\n}\n\n/**\n * A noop function intended for use in preventing unhandled rejections.\n *\n * @example\n * ```js\n * const promise = myAsyncTask();\n * // eslint-disable-next-line github/no-then\n * promise.then(undefined, squashError);\n * ```\n */\nexport function squashError(_error: unknown) {\n  return;\n}\n\nexport const randomBytes = promisify(crypto.randomBytes);\n\n/**\n * Replicates the events.once helper.\n *\n * Removes unused signal logic and It **only** supports 0 or 1 argument events.\n *\n * @param ee - An event emitter that may emit `ev`\n * @param name - An event name to wait for\n */\nexport async function once<T>(ee: EventEmitter, name: string): Promise<T> {\n  const { promise, resolve, reject } = promiseWithResolvers<T>();\n  const onEvent = (data: T) => resolve(data);\n  const onError = (error: Error) => reject(error);\n\n  ee.once(name, onEvent).once('error', onError);\n  try {\n    const res = await promise;\n    ee.off('error', onError);\n    return res;\n  } catch (error) {\n    ee.off(name, onEvent);\n    throw error;\n  }\n}\n\nexport function maybeAddIdToDocuments(\n  coll: Collection,\n  docs: Document[],\n  options: { forceServerObjectId?: boolean }\n): Document[];\nexport function maybeAddIdToDocuments(\n  coll: Collection,\n  docs: Document,\n  options: { forceServerObjectId?: boolean }\n): Document;\nexport function maybeAddIdToDocuments(\n  coll: Collection,\n  docOrDocs: Document[] | Document,\n  options: { forceServerObjectId?: boolean }\n): Document[] | Document {\n  const forceServerObjectId =\n    typeof options.forceServerObjectId === 'boolean'\n      ? options.forceServerObjectId\n      : coll.s.db.options?.forceServerObjectId;\n\n  // no need to modify the docs if server sets the ObjectId\n  if (forceServerObjectId === true) {\n    return docOrDocs;\n  }\n\n  const transform = (doc: Document): Document => {\n    if (doc._id == null) {\n      doc._id = coll.s.pkFactory.createPk();\n    }\n\n    return doc;\n  };\n  return Array.isArray(docOrDocs) ? docOrDocs.map(transform) : transform(docOrDocs);\n}\n\nexport async function fileIsAccessible(fileName: string, mode?: number) {\n  try {\n    await fs.access(fileName, mode);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function noop() {\n  return;\n}\n\n/**\n * Recurse through the (identically-shaped) `decrypted` and `original`\n * objects and attach a `decryptedKeys` property on each sub-object that\n * contained encrypted fields. Because we only call this on BSON responses,\n * we do not need to worry about circular references.\n *\n * @internal\n */\nexport function decorateDecryptionResult(\n  decrypted: Document & { [kDecoratedKeys]?: Array<string> },\n  original: Document,\n  isTopLevelDecorateCall = true\n): void {\n  if (isTopLevelDecorateCall) {\n    // The original value could have been either a JS object or a BSON buffer\n    if (Buffer.isBuffer(original)) {\n      original = deserialize(original);\n    }\n    if (Buffer.isBuffer(decrypted)) {\n      throw new MongoRuntimeError('Expected result of decryption to be deserialized BSON object');\n    }\n  }\n\n  if (!decrypted || typeof decrypted !== 'object') return;\n  for (const k of Object.keys(decrypted)) {\n    const originalValue = original[k];\n\n    // An object was decrypted by libmongocrypt if and only if it was\n    // a BSON Binary object with subtype 6.\n    if (originalValue && originalValue._bsontype === 'Binary' && originalValue.sub_type === 6) {\n      if (!decrypted[kDecoratedKeys]) {\n        Object.defineProperty(decrypted, kDecoratedKeys, {\n          value: [],\n          configurable: true,\n          enumerable: false,\n          writable: false\n        });\n      }\n      // this is defined in the preceding if-statement\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      decrypted[kDecoratedKeys]!.push(k);\n      // Do not recurse into this decrypted value. It could be a sub-document/array,\n      // in which case there is no original value associated with its subfields.\n      continue;\n    }\n\n    decorateDecryptionResult(decrypted[k], originalValue, false);\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}