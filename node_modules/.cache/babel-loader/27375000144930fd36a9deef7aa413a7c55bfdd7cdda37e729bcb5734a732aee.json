{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { getGlobal } from '../internal/global-utils';\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nvar DiagComponentLogger = /** @class */function () {\n  function DiagComponentLogger(props) {\n    this._namespace = props.namespace || 'DiagComponentLogger';\n  }\n  DiagComponentLogger.prototype.debug = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return logProxy('debug', this._namespace, args);\n  };\n  DiagComponentLogger.prototype.error = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return logProxy('error', this._namespace, args);\n  };\n  DiagComponentLogger.prototype.info = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return logProxy('info', this._namespace, args);\n  };\n  DiagComponentLogger.prototype.warn = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return logProxy('warn', this._namespace, args);\n  };\n  DiagComponentLogger.prototype.verbose = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return logProxy('verbose', this._namespace, args);\n  };\n  return DiagComponentLogger;\n}();\nexport { DiagComponentLogger };\nfunction logProxy(funcName, namespace, args) {\n  var logger = getGlobal('diag');\n  // shortcut if logger not set\n  if (!logger) {\n    return;\n  }\n  args.unshift(namespace);\n  return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,SAASA,SAAS,QAAQ,0BAA0B;AAGpD;;;;;;;;;AASA;EAGE,6BAAYC,KAA6B;IACvC,IAAI,CAACC,UAAU,GAAGD,KAAK,CAACE,SAAS,IAAI,qBAAqB;EAC5D;EAEOC,mCAAK,GAAZ;IAAa;SAAA,UAAc,EAAdC,qBAAc,EAAdA,IAAc;MAAdC;;IACX,OAAOC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAACL,UAAU,EAAEI,IAAI,CAAC;EACjD,CAAC;EAEMF,mCAAK,GAAZ;IAAa;SAAA,UAAc,EAAdC,qBAAc,EAAdA,IAAc;MAAdC;;IACX,OAAOC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAACL,UAAU,EAAEI,IAAI,CAAC;EACjD,CAAC;EAEMF,kCAAI,GAAX;IAAY;SAAA,UAAc,EAAdC,qBAAc,EAAdA,IAAc;MAAdC;;IACV,OAAOC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAACL,UAAU,EAAEI,IAAI,CAAC;EAChD,CAAC;EAEMF,kCAAI,GAAX;IAAY;SAAA,UAAc,EAAdC,qBAAc,EAAdA,IAAc;MAAdC;;IACV,OAAOC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAACL,UAAU,EAAEI,IAAI,CAAC;EAChD,CAAC;EAEMF,qCAAO,GAAd;IAAe;SAAA,UAAc,EAAdC,qBAAc,EAAdA,IAAc;MAAdC;;IACb,OAAOC,QAAQ,CAAC,SAAS,EAAE,IAAI,CAACL,UAAU,EAAEI,IAAI,CAAC;EACnD,CAAC;EACH,0BAAC;AAAD,CAAC,EA1BD;;AA4BA,SAASC,QAAQ,CACfC,QAA0B,EAC1BL,SAAiB,EACjBG,IAAS;EAET,IAAMG,MAAM,GAAGT,SAAS,CAAC,MAAM,CAAC;EAChC;EACA,IAAI,CAACS,MAAM,EAAE;IACX;;EAGFH,IAAI,CAACI,OAAO,CAACP,SAAS,CAAC;EACvB,OAAOM,MAAM,CAACD,QAAQ,CAAC,OAAhBC,MAAM,2BAAeH,IAAoC;AAClE","names":["getGlobal","props","_namespace","namespace","DiagComponentLogger","_i","args","logProxy","funcName","logger","unshift"],"sources":["/home/yadu/Music/Gifty/node_modules/@opentelemetry/api/src/diag/ComponentLogger.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getGlobal } from '../internal/global-utils';\nimport { ComponentLoggerOptions, DiagLogger, DiagLogFunction } from './types';\n\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nexport class DiagComponentLogger implements DiagLogger {\n  private _namespace: string;\n\n  constructor(props: ComponentLoggerOptions) {\n    this._namespace = props.namespace || 'DiagComponentLogger';\n  }\n\n  public debug(...args: any[]): void {\n    return logProxy('debug', this._namespace, args);\n  }\n\n  public error(...args: any[]): void {\n    return logProxy('error', this._namespace, args);\n  }\n\n  public info(...args: any[]): void {\n    return logProxy('info', this._namespace, args);\n  }\n\n  public warn(...args: any[]): void {\n    return logProxy('warn', this._namespace, args);\n  }\n\n  public verbose(...args: any[]): void {\n    return logProxy('verbose', this._namespace, args);\n  }\n}\n\nfunction logProxy(\n  funcName: keyof DiagLogger,\n  namespace: string,\n  args: any\n): void {\n  const logger = getGlobal('diag');\n  // shortcut if logger not set\n  if (!logger) {\n    return;\n  }\n\n  args.unshift(namespace);\n  return logger[funcName](...(args as Parameters<DiagLogFunction>));\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}