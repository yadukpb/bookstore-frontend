{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LimitedSizeDocument = void 0;\nexports.makeClientMetadata = makeClientMetadata;\nexports.addContainerMetadata = addContainerMetadata;\nexports.getFAASEnv = getFAASEnv;\nconst os = require(\"os\");\nconst process = require(\"process\");\nconst bson_1 = require(\"../../bson\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\n// eslint-disable-next-line @typescript-eslint/no-require-imports\nconst NODE_DRIVER_VERSION = require('../../../package.json').version;\n/** @internal */\nclass LimitedSizeDocument {\n  constructor(maxSize) {\n    this.maxSize = maxSize;\n    this.document = new Map();\n    /** BSON overhead: Int32 + Null byte */\n    this.documentSize = 5;\n  }\n  /** Only adds key/value if the bsonByteLength is less than MAX_SIZE */\n  ifItFitsItSits(key, value) {\n    // The BSON byteLength of the new element is the same as serializing it to its own document\n    // subtracting the document size int32 and the null terminator.\n    const newElementSize = bson_1.BSON.serialize(new Map().set(key, value)).byteLength - 5;\n    if (newElementSize + this.documentSize > this.maxSize) {\n      return false;\n    }\n    this.documentSize += newElementSize;\n    this.document.set(key, value);\n    return true;\n  }\n  toObject() {\n    return bson_1.BSON.deserialize(bson_1.BSON.serialize(this.document), {\n      promoteLongs: false,\n      promoteBuffers: false,\n      promoteValues: false,\n      useBigInt64: false\n    });\n  }\n}\nexports.LimitedSizeDocument = LimitedSizeDocument;\n/**\n * From the specs:\n * Implementors SHOULD cumulatively update fields in the following order until the document is under the size limit:\n * 1. Omit fields from `env` except `env.name`.\n * 2. Omit fields from `os` except `os.type`.\n * 3. Omit the `env` document entirely.\n * 4. Truncate `platform`. -- special we do not truncate this field\n */\nfunction makeClientMetadata(options) {\n  const metadataDocument = new LimitedSizeDocument(512);\n  const {\n    appName = ''\n  } = options;\n  // Add app name first, it must be sent\n  if (appName.length > 0) {\n    const name = Buffer.byteLength(appName, 'utf8') <= 128 ? options.appName : Buffer.from(appName, 'utf8').subarray(0, 128).toString('utf8');\n    metadataDocument.ifItFitsItSits('application', {\n      name\n    });\n  }\n  const {\n    name = '',\n    version = '',\n    platform = ''\n  } = options.driverInfo;\n  const driverInfo = {\n    name: name.length > 0 ? `nodejs|${name}` : 'nodejs',\n    version: version.length > 0 ? `${NODE_DRIVER_VERSION}|${version}` : NODE_DRIVER_VERSION\n  };\n  if (!metadataDocument.ifItFitsItSits('driver', driverInfo)) {\n    throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo name and version, metadata cannot exceed 512 bytes');\n  }\n  let runtimeInfo = getRuntimeInfo();\n  if (platform.length > 0) {\n    runtimeInfo = `${runtimeInfo}|${platform}`;\n  }\n  if (!metadataDocument.ifItFitsItSits('platform', runtimeInfo)) {\n    throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo platform, metadata cannot exceed 512 bytes');\n  }\n  // Note: order matters, os.type is last so it will be removed last if we're at maxSize\n  const osInfo = new Map().set('name', process.platform).set('architecture', process.arch).set('version', os.release()).set('type', os.type());\n  if (!metadataDocument.ifItFitsItSits('os', osInfo)) {\n    for (const key of osInfo.keys()) {\n      osInfo.delete(key);\n      if (osInfo.size === 0) break;\n      if (metadataDocument.ifItFitsItSits('os', osInfo)) break;\n    }\n  }\n  const faasEnv = getFAASEnv();\n  if (faasEnv != null) {\n    if (!metadataDocument.ifItFitsItSits('env', faasEnv)) {\n      for (const key of faasEnv.keys()) {\n        faasEnv.delete(key);\n        if (faasEnv.size === 0) break;\n        if (metadataDocument.ifItFitsItSits('env', faasEnv)) break;\n      }\n    }\n  }\n  return metadataDocument.toObject();\n}\nlet dockerPromise;\n/** @internal */\nasync function getContainerMetadata() {\n  const containerMetadata = {};\n  dockerPromise ??= (0, utils_1.fileIsAccessible)('/.dockerenv');\n  const isDocker = await dockerPromise;\n  const {\n    KUBERNETES_SERVICE_HOST = ''\n  } = process.env;\n  const isKubernetes = KUBERNETES_SERVICE_HOST.length > 0 ? true : false;\n  if (isDocker) containerMetadata.runtime = 'docker';\n  if (isKubernetes) containerMetadata.orchestrator = 'kubernetes';\n  return containerMetadata;\n}\n/**\n * @internal\n * Re-add each metadata value.\n * Attempt to add new env container metadata, but keep old data if it does not fit.\n */\nasync function addContainerMetadata(originalMetadata) {\n  const containerMetadata = await getContainerMetadata();\n  if (Object.keys(containerMetadata).length === 0) return originalMetadata;\n  const extendedMetadata = new LimitedSizeDocument(512);\n  const extendedEnvMetadata = {\n    ...originalMetadata?.env,\n    container: containerMetadata\n  };\n  for (const [key, val] of Object.entries(originalMetadata)) {\n    if (key !== 'env') {\n      extendedMetadata.ifItFitsItSits(key, val);\n    } else {\n      if (!extendedMetadata.ifItFitsItSits('env', extendedEnvMetadata)) {\n        // add in old data if newer / extended metadata does not fit\n        extendedMetadata.ifItFitsItSits('env', val);\n      }\n    }\n  }\n  if (!('env' in originalMetadata)) {\n    extendedMetadata.ifItFitsItSits('env', extendedEnvMetadata);\n  }\n  return extendedMetadata.toObject();\n}\n/**\n * Collects FaaS metadata.\n * - `name` MUST be the last key in the Map returned.\n */\nfunction getFAASEnv() {\n  const {\n    AWS_EXECUTION_ENV = '',\n    AWS_LAMBDA_RUNTIME_API = '',\n    FUNCTIONS_WORKER_RUNTIME = '',\n    K_SERVICE = '',\n    FUNCTION_NAME = '',\n    VERCEL = '',\n    AWS_LAMBDA_FUNCTION_MEMORY_SIZE = '',\n    AWS_REGION = '',\n    FUNCTION_MEMORY_MB = '',\n    FUNCTION_REGION = '',\n    FUNCTION_TIMEOUT_SEC = '',\n    VERCEL_REGION = ''\n  } = process.env;\n  const isAWSFaaS = AWS_EXECUTION_ENV.startsWith('AWS_Lambda_') || AWS_LAMBDA_RUNTIME_API.length > 0;\n  const isAzureFaaS = FUNCTIONS_WORKER_RUNTIME.length > 0;\n  const isGCPFaaS = K_SERVICE.length > 0 || FUNCTION_NAME.length > 0;\n  const isVercelFaaS = VERCEL.length > 0;\n  // Note: order matters, name must always be the last key\n  const faasEnv = new Map();\n  // When isVercelFaaS is true so is isAWSFaaS; Vercel inherits the AWS env\n  if (isVercelFaaS && !(isAzureFaaS || isGCPFaaS)) {\n    if (VERCEL_REGION.length > 0) {\n      faasEnv.set('region', VERCEL_REGION);\n    }\n    faasEnv.set('name', 'vercel');\n    return faasEnv;\n  }\n  if (isAWSFaaS && !(isAzureFaaS || isGCPFaaS || isVercelFaaS)) {\n    if (AWS_REGION.length > 0) {\n      faasEnv.set('region', AWS_REGION);\n    }\n    if (AWS_LAMBDA_FUNCTION_MEMORY_SIZE.length > 0 && Number.isInteger(+AWS_LAMBDA_FUNCTION_MEMORY_SIZE)) {\n      faasEnv.set('memory_mb', new bson_1.Int32(AWS_LAMBDA_FUNCTION_MEMORY_SIZE));\n    }\n    faasEnv.set('name', 'aws.lambda');\n    return faasEnv;\n  }\n  if (isAzureFaaS && !(isGCPFaaS || isAWSFaaS || isVercelFaaS)) {\n    faasEnv.set('name', 'azure.func');\n    return faasEnv;\n  }\n  if (isGCPFaaS && !(isAzureFaaS || isAWSFaaS || isVercelFaaS)) {\n    if (FUNCTION_REGION.length > 0) {\n      faasEnv.set('region', FUNCTION_REGION);\n    }\n    if (FUNCTION_MEMORY_MB.length > 0 && Number.isInteger(+FUNCTION_MEMORY_MB)) {\n      faasEnv.set('memory_mb', new bson_1.Int32(FUNCTION_MEMORY_MB));\n    }\n    if (FUNCTION_TIMEOUT_SEC.length > 0 && Number.isInteger(+FUNCTION_TIMEOUT_SEC)) {\n      faasEnv.set('timeout_sec', new bson_1.Int32(FUNCTION_TIMEOUT_SEC));\n    }\n    faasEnv.set('name', 'gcp.func');\n    return faasEnv;\n  }\n  return null;\n}\n/**\n * @internal\n * Get current JavaScript runtime platform\n *\n * NOTE: The version information fetching is intentionally written defensively\n * to avoid having a released driver version that becomes incompatible\n * with a future change to these global objects.\n */\nfunction getRuntimeInfo() {\n  if ('Deno' in globalThis) {\n    const version = typeof Deno?.version?.deno === 'string' ? Deno?.version?.deno : '0.0.0-unknown';\n    return `Deno v${version}, ${os.endianness()}`;\n  }\n  if ('Bun' in globalThis) {\n    const version = typeof Bun?.version === 'string' ? Bun?.version : '0.0.0-unknown';\n    return `Bun v${version}, ${os.endianness()}`;\n  }\n  return `Node.js ${process.version}, ${os.endianness()}`;\n}","map":{"version":3,"mappings":"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","names":["exports","NODE_DRIVER_VERSION","require","version","LimitedSizeDocument","constructor","maxSize","Map","ifItFitsItSits","key","value","newElementSize","bson_1","serialize","set","byteLength","documentSize","document","toObject","deserialize","promoteLongs","promoteBuffers","promoteValues","useBigInt64","makeClientMetadata","options","metadataDocument","appName","length","name","Buffer","from","subarray","toString","platform","driverInfo","error_1","runtimeInfo","getRuntimeInfo","osInfo","process","arch","os","release","type","keys","delete","size","faasEnv","getFAASEnv","dockerPromise","getContainerMetadata","containerMetadata","isDocker","KUBERNETES_SERVICE_HOST","env","isKubernetes","runtime","orchestrator","addContainerMetadata","originalMetadata","Object","extendedMetadata","extendedEnvMetadata","container","val","entries","AWS_EXECUTION_ENV","AWS_LAMBDA_RUNTIME_API","FUNCTIONS_WORKER_RUNTIME","K_SERVICE","FUNCTION_NAME","VERCEL","AWS_LAMBDA_FUNCTION_MEMORY_SIZE","AWS_REGION","FUNCTION_MEMORY_MB","FUNCTION_REGION","FUNCTION_TIMEOUT_SEC","VERCEL_REGION","isAWSFaaS","startsWith","isAzureFaaS","isGCPFaaS","isVercelFaaS","Number","isInteger","globalThis","Deno","deno","endianness","Bun"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/cmap/handshake/client_metadata.ts"],"sourcesContent":["import * as os from 'os';\nimport * as process from 'process';\n\nimport { BSON, type Document, Int32 } from '../../bson';\nimport { MongoInvalidArgumentError } from '../../error';\nimport type { MongoOptions } from '../../mongo_client';\nimport { fileIsAccessible } from '../../utils';\n\n// eslint-disable-next-line @typescript-eslint/no-require-imports\nconst NODE_DRIVER_VERSION = require('../../../package.json').version;\n\n/**\n * @public\n * @see https://github.com/mongodb/specifications/blob/master/source/mongodb-handshake/handshake.rst#hello-command\n */\nexport interface ClientMetadata {\n  driver: {\n    name: string;\n    version: string;\n  };\n  os: {\n    type: string;\n    name?: NodeJS.Platform;\n    architecture?: string;\n    version?: string;\n  };\n  platform: string;\n  application?: {\n    name: string;\n  };\n  /** FaaS environment information */\n  env?: {\n    name: 'aws.lambda' | 'gcp.func' | 'azure.func' | 'vercel';\n    timeout_sec?: Int32;\n    memory_mb?: Int32;\n    region?: string;\n    url?: string;\n  };\n}\n\n/** @public */\nexport interface ClientMetadataOptions {\n  driverInfo?: {\n    name?: string;\n    version?: string;\n    platform?: string;\n  };\n  appName?: string;\n}\n\n/** @internal */\nexport class LimitedSizeDocument {\n  private document = new Map();\n  /** BSON overhead: Int32 + Null byte */\n  private documentSize = 5;\n  constructor(private maxSize: number) {}\n\n  /** Only adds key/value if the bsonByteLength is less than MAX_SIZE */\n  public ifItFitsItSits(key: string, value: Record<string, any> | string): boolean {\n    // The BSON byteLength of the new element is the same as serializing it to its own document\n    // subtracting the document size int32 and the null terminator.\n    const newElementSize = BSON.serialize(new Map().set(key, value)).byteLength - 5;\n\n    if (newElementSize + this.documentSize > this.maxSize) {\n      return false;\n    }\n\n    this.documentSize += newElementSize;\n\n    this.document.set(key, value);\n\n    return true;\n  }\n\n  toObject(): Document {\n    return BSON.deserialize(BSON.serialize(this.document), {\n      promoteLongs: false,\n      promoteBuffers: false,\n      promoteValues: false,\n      useBigInt64: false\n    });\n  }\n}\n\ntype MakeClientMetadataOptions = Pick<MongoOptions, 'appName' | 'driverInfo'>;\n/**\n * From the specs:\n * Implementors SHOULD cumulatively update fields in the following order until the document is under the size limit:\n * 1. Omit fields from `env` except `env.name`.\n * 2. Omit fields from `os` except `os.type`.\n * 3. Omit the `env` document entirely.\n * 4. Truncate `platform`. -- special we do not truncate this field\n */\nexport function makeClientMetadata(options: MakeClientMetadataOptions): ClientMetadata {\n  const metadataDocument = new LimitedSizeDocument(512);\n\n  const { appName = '' } = options;\n  // Add app name first, it must be sent\n  if (appName.length > 0) {\n    const name =\n      Buffer.byteLength(appName, 'utf8') <= 128\n        ? options.appName\n        : Buffer.from(appName, 'utf8').subarray(0, 128).toString('utf8');\n    metadataDocument.ifItFitsItSits('application', { name });\n  }\n\n  const { name = '', version = '', platform = '' } = options.driverInfo;\n\n  const driverInfo = {\n    name: name.length > 0 ? `nodejs|${name}` : 'nodejs',\n    version: version.length > 0 ? `${NODE_DRIVER_VERSION}|${version}` : NODE_DRIVER_VERSION\n  };\n\n  if (!metadataDocument.ifItFitsItSits('driver', driverInfo)) {\n    throw new MongoInvalidArgumentError(\n      'Unable to include driverInfo name and version, metadata cannot exceed 512 bytes'\n    );\n  }\n\n  let runtimeInfo = getRuntimeInfo();\n  if (platform.length > 0) {\n    runtimeInfo = `${runtimeInfo}|${platform}`;\n  }\n\n  if (!metadataDocument.ifItFitsItSits('platform', runtimeInfo)) {\n    throw new MongoInvalidArgumentError(\n      'Unable to include driverInfo platform, metadata cannot exceed 512 bytes'\n    );\n  }\n\n  // Note: order matters, os.type is last so it will be removed last if we're at maxSize\n  const osInfo = new Map()\n    .set('name', process.platform)\n    .set('architecture', process.arch)\n    .set('version', os.release())\n    .set('type', os.type());\n\n  if (!metadataDocument.ifItFitsItSits('os', osInfo)) {\n    for (const key of osInfo.keys()) {\n      osInfo.delete(key);\n      if (osInfo.size === 0) break;\n      if (metadataDocument.ifItFitsItSits('os', osInfo)) break;\n    }\n  }\n\n  const faasEnv = getFAASEnv();\n  if (faasEnv != null) {\n    if (!metadataDocument.ifItFitsItSits('env', faasEnv)) {\n      for (const key of faasEnv.keys()) {\n        faasEnv.delete(key);\n        if (faasEnv.size === 0) break;\n        if (metadataDocument.ifItFitsItSits('env', faasEnv)) break;\n      }\n    }\n  }\n  return metadataDocument.toObject() as ClientMetadata;\n}\n\nlet dockerPromise: Promise<boolean>;\n/** @internal */\nasync function getContainerMetadata() {\n  const containerMetadata: Record<string, any> = {};\n  dockerPromise ??= fileIsAccessible('/.dockerenv');\n  const isDocker = await dockerPromise;\n\n  const { KUBERNETES_SERVICE_HOST = '' } = process.env;\n  const isKubernetes = KUBERNETES_SERVICE_HOST.length > 0 ? true : false;\n\n  if (isDocker) containerMetadata.runtime = 'docker';\n  if (isKubernetes) containerMetadata.orchestrator = 'kubernetes';\n\n  return containerMetadata;\n}\n\n/**\n * @internal\n * Re-add each metadata value.\n * Attempt to add new env container metadata, but keep old data if it does not fit.\n */\nexport async function addContainerMetadata(originalMetadata: ClientMetadata) {\n  const containerMetadata = await getContainerMetadata();\n  if (Object.keys(containerMetadata).length === 0) return originalMetadata;\n\n  const extendedMetadata = new LimitedSizeDocument(512);\n\n  const extendedEnvMetadata = { ...originalMetadata?.env, container: containerMetadata };\n\n  for (const [key, val] of Object.entries(originalMetadata)) {\n    if (key !== 'env') {\n      extendedMetadata.ifItFitsItSits(key, val);\n    } else {\n      if (!extendedMetadata.ifItFitsItSits('env', extendedEnvMetadata)) {\n        // add in old data if newer / extended metadata does not fit\n        extendedMetadata.ifItFitsItSits('env', val);\n      }\n    }\n  }\n\n  if (!('env' in originalMetadata)) {\n    extendedMetadata.ifItFitsItSits('env', extendedEnvMetadata);\n  }\n\n  return extendedMetadata.toObject();\n}\n\n/**\n * Collects FaaS metadata.\n * - `name` MUST be the last key in the Map returned.\n */\nexport function getFAASEnv(): Map<string, string | Int32> | null {\n  const {\n    AWS_EXECUTION_ENV = '',\n    AWS_LAMBDA_RUNTIME_API = '',\n    FUNCTIONS_WORKER_RUNTIME = '',\n    K_SERVICE = '',\n    FUNCTION_NAME = '',\n    VERCEL = '',\n    AWS_LAMBDA_FUNCTION_MEMORY_SIZE = '',\n    AWS_REGION = '',\n    FUNCTION_MEMORY_MB = '',\n    FUNCTION_REGION = '',\n    FUNCTION_TIMEOUT_SEC = '',\n    VERCEL_REGION = ''\n  } = process.env;\n\n  const isAWSFaaS =\n    AWS_EXECUTION_ENV.startsWith('AWS_Lambda_') || AWS_LAMBDA_RUNTIME_API.length > 0;\n  const isAzureFaaS = FUNCTIONS_WORKER_RUNTIME.length > 0;\n  const isGCPFaaS = K_SERVICE.length > 0 || FUNCTION_NAME.length > 0;\n  const isVercelFaaS = VERCEL.length > 0;\n\n  // Note: order matters, name must always be the last key\n  const faasEnv = new Map();\n\n  // When isVercelFaaS is true so is isAWSFaaS; Vercel inherits the AWS env\n  if (isVercelFaaS && !(isAzureFaaS || isGCPFaaS)) {\n    if (VERCEL_REGION.length > 0) {\n      faasEnv.set('region', VERCEL_REGION);\n    }\n\n    faasEnv.set('name', 'vercel');\n    return faasEnv;\n  }\n\n  if (isAWSFaaS && !(isAzureFaaS || isGCPFaaS || isVercelFaaS)) {\n    if (AWS_REGION.length > 0) {\n      faasEnv.set('region', AWS_REGION);\n    }\n\n    if (\n      AWS_LAMBDA_FUNCTION_MEMORY_SIZE.length > 0 &&\n      Number.isInteger(+AWS_LAMBDA_FUNCTION_MEMORY_SIZE)\n    ) {\n      faasEnv.set('memory_mb', new Int32(AWS_LAMBDA_FUNCTION_MEMORY_SIZE));\n    }\n\n    faasEnv.set('name', 'aws.lambda');\n    return faasEnv;\n  }\n\n  if (isAzureFaaS && !(isGCPFaaS || isAWSFaaS || isVercelFaaS)) {\n    faasEnv.set('name', 'azure.func');\n    return faasEnv;\n  }\n\n  if (isGCPFaaS && !(isAzureFaaS || isAWSFaaS || isVercelFaaS)) {\n    if (FUNCTION_REGION.length > 0) {\n      faasEnv.set('region', FUNCTION_REGION);\n    }\n\n    if (FUNCTION_MEMORY_MB.length > 0 && Number.isInteger(+FUNCTION_MEMORY_MB)) {\n      faasEnv.set('memory_mb', new Int32(FUNCTION_MEMORY_MB));\n    }\n\n    if (FUNCTION_TIMEOUT_SEC.length > 0 && Number.isInteger(+FUNCTION_TIMEOUT_SEC)) {\n      faasEnv.set('timeout_sec', new Int32(FUNCTION_TIMEOUT_SEC));\n    }\n\n    faasEnv.set('name', 'gcp.func');\n    return faasEnv;\n  }\n\n  return null;\n}\n\n/**\n * @internal\n * This type represents the global Deno object and the minimal type contract we expect it to satisfy.\n */\ndeclare const Deno: { version?: { deno?: string } } | undefined;\n\n/**\n * @internal\n * This type represents the global Bun object and the minimal type contract we expect it to satisfy.\n */\ndeclare const Bun: { (): void; version?: string } | undefined;\n\n/**\n * @internal\n * Get current JavaScript runtime platform\n *\n * NOTE: The version information fetching is intentionally written defensively\n * to avoid having a released driver version that becomes incompatible\n * with a future change to these global objects.\n */\nfunction getRuntimeInfo(): string {\n  if ('Deno' in globalThis) {\n    const version = typeof Deno?.version?.deno === 'string' ? Deno?.version?.deno : '0.0.0-unknown';\n\n    return `Deno v${version}, ${os.endianness()}`;\n  }\n\n  if ('Bun' in globalThis) {\n    const version = typeof Bun?.version === 'string' ? Bun?.version : '0.0.0-unknown';\n\n    return `Bun v${version}, ${os.endianness()}`;\n  }\n\n  return `Node.js ${process.version}, ${os.endianness()}`;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}