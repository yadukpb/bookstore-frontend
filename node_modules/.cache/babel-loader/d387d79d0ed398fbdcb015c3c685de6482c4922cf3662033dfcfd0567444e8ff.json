{"ast":null,"code":"/*! firebase-admin v12.7.0 */\n\"use strict\";\n\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InstanceIdClientErrorCode = exports.FirebaseInstanceIdError = exports.getInstanceId = exports.InstanceId = void 0;\n/**\n * Firebase Instance ID service.\n *\n * @packageDocumentation\n */\nconst index_1 = require(\"../app/index\");\nconst instance_id_1 = require(\"./instance-id\");\nObject.defineProperty(exports, \"InstanceId\", {\n  enumerable: true,\n  get: function () {\n    return instance_id_1.InstanceId;\n  }\n});\n/**\n * Gets the {@link InstanceId} service for the default app or a given app.\n *\n * This API is deprecated. Developers are advised to use the\n * {@link firebase-admin.installations#getInstallations}\n * API to delete their instance IDs and Firebase installation IDs.\n *\n * `getInstanceId()` can be called with no arguments to access the default\n * app's `InstanceId` service or as `getInstanceId(app)` to access the\n * `InstanceId` service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the Instance ID service for the default app\n * const defaultInstanceId = getInstanceId();\n * ```\n *\n * @example\n * ```javascript\n * // Get the Instance ID service for a given app\n * const otherInstanceId = getInstanceId(otherApp);\n *```\n *\n * This API is deprecated. Developers are advised to use the `admin.installations()`\n * API to delete their instance IDs and Firebase installation IDs.\n *\n * @param app - Optional app whose `InstanceId` service to\n *   return. If not provided, the default `InstanceId` service will be\n *   returned.\n *\n * @returns The default `InstanceId` service if\n *   no app is provided or the `InstanceId` service associated with the\n *   provided app.\n *\n * @deprecated Use {@link firebase-admin.installations#getInstallations} instead.\n */\nfunction getInstanceId(app) {\n  if (typeof app === 'undefined') {\n    app = (0, index_1.getApp)();\n  }\n  const firebaseApp = app;\n  return firebaseApp.getOrInitService('instanceId', app => new instance_id_1.InstanceId(app));\n}\nexports.getInstanceId = getInstanceId;\nvar error_1 = require(\"../utils/error\");\nObject.defineProperty(exports, \"FirebaseInstanceIdError\", {\n  enumerable: true,\n  get: function () {\n    return error_1.FirebaseInstanceIdError;\n  }\n});\nObject.defineProperty(exports, \"InstanceIdClientErrorCode\", {\n  enumerable: true,\n  get: function () {\n    return error_1.InstanceIdClientErrorCode;\n  }\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","InstanceIdClientErrorCode","FirebaseInstanceIdError","getInstanceId","InstanceId","index_1","require","instance_id_1","enumerable","get","app","getApp","firebaseApp","getOrInitService","error_1"],"sources":["/home/yadu/Music/Gifty/node_modules/firebase-admin/lib/instance-id/index.js"],"sourcesContent":["/*! firebase-admin v12.7.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InstanceIdClientErrorCode = exports.FirebaseInstanceIdError = exports.getInstanceId = exports.InstanceId = void 0;\n/**\n * Firebase Instance ID service.\n *\n * @packageDocumentation\n */\nconst index_1 = require(\"../app/index\");\nconst instance_id_1 = require(\"./instance-id\");\nObject.defineProperty(exports, \"InstanceId\", { enumerable: true, get: function () { return instance_id_1.InstanceId; } });\n/**\n * Gets the {@link InstanceId} service for the default app or a given app.\n *\n * This API is deprecated. Developers are advised to use the\n * {@link firebase-admin.installations#getInstallations}\n * API to delete their instance IDs and Firebase installation IDs.\n *\n * `getInstanceId()` can be called with no arguments to access the default\n * app's `InstanceId` service or as `getInstanceId(app)` to access the\n * `InstanceId` service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the Instance ID service for the default app\n * const defaultInstanceId = getInstanceId();\n * ```\n *\n * @example\n * ```javascript\n * // Get the Instance ID service for a given app\n * const otherInstanceId = getInstanceId(otherApp);\n *```\n *\n * This API is deprecated. Developers are advised to use the `admin.installations()`\n * API to delete their instance IDs and Firebase installation IDs.\n *\n * @param app - Optional app whose `InstanceId` service to\n *   return. If not provided, the default `InstanceId` service will be\n *   returned.\n *\n * @returns The default `InstanceId` service if\n *   no app is provided or the `InstanceId` service associated with the\n *   provided app.\n *\n * @deprecated Use {@link firebase-admin.installations#getInstallations} instead.\n */\nfunction getInstanceId(app) {\n    if (typeof app === 'undefined') {\n        app = (0, index_1.getApp)();\n    }\n    const firebaseApp = app;\n    return firebaseApp.getOrInitService('instanceId', (app) => new instance_id_1.InstanceId(app));\n}\nexports.getInstanceId = getInstanceId;\nvar error_1 = require(\"../utils/error\");\nObject.defineProperty(exports, \"FirebaseInstanceIdError\", { enumerable: true, get: function () { return error_1.FirebaseInstanceIdError; } });\nObject.defineProperty(exports, \"InstanceIdClientErrorCode\", { enumerable: true, get: function () { return error_1.InstanceIdClientErrorCode; } });\n"],"mappings":"AAAA;AACA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,yBAAyB,GAAGF,OAAO,CAACG,uBAAuB,GAAGH,OAAO,CAACI,aAAa,GAAGJ,OAAO,CAACK,UAAU,GAAG,KAAK,CAAC;AACzH;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,cAAc,CAAC;AACvC,MAAMC,aAAa,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC9CT,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAES,UAAU,EAAE,IAAI;EAAEC,GAAG,EAAE,YAAY;IAAE,OAAOF,aAAa,CAACH,UAAU;EAAE;AAAE,CAAC,CAAC;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,aAAa,CAACO,GAAG,EAAE;EACxB,IAAI,OAAOA,GAAG,KAAK,WAAW,EAAE;IAC5BA,GAAG,GAAG,CAAC,CAAC,EAAEL,OAAO,CAACM,MAAM,GAAG;EAC/B;EACA,MAAMC,WAAW,GAAGF,GAAG;EACvB,OAAOE,WAAW,CAACC,gBAAgB,CAAC,YAAY,EAAGH,GAAG,IAAK,IAAIH,aAAa,CAACH,UAAU,CAACM,GAAG,CAAC,CAAC;AACjG;AACAX,OAAO,CAACI,aAAa,GAAGA,aAAa;AACrC,IAAIW,OAAO,GAAGR,OAAO,CAAC,gBAAgB,CAAC;AACvCT,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,yBAAyB,EAAE;EAAES,UAAU,EAAE,IAAI;EAAEC,GAAG,EAAE,YAAY;IAAE,OAAOK,OAAO,CAACZ,uBAAuB;EAAE;AAAE,CAAC,CAAC;AAC7IL,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,2BAA2B,EAAE;EAAES,UAAU,EAAE,IAAI;EAAEC,GAAG,EAAE,YAAY;IAAE,OAAOK,OAAO,CAACb,yBAAyB;EAAE;AAAE,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}