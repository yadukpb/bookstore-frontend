{"ast":null,"code":"\"use strict\";\n\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Notification = void 0;\nconst index_js_1 = require(\"./nodejs-common/index.js\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\n/**\n * The API-formatted resource description of the notification.\n *\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\n * latest record, call the `getMetadata()` method.\n *\n * @name Notification#metadata\n * @type {object}\n */\n/**\n * A Notification object is created from your {@link Bucket} object using\n * {@link Bucket#notification}. Use it to interact with Cloud Pub/Sub\n * notifications.\n *\n * See {@link https://cloud.google.com/storage/docs/pubsub-notifications| Cloud Pub/Sub Notifications for Google Cloud Storage}\n *\n * @class\n * @hideconstructor\n *\n * @param {Bucket} bucket The bucket instance this notification is attached to.\n * @param {string} id The ID of the notification.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const myBucket = storage.bucket('my-bucket');\n *\n * const notification = myBucket.notification('1');\n * ```\n */\nclass Notification extends index_js_1.ServiceObject {\n  constructor(bucket, id) {\n    const requestQueryObject = {};\n    const methods = {\n      /**\n       * Creates a notification subscription for the bucket.\n       *\n       * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert| Notifications: insert}\n       * @method Notification#create\n       *\n       * @param {Topic|string} topic The Cloud PubSub topic to which this\n       * subscription publishes. If the project ID is omitted, the current\n       * project ID will be used.\n       *\n       * Acceptable formats are:\n       * - `projects/grape-spaceship-123/topics/my-topic`\n       *\n       * - `my-topic`\n       * @param {CreateNotificationRequest} [options] Metadata to set for\n       *     the notification.\n       * @param {CreateNotificationCallback} [callback] Callback function.\n       * @returns {Promise<CreateNotificationResponse>}\n       * @throws {Error} If a valid topic is not provided.\n       *\n       * @example\n       * ```\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const myBucket = storage.bucket('my-bucket');\n       * const notification = myBucket.notification('1');\n       *\n       * notification.create(function(err, notification, apiResponse) {\n       *   if (!err) {\n       *     // The notification was created successfully.\n       *   }\n       * });\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * notification.create().then(function(data) {\n       *   const notification = data[0];\n       *   const apiResponse = data[1];\n       * });\n       * ```\n       */\n      create: true,\n      /**\n       * @typedef {array} DeleteNotificationResponse\n       * @property {object} 0 The full API response.\n       */\n      /**\n       * Permanently deletes a notification subscription.\n       *\n       * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/delete| Notifications: delete API Documentation}\n       *\n       * @param {object} [options] Configuration options.\n       * @param {string} [options.userProject] The ID of the project which will be\n       *     billed for the request.\n       * @param {DeleteNotificationCallback} [callback] Callback function.\n       * @returns {Promise<DeleteNotificationResponse>}\n       *\n       * @example\n       * ```\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const myBucket = storage.bucket('my-bucket');\n       * const notification = myBucket.notification('1');\n       *\n       * notification.delete(function(err, apiResponse) {});\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * notification.delete().then(function(data) {\n       *   const apiResponse = data[0];\n       * });\n       *\n       * ```\n       * @example <caption>include:samples/deleteNotification.js</caption>\n       * region_tag:storage_delete_bucket_notification\n       * Another example:\n       */\n      delete: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n      /**\n       * Get a notification and its metadata if it exists.\n       *\n       * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get| Notifications: get API Documentation}\n       *\n       * @param {object} [options] Configuration options.\n       *     See {@link Bucket#createNotification} for create options.\n       * @param {boolean} [options.autoCreate] Automatically create the object if\n       *     it does not exist. Default: `false`.\n       * @param {string} [options.userProject] The ID of the project which will be\n       *     billed for the request.\n       * @param {GetNotificationCallback} [callback] Callback function.\n       * @return {Promise<GetNotificationCallback>}\n       *\n       * @example\n       * ```\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const myBucket = storage.bucket('my-bucket');\n       * const notification = myBucket.notification('1');\n       *\n       * notification.get(function(err, notification, apiResponse) {\n       *   // `notification.metadata` has been populated.\n       * });\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * notification.get().then(function(data) {\n       *   const notification = data[0];\n       *   const apiResponse = data[1];\n       * });\n       * ```\n       */\n      get: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n      /**\n       * Get the notification's metadata.\n       *\n       * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get| Notifications: get API Documentation}\n       *\n       * @param {object} [options] Configuration options.\n       * @param {string} [options.userProject] The ID of the project which will be\n       *     billed for the request.\n       * @param {GetNotificationMetadataCallback} [callback] Callback function.\n       * @returns {Promise<GetNotificationMetadataResponse>}\n       *\n       * @example\n       * ```\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const myBucket = storage.bucket('my-bucket');\n       * const notification = myBucket.notification('1');\n       *\n       * notification.getMetadata(function(err, metadata, apiResponse) {});\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * notification.getMetadata().then(function(data) {\n       *   const metadata = data[0];\n       *   const apiResponse = data[1];\n       * });\n       *\n       * ```\n       * @example <caption>include:samples/getMetadataNotifications.js</caption>\n       * region_tag:storage_print_pubsub_bucket_notification\n       * Another example:\n       */\n      getMetadata: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n      /**\n       * @typedef {array} NotificationExistsResponse\n       * @property {boolean} 0 Whether the notification exists or not.\n       */\n      /**\n       * @callback NotificationExistsCallback\n       * @param {?Error} err Request error, if any.\n       * @param {boolean} exists Whether the notification exists or not.\n       */\n      /**\n       * Check if the notification exists.\n       *\n       * @method Notification#exists\n       * @param {NotificationExistsCallback} [callback] Callback function.\n       * @returns {Promise<NotificationExistsResponse>}\n       *\n       * @example\n       * ```\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const myBucket = storage.bucket('my-bucket');\n       * const notification = myBucket.notification('1');\n       *\n       * notification.exists(function(err, exists) {});\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * notification.exists().then(function(data) {\n       *   const exists = data[0];\n       * });\n       * ```\n       */\n      exists: true\n    };\n    super({\n      parent: bucket,\n      baseUrl: '/notificationConfigs',\n      id: id.toString(),\n      createMethod: bucket.createNotification.bind(bucket),\n      methods\n    });\n  }\n}\nexports.Notification = Notification;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0, promisify_1.promisifyAll)(Notification);","map":{"version":3,"names":["Object","defineProperty","exports","value","Notification","index_js_1","require","promisify_1","ServiceObject","constructor","bucket","id","requestQueryObject","methods","create","delete","reqOpts","qs","get","getMetadata","exists","parent","baseUrl","toString","createMethod","createNotification","bind","promisifyAll"],"sources":["/home/yadu/Music/Gifty/node_modules/@google-cloud/storage/build/cjs/src/notification.js"],"sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Notification = void 0;\nconst index_js_1 = require(\"./nodejs-common/index.js\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\n/**\n * The API-formatted resource description of the notification.\n *\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\n * latest record, call the `getMetadata()` method.\n *\n * @name Notification#metadata\n * @type {object}\n */\n/**\n * A Notification object is created from your {@link Bucket} object using\n * {@link Bucket#notification}. Use it to interact with Cloud Pub/Sub\n * notifications.\n *\n * See {@link https://cloud.google.com/storage/docs/pubsub-notifications| Cloud Pub/Sub Notifications for Google Cloud Storage}\n *\n * @class\n * @hideconstructor\n *\n * @param {Bucket} bucket The bucket instance this notification is attached to.\n * @param {string} id The ID of the notification.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const myBucket = storage.bucket('my-bucket');\n *\n * const notification = myBucket.notification('1');\n * ```\n */\nclass Notification extends index_js_1.ServiceObject {\n    constructor(bucket, id) {\n        const requestQueryObject = {};\n        const methods = {\n            /**\n             * Creates a notification subscription for the bucket.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert| Notifications: insert}\n             * @method Notification#create\n             *\n             * @param {Topic|string} topic The Cloud PubSub topic to which this\n             * subscription publishes. If the project ID is omitted, the current\n             * project ID will be used.\n             *\n             * Acceptable formats are:\n             * - `projects/grape-spaceship-123/topics/my-topic`\n             *\n             * - `my-topic`\n             * @param {CreateNotificationRequest} [options] Metadata to set for\n             *     the notification.\n             * @param {CreateNotificationCallback} [callback] Callback function.\n             * @returns {Promise<CreateNotificationResponse>}\n             * @throws {Error} If a valid topic is not provided.\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             * const notification = myBucket.notification('1');\n             *\n             * notification.create(function(err, notification, apiResponse) {\n             *   if (!err) {\n             *     // The notification was created successfully.\n             *   }\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * notification.create().then(function(data) {\n             *   const notification = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            create: true,\n            /**\n             * @typedef {array} DeleteNotificationResponse\n             * @property {object} 0 The full API response.\n             */\n            /**\n             * Permanently deletes a notification subscription.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/delete| Notifications: delete API Documentation}\n             *\n             * @param {object} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {DeleteNotificationCallback} [callback] Callback function.\n             * @returns {Promise<DeleteNotificationResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             * const notification = myBucket.notification('1');\n             *\n             * notification.delete(function(err, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * notification.delete().then(function(data) {\n             *   const apiResponse = data[0];\n             * });\n             *\n             * ```\n             * @example <caption>include:samples/deleteNotification.js</caption>\n             * region_tag:storage_delete_bucket_notification\n             * Another example:\n             */\n            delete: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * Get a notification and its metadata if it exists.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get| Notifications: get API Documentation}\n             *\n             * @param {object} [options] Configuration options.\n             *     See {@link Bucket#createNotification} for create options.\n             * @param {boolean} [options.autoCreate] Automatically create the object if\n             *     it does not exist. Default: `false`.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {GetNotificationCallback} [callback] Callback function.\n             * @return {Promise<GetNotificationCallback>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             * const notification = myBucket.notification('1');\n             *\n             * notification.get(function(err, notification, apiResponse) {\n             *   // `notification.metadata` has been populated.\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * notification.get().then(function(data) {\n             *   const notification = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            get: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * Get the notification's metadata.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get| Notifications: get API Documentation}\n             *\n             * @param {object} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {GetNotificationMetadataCallback} [callback] Callback function.\n             * @returns {Promise<GetNotificationMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             * const notification = myBucket.notification('1');\n             *\n             * notification.getMetadata(function(err, metadata, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * notification.getMetadata().then(function(data) {\n             *   const metadata = data[0];\n             *   const apiResponse = data[1];\n             * });\n             *\n             * ```\n             * @example <caption>include:samples/getMetadataNotifications.js</caption>\n             * region_tag:storage_print_pubsub_bucket_notification\n             * Another example:\n             */\n            getMetadata: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {array} NotificationExistsResponse\n             * @property {boolean} 0 Whether the notification exists or not.\n             */\n            /**\n             * @callback NotificationExistsCallback\n             * @param {?Error} err Request error, if any.\n             * @param {boolean} exists Whether the notification exists or not.\n             */\n            /**\n             * Check if the notification exists.\n             *\n             * @method Notification#exists\n             * @param {NotificationExistsCallback} [callback] Callback function.\n             * @returns {Promise<NotificationExistsResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             * const notification = myBucket.notification('1');\n             *\n             * notification.exists(function(err, exists) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * notification.exists().then(function(data) {\n             *   const exists = data[0];\n             * });\n             * ```\n             */\n            exists: true,\n        };\n        super({\n            parent: bucket,\n            baseUrl: '/notificationConfigs',\n            id: id.toString(),\n            createMethod: bucket.createNotification.bind(bucket),\n            methods,\n        });\n    }\n}\nexports.Notification = Notification;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0, promisify_1.promisifyAll)(Notification);\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,YAAY,GAAG,KAAK,CAAC;AAC7B,MAAMC,UAAU,GAAGC,OAAO,CAAC,0BAA0B,CAAC;AACtD,MAAMC,WAAW,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,YAAY,SAASC,UAAU,CAACG,aAAa,CAAC;EAChDC,WAAW,CAACC,MAAM,EAAEC,EAAE,EAAE;IACpB,MAAMC,kBAAkB,GAAG,CAAC,CAAC;IAC7B,MAAMC,OAAO,GAAG;MACZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,MAAM,EAAE,IAAI;MACZ;AACZ;AACA;AACA;MACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,MAAM,EAAE;QACJC,OAAO,EAAE;UACLC,EAAE,EAAEL;QACR;MACJ,CAAC;MACD;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYM,GAAG,EAAE;QACDF,OAAO,EAAE;UACLC,EAAE,EAAEL;QACR;MACJ,CAAC;MACD;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYO,WAAW,EAAE;QACTH,OAAO,EAAE;UACLC,EAAE,EAAEL;QACR;MACJ,CAAC;MACD;AACZ;AACA;AACA;MACY;AACZ;AACA;AACA;AACA;MACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYQ,MAAM,EAAE;IACZ,CAAC;IACD,KAAK,CAAC;MACFC,MAAM,EAAEX,MAAM;MACdY,OAAO,EAAE,sBAAsB;MAC/BX,EAAE,EAAEA,EAAE,CAACY,QAAQ,EAAE;MACjBC,YAAY,EAAEd,MAAM,CAACe,kBAAkB,CAACC,IAAI,CAAChB,MAAM,CAAC;MACpDG;IACJ,CAAC,CAAC;EACN;AACJ;AACAX,OAAO,CAACE,YAAY,GAAGA,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,EAAEG,WAAW,CAACoB,YAAY,EAAEvB,YAAY,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}