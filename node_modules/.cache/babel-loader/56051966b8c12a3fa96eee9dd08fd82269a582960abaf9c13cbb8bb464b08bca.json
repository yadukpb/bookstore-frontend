{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionPoolClearedEvent = exports.ConnectionCheckedInEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolReadyEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolMonitoringEvent = void 0;\nconst constants_1 = require(\"../constants\");\nconst utils_1 = require(\"../utils\");\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */\nclass ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    this.time = new Date();\n    this.address = pool.address;\n  }\n}\nexports.ConnectionPoolMonitoringEvent = ConnectionPoolMonitoringEvent;\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_POOL_CREATED;\n    const {\n      maxConnecting,\n      maxPoolSize,\n      minPoolSize,\n      maxIdleTimeMS,\n      waitQueueTimeoutMS\n    } = pool.options;\n    this.options = {\n      maxConnecting,\n      maxPoolSize,\n      minPoolSize,\n      maxIdleTimeMS,\n      waitQueueTimeoutMS\n    };\n  }\n}\nexports.ConnectionPoolCreatedEvent = ConnectionPoolCreatedEvent;\n/**\n * An event published when a connection pool is ready\n * @public\n * @category Event\n */\nclass ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_POOL_READY;\n  }\n}\nexports.ConnectionPoolReadyEvent = ConnectionPoolReadyEvent;\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_POOL_CLOSED;\n  }\n}\nexports.ConnectionPoolClosedEvent = ConnectionPoolClosedEvent;\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_CREATED;\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionCreatedEvent = ConnectionCreatedEvent;\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection, connectionCreatedEventTime) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_READY;\n    this.durationMS = (0, utils_1.now)() - connectionCreatedEventTime;\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionReadyEvent = ConnectionReadyEvent;\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection, reason, error) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_CLOSED;\n    this.connectionId = connection.id;\n    this.reason = reason;\n    this.serviceId = connection.serviceId;\n    this.error = error ?? null;\n  }\n}\nexports.ConnectionClosedEvent = ConnectionClosedEvent;\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_CHECK_OUT_STARTED;\n  }\n}\nexports.ConnectionCheckOutStartedEvent = ConnectionCheckOutStartedEvent;\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, reason, checkoutTime, error) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_CHECK_OUT_FAILED;\n    this.durationMS = (0, utils_1.now)() - checkoutTime;\n    this.reason = reason;\n    this.error = error;\n  }\n}\nexports.ConnectionCheckOutFailedEvent = ConnectionCheckOutFailedEvent;\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection, checkoutTime) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_CHECKED_OUT;\n    this.durationMS = (0, utils_1.now)() - checkoutTime;\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionCheckedOutEvent = ConnectionCheckedOutEvent;\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_CHECKED_IN;\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionCheckedInEvent = ConnectionCheckedInEvent;\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_POOL_CLEARED;\n    this.serviceId = options.serviceId;\n    this.interruptInUseConnections = options.interruptInUseConnections;\n  }\n}\nexports.ConnectionPoolClearedEvent = ConnectionPoolClearedEvent;","map":{"version":3,"mappings":"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","names":["ConnectionPoolMonitoringEvent","constructor","pool","time","Date","address","exports","ConnectionPoolCreatedEvent","constants_1","maxConnecting","maxPoolSize","minPoolSize","maxIdleTimeMS","waitQueueTimeoutMS","options","ConnectionPoolReadyEvent","ConnectionPoolClosedEvent","ConnectionCreatedEvent","connection","connectionId","id","ConnectionReadyEvent","connectionCreatedEventTime","durationMS","ConnectionClosedEvent","reason","error","serviceId","ConnectionCheckOutStartedEvent","ConnectionCheckOutFailedEvent","checkoutTime","ConnectionCheckedOutEvent","ConnectionCheckedInEvent","ConnectionPoolClearedEvent","interruptInUseConnections"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/cmap/connection_pool_events.ts"],"sourcesContent":["import type { ObjectId } from '../bson';\nimport {\n  CONNECTION_CHECK_OUT_FAILED,\n  CONNECTION_CHECK_OUT_STARTED,\n  CONNECTION_CHECKED_IN,\n  CONNECTION_CHECKED_OUT,\n  CONNECTION_CLOSED,\n  CONNECTION_CREATED,\n  CONNECTION_POOL_CLEARED,\n  CONNECTION_POOL_CLOSED,\n  CONNECTION_POOL_CREATED,\n  CONNECTION_POOL_READY,\n  CONNECTION_READY\n} from '../constants';\nimport type { MongoError } from '../error';\nimport { now } from '../utils';\nimport type { Connection } from './connection';\nimport type { ConnectionPool, ConnectionPoolOptions } from './connection_pool';\n\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */\nexport abstract class ConnectionPoolMonitoringEvent {\n  /** A timestamp when the event was created  */\n  time: Date;\n  /** The address (host/port pair) of the pool */\n  address: string;\n  /** @internal */\n  abstract name:\n    | typeof CONNECTION_CHECK_OUT_FAILED\n    | typeof CONNECTION_CHECK_OUT_STARTED\n    | typeof CONNECTION_CHECKED_IN\n    | typeof CONNECTION_CHECKED_OUT\n    | typeof CONNECTION_CLOSED\n    | typeof CONNECTION_CREATED\n    | typeof CONNECTION_POOL_CLEARED\n    | typeof CONNECTION_POOL_CLOSED\n    | typeof CONNECTION_POOL_CREATED\n    | typeof CONNECTION_POOL_READY\n    | typeof CONNECTION_READY;\n\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    this.time = new Date();\n    this.address = pool.address;\n  }\n}\n\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */\nexport class ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** The options used to create this connection pool */\n  options: Pick<\n    ConnectionPoolOptions,\n    'maxPoolSize' | 'minPoolSize' | 'maxConnecting' | 'maxIdleTimeMS' | 'waitQueueTimeoutMS'\n  >;\n  /** @internal */\n  name = CONNECTION_POOL_CREATED;\n\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    super(pool);\n    const { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS } =\n      pool.options;\n    this.options = { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS };\n  }\n}\n\n/**\n * An event published when a connection pool is ready\n * @public\n * @category Event\n */\nexport class ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  name = CONNECTION_POOL_READY;\n\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */\nexport class ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  name = CONNECTION_POOL_CLOSED;\n\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */\nexport class ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** A monotonically increasing, per-pool id for the newly created connection */\n  connectionId: number | '<monitor>';\n  /** @internal */\n  name = CONNECTION_CREATED;\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: { id: number | '<monitor>' }) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */\nexport class ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n  /**\n   * The time it took to establish the connection.\n   * In accordance with the definition of establishment of a connection\n   * specified by `ConnectionPoolOptions.maxConnecting`,\n   * it is the time elapsed between emitting a `ConnectionCreatedEvent`\n   * and emitting this event as part of the same checking out.\n   *\n   * Naturally, when establishing a connection is part of checking out,\n   * this duration is not greater than\n   * `ConnectionCheckedOutEvent.duration`.\n   */\n  durationMS: number;\n  /** @internal */\n  name = CONNECTION_READY;\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: Connection, connectionCreatedEventTime: number) {\n    super(pool);\n    this.durationMS = now() - connectionCreatedEventTime;\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */\nexport class ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n  /** The reason the connection was closed */\n  reason: string;\n  serviceId?: ObjectId;\n  /** @internal */\n  name = CONNECTION_CLOSED;\n  /** @internal */\n  error: MongoError | null;\n\n  /** @internal */\n  constructor(\n    pool: ConnectionPool,\n    connection: Pick<Connection, 'id' | 'serviceId'>,\n    reason: 'idle' | 'stale' | 'poolClosed' | 'error',\n    error?: MongoError\n  ) {\n    super(pool);\n    this.connectionId = connection.id;\n    this.reason = reason;\n    this.serviceId = connection.serviceId;\n    this.error = error ?? null;\n  }\n}\n\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */\nexport class ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  name = CONNECTION_CHECK_OUT_STARTED;\n\n  /** @internal */\n  constructor(pool: ConnectionPool) {\n    super(pool);\n  }\n}\n\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */\nexport class ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n  /** The reason the attempt to check out failed */\n  reason: string;\n  /** @internal */\n  error?: MongoError;\n  /** @internal */\n  name = CONNECTION_CHECK_OUT_FAILED;\n  /**\n   * The time it took to check out the connection.\n   * More specifically, the time elapsed between\n   * emitting a `ConnectionCheckOutStartedEvent`\n   * and emitting this event as part of the same check out.\n   */\n  durationMS: number;\n\n  /** @internal */\n  constructor(\n    pool: ConnectionPool,\n    reason: 'poolClosed' | 'timeout' | 'connectionError',\n    checkoutTime: number,\n    error?: MongoError\n  ) {\n    super(pool);\n    this.durationMS = now() - checkoutTime;\n    this.reason = reason;\n    this.error = error;\n  }\n}\n\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */\nexport class ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n  /** @internal */\n  name = CONNECTION_CHECKED_OUT;\n  /**\n   * The time it took to check out the connection.\n   * More specifically, the time elapsed between\n   * emitting a `ConnectionCheckOutStartedEvent`\n   * and emitting this event as part of the same checking out.\n   *\n   */\n  durationMS: number;\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: Connection, checkoutTime: number) {\n    super(pool);\n    this.durationMS = now() - checkoutTime;\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */\nexport class ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n  /** The id of the connection */\n  connectionId: number | '<monitor>';\n  /** @internal */\n  name = CONNECTION_CHECKED_IN;\n\n  /** @internal */\n  constructor(pool: ConnectionPool, connection: Connection) {\n    super(pool);\n    this.connectionId = connection.id;\n  }\n}\n\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */\nexport class ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  serviceId?: ObjectId;\n\n  interruptInUseConnections?: boolean;\n  /** @internal */\n  name = CONNECTION_POOL_CLEARED;\n\n  /** @internal */\n  constructor(\n    pool: ConnectionPool,\n    options: { serviceId?: ObjectId; interruptInUseConnections?: boolean } = {}\n  ) {\n    super(pool);\n    this.serviceId = options.serviceId;\n    this.interruptInUseConnections = options.interruptInUseConnections;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}