{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggregationCursor = void 0;\nconst aggregate_1 = require(\"../operations/aggregate\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst utils_1 = require(\"../utils\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */\nclass AggregationCursor extends abstract_cursor_1.AbstractCursor {\n  /** @internal */\n  constructor(client, namespace) {\n    let pipeline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(client, namespace, options);\n    this.pipeline = pipeline;\n    this.aggregateOptions = options;\n  }\n  clone() {\n    const clonedOptions = (0, utils_1.mergeOptions)({}, this.aggregateOptions);\n    delete clonedOptions.session;\n    return new AggregationCursor(this.client, this.namespace, this.pipeline, {\n      ...clonedOptions\n    });\n  }\n  map(transform) {\n    return super.map(transform);\n  }\n  /** @internal */\n  async _initialize(session) {\n    const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, {\n      ...this.aggregateOptions,\n      ...this.cursorOptions,\n      session\n    });\n    const response = await (0, execute_operation_1.executeOperation)(this.client, aggregateOperation);\n    return {\n      server: aggregateOperation.server,\n      session,\n      response\n    };\n  }\n  /** Execute the explain for the cursor */\n  async explain(verbosity) {\n    return (await (0, execute_operation_1.executeOperation)(this.client, new aggregate_1.AggregateOperation(this.namespace, this.pipeline, {\n      ...this.aggregateOptions,\n      // NOTE: order matters here, we may need to refine this\n      ...this.cursorOptions,\n      explain: verbosity ?? true\n    }))).shift(this.deserializationOptions);\n  }\n  addStage(stage) {\n    this.throwIfInitialized();\n    this.pipeline.push(stage);\n    return this;\n  }\n  group($group) {\n    return this.addStage({\n      $group\n    });\n  }\n  /** Add a limit stage to the aggregation pipeline */\n  limit($limit) {\n    return this.addStage({\n      $limit\n    });\n  }\n  /** Add a match stage to the aggregation pipeline */\n  match($match) {\n    return this.addStage({\n      $match\n    });\n  }\n  /** Add an out stage to the aggregation pipeline */\n  out($out) {\n    return this.addStage({\n      $out\n    });\n  }\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.aggregate().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n  project($project) {\n    return this.addStage({\n      $project\n    });\n  }\n  /** Add a lookup stage to the aggregation pipeline */\n  lookup($lookup) {\n    return this.addStage({\n      $lookup\n    });\n  }\n  /** Add a redact stage to the aggregation pipeline */\n  redact($redact) {\n    return this.addStage({\n      $redact\n    });\n  }\n  /** Add a skip stage to the aggregation pipeline */\n  skip($skip) {\n    return this.addStage({\n      $skip\n    });\n  }\n  /** Add a sort stage to the aggregation pipeline */\n  sort($sort) {\n    return this.addStage({\n      $sort\n    });\n  }\n  /** Add a unwind stage to the aggregation pipeline */\n  unwind($unwind) {\n    return this.addStage({\n      $unwind\n    });\n  }\n  /** Add a geoNear stage to the aggregation pipeline */\n  geoNear($geoNear) {\n    return this.addStage({\n      $geoNear\n    });\n  }\n}\nexports.AggregationCursor = AggregationCursor;","map":{"version":3,"mappings":"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","names":["AggregationCursor","abstract_cursor_1","constructor","client","namespace","pipeline","options","aggregateOptions","clone","clonedOptions","session","map","transform","_initialize","aggregateOperation","aggregate_1","cursorOptions","response","server","explain","verbosity","shift","deserializationOptions","addStage","stage","throwIfInitialized","push","group","$group","limit","$limit","match","$match","out","$out","project","$project","lookup","$lookup","redact","$redact","skip","$skip","sort","$sort","unwind","$unwind","geoNear","$geoNear","exports"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/cursor/aggregation_cursor.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { ExplainCommandOptions, ExplainVerbosityLike } from '../explain';\nimport type { MongoClient } from '../mongo_client';\nimport { AggregateOperation, type AggregateOptions } from '../operations/aggregate';\nimport { executeOperation } from '../operations/execute_operation';\nimport type { ClientSession } from '../sessions';\nimport type { Sort } from '../sort';\nimport { mergeOptions, type MongoDBNamespace } from '../utils';\nimport {\n  AbstractCursor,\n  type AbstractCursorOptions,\n  type InitialCursorResponse\n} from './abstract_cursor';\n\n/** @public */\nexport interface AggregationCursorOptions extends AbstractCursorOptions, AggregateOptions {}\n\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */\nexport class AggregationCursor<TSchema = any> extends AbstractCursor<TSchema> {\n  public readonly pipeline: Document[];\n  /** @internal */\n  private aggregateOptions: AggregateOptions;\n\n  /** @internal */\n  constructor(\n    client: MongoClient,\n    namespace: MongoDBNamespace,\n    pipeline: Document[] = [],\n    options: AggregateOptions = {}\n  ) {\n    super(client, namespace, options);\n\n    this.pipeline = pipeline;\n    this.aggregateOptions = options;\n  }\n\n  clone(): AggregationCursor<TSchema> {\n    const clonedOptions = mergeOptions({}, this.aggregateOptions);\n    delete clonedOptions.session;\n    return new AggregationCursor(this.client, this.namespace, this.pipeline, {\n      ...clonedOptions\n    });\n  }\n\n  override map<T>(transform: (doc: TSchema) => T): AggregationCursor<T> {\n    return super.map(transform) as AggregationCursor<T>;\n  }\n\n  /** @internal */\n  async _initialize(session: ClientSession): Promise<InitialCursorResponse> {\n    const aggregateOperation = new AggregateOperation(this.namespace, this.pipeline, {\n      ...this.aggregateOptions,\n      ...this.cursorOptions,\n      session\n    });\n\n    const response = await executeOperation(this.client, aggregateOperation);\n\n    return { server: aggregateOperation.server, session, response };\n  }\n\n  /** Execute the explain for the cursor */\n  async explain(verbosity?: ExplainVerbosityLike | ExplainCommandOptions): Promise<Document> {\n    return (\n      await executeOperation(\n        this.client,\n        new AggregateOperation(this.namespace, this.pipeline, {\n          ...this.aggregateOptions, // NOTE: order matters here, we may need to refine this\n          ...this.cursorOptions,\n          explain: verbosity ?? true\n        })\n      )\n    ).shift(this.deserializationOptions);\n  }\n\n  /** Add a stage to the aggregation pipeline\n   * @example\n   * ```\n   * const documents = await users.aggregate().addStage({ $match: { name: /Mike/ } }).toArray();\n   * ```\n   * @example\n   * ```\n   * const documents = await users.aggregate()\n   *   .addStage<{ name: string }>({ $project: { name: true } })\n   *   .toArray(); // type of documents is { name: string }[]\n   * ```\n   */\n  addStage(stage: Document): this;\n  addStage<T = Document>(stage: Document): AggregationCursor<T>;\n  addStage<T = Document>(stage: Document): AggregationCursor<T> {\n    this.throwIfInitialized();\n    this.pipeline.push(stage);\n    return this as unknown as AggregationCursor<T>;\n  }\n\n  /** Add a group stage to the aggregation pipeline */\n  group<T = TSchema>($group: Document): AggregationCursor<T>;\n  group($group: Document): this {\n    return this.addStage({ $group });\n  }\n\n  /** Add a limit stage to the aggregation pipeline */\n  limit($limit: number): this {\n    return this.addStage({ $limit });\n  }\n\n  /** Add a match stage to the aggregation pipeline */\n  match($match: Document): this {\n    return this.addStage({ $match });\n  }\n\n  /** Add an out stage to the aggregation pipeline */\n  out($out: { db: string; coll: string } | string): this {\n    return this.addStage({ $out });\n  }\n\n  /**\n   * Add a project stage to the aggregation pipeline\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n   * You should specify a parameterized type to have assertions on your final results.\n   *\n   * @example\n   * ```typescript\n   * // Best way\n   * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * // Flexible way\n   * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n   * ```\n   *\n   * @remarks\n   * In order to strictly type this function you must provide an interface\n   * that represents the effect of your projection on the result documents.\n   *\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling project,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n   * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n   * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n   *\n   * // or always use chaining and save the final cursor\n   *\n   * const cursor = coll.aggregate().project<{ a: string }>({\n   *   _id: 0,\n   *   a: { $convert: { input: '$a', to: 'string' }\n   * }});\n   * ```\n   */\n  project<T extends Document = Document>($project: Document): AggregationCursor<T> {\n    return this.addStage<T>({ $project });\n  }\n\n  /** Add a lookup stage to the aggregation pipeline */\n  lookup($lookup: Document): this {\n    return this.addStage({ $lookup });\n  }\n\n  /** Add a redact stage to the aggregation pipeline */\n  redact($redact: Document): this {\n    return this.addStage({ $redact });\n  }\n\n  /** Add a skip stage to the aggregation pipeline */\n  skip($skip: number): this {\n    return this.addStage({ $skip });\n  }\n\n  /** Add a sort stage to the aggregation pipeline */\n  sort($sort: Sort): this {\n    return this.addStage({ $sort });\n  }\n\n  /** Add a unwind stage to the aggregation pipeline */\n  unwind($unwind: Document | string): this {\n    return this.addStage({ $unwind });\n  }\n\n  /** Add a geoNear stage to the aggregation pipeline */\n  geoNear($geoNear: Document): this {\n    return this.addStage({ $geoNear });\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}