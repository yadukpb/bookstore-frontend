{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { VERSION } from '../version';\nvar re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nexport function _makeCompatibilityCheck(ownVersion) {\n  var acceptedVersions = new Set([ownVersion]);\n  var rejectedVersions = new Set();\n  var myVersionMatch = ownVersion.match(re);\n  if (!myVersionMatch) {\n    // we cannot guarantee compatibility so we always return noop\n    return function () {\n      return false;\n    };\n  }\n  var ownVersionParsed = {\n    major: +myVersionMatch[1],\n    minor: +myVersionMatch[2],\n    patch: +myVersionMatch[3],\n    prerelease: myVersionMatch[4]\n  };\n  // if ownVersion has a prerelease tag, versions must match exactly\n  if (ownVersionParsed.prerelease != null) {\n    return function isExactmatch(globalVersion) {\n      return globalVersion === ownVersion;\n    };\n  }\n  function _reject(v) {\n    rejectedVersions.add(v);\n    return false;\n  }\n  function _accept(v) {\n    acceptedVersions.add(v);\n    return true;\n  }\n  return function isCompatible(globalVersion) {\n    if (acceptedVersions.has(globalVersion)) {\n      return true;\n    }\n    if (rejectedVersions.has(globalVersion)) {\n      return false;\n    }\n    var globalVersionMatch = globalVersion.match(re);\n    if (!globalVersionMatch) {\n      // cannot parse other version\n      // we cannot guarantee compatibility so we always noop\n      return _reject(globalVersion);\n    }\n    var globalVersionParsed = {\n      major: +globalVersionMatch[1],\n      minor: +globalVersionMatch[2],\n      patch: +globalVersionMatch[3],\n      prerelease: globalVersionMatch[4]\n    };\n    // if globalVersion has a prerelease tag, versions must match exactly\n    if (globalVersionParsed.prerelease != null) {\n      return _reject(globalVersion);\n    }\n    // major versions must match\n    if (ownVersionParsed.major !== globalVersionParsed.major) {\n      return _reject(globalVersion);\n    }\n    if (ownVersionParsed.major === 0) {\n      if (ownVersionParsed.minor === globalVersionParsed.minor && ownVersionParsed.patch <= globalVersionParsed.patch) {\n        return _accept(globalVersion);\n      }\n      return _reject(globalVersion);\n    }\n    if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n      return _accept(globalVersion);\n    }\n    return _reject(globalVersion);\n  };\n}\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexport var isCompatible = _makeCompatibilityCheck(VERSION);","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,OAAO,QAAQ,YAAY;AAEpC,IAAMC,EAAE,GAAG,+BAA+B;AAE1C;;;;;;;;;;;;;;;;AAgBA,OAAM,SAAUC,uBAAuB,CACrCC,UAAkB;EAElB,IAAMC,gBAAgB,GAAG,IAAIC,GAAG,CAAS,CAACF,UAAU,CAAC,CAAC;EACtD,IAAMG,gBAAgB,GAAG,IAAID,GAAG,EAAU;EAE1C,IAAME,cAAc,GAAGJ,UAAU,CAACK,KAAK,CAACP,EAAE,CAAC;EAC3C,IAAI,CAACM,cAAc,EAAE;IACnB;IACA,OAAO;MAAM,YAAK;IAAL,CAAK;;EAGpB,IAAME,gBAAgB,GAAG;IACvBC,KAAK,EAAE,CAACH,cAAc,CAAC,CAAC,CAAC;IACzBI,KAAK,EAAE,CAACJ,cAAc,CAAC,CAAC,CAAC;IACzBK,KAAK,EAAE,CAACL,cAAc,CAAC,CAAC,CAAC;IACzBM,UAAU,EAAEN,cAAc,CAAC,CAAC;GAC7B;EAED;EACA,IAAIE,gBAAgB,CAACI,UAAU,IAAI,IAAI,EAAE;IACvC,OAAO,SAASC,YAAY,CAACC,aAAqB;MAChD,OAAOA,aAAa,KAAKZ,UAAU;IACrC,CAAC;;EAGH,SAASa,OAAO,CAACC,CAAS;IACxBX,gBAAgB,CAACY,GAAG,CAACD,CAAC,CAAC;IACvB,OAAO,KAAK;EACd;EAEA,SAASE,OAAO,CAACF,CAAS;IACxBb,gBAAgB,CAACc,GAAG,CAACD,CAAC,CAAC;IACvB,OAAO,IAAI;EACb;EAEA,OAAO,SAASG,YAAY,CAACL,aAAqB;IAChD,IAAIX,gBAAgB,CAACiB,GAAG,CAACN,aAAa,CAAC,EAAE;MACvC,OAAO,IAAI;;IAGb,IAAIT,gBAAgB,CAACe,GAAG,CAACN,aAAa,CAAC,EAAE;MACvC,OAAO,KAAK;;IAGd,IAAMO,kBAAkB,GAAGP,aAAa,CAACP,KAAK,CAACP,EAAE,CAAC;IAClD,IAAI,CAACqB,kBAAkB,EAAE;MACvB;MACA;MACA,OAAON,OAAO,CAACD,aAAa,CAAC;;IAG/B,IAAMQ,mBAAmB,GAAG;MAC1Bb,KAAK,EAAE,CAACY,kBAAkB,CAAC,CAAC,CAAC;MAC7BX,KAAK,EAAE,CAACW,kBAAkB,CAAC,CAAC,CAAC;MAC7BV,KAAK,EAAE,CAACU,kBAAkB,CAAC,CAAC,CAAC;MAC7BT,UAAU,EAAES,kBAAkB,CAAC,CAAC;KACjC;IAED;IACA,IAAIC,mBAAmB,CAACV,UAAU,IAAI,IAAI,EAAE;MAC1C,OAAOG,OAAO,CAACD,aAAa,CAAC;;IAG/B;IACA,IAAIN,gBAAgB,CAACC,KAAK,KAAKa,mBAAmB,CAACb,KAAK,EAAE;MACxD,OAAOM,OAAO,CAACD,aAAa,CAAC;;IAG/B,IAAIN,gBAAgB,CAACC,KAAK,KAAK,CAAC,EAAE;MAChC,IACED,gBAAgB,CAACE,KAAK,KAAKY,mBAAmB,CAACZ,KAAK,IACpDF,gBAAgB,CAACG,KAAK,IAAIW,mBAAmB,CAACX,KAAK,EACnD;QACA,OAAOO,OAAO,CAACJ,aAAa,CAAC;;MAG/B,OAAOC,OAAO,CAACD,aAAa,CAAC;;IAG/B,IAAIN,gBAAgB,CAACE,KAAK,IAAIY,mBAAmB,CAACZ,KAAK,EAAE;MACvD,OAAOQ,OAAO,CAACJ,aAAa,CAAC;;IAG/B,OAAOC,OAAO,CAACD,aAAa,CAAC;EAC/B,CAAC;AACH;AAEA;;;;;;;;;;;;;;;AAeA,OAAO,IAAMK,YAAY,GAAGlB,uBAAuB,CAACF,OAAO,CAAC","names":["VERSION","re","_makeCompatibilityCheck","ownVersion","acceptedVersions","Set","rejectedVersions","myVersionMatch","match","ownVersionParsed","major","minor","patch","prerelease","isExactmatch","globalVersion","_reject","v","add","_accept","isCompatible","has","globalVersionMatch","globalVersionParsed"],"sources":["/home/yadu/Music/Gifty/node_modules/@opentelemetry/api/src/internal/semver.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../version';\n\nconst re = /^(\\d+)\\.(\\d+)\\.(\\d+)(-(.+))?$/;\n\n/**\n * Create a function to test an API version to see if it is compatible with the provided ownVersion.\n *\n * The returned function has the following semantics:\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param ownVersion version which should be checked against\n */\nexport function _makeCompatibilityCheck(\n  ownVersion: string\n): (globalVersion: string) => boolean {\n  const acceptedVersions = new Set<string>([ownVersion]);\n  const rejectedVersions = new Set<string>();\n\n  const myVersionMatch = ownVersion.match(re);\n  if (!myVersionMatch) {\n    // we cannot guarantee compatibility so we always return noop\n    return () => false;\n  }\n\n  const ownVersionParsed = {\n    major: +myVersionMatch[1],\n    minor: +myVersionMatch[2],\n    patch: +myVersionMatch[3],\n    prerelease: myVersionMatch[4],\n  };\n\n  // if ownVersion has a prerelease tag, versions must match exactly\n  if (ownVersionParsed.prerelease != null) {\n    return function isExactmatch(globalVersion: string): boolean {\n      return globalVersion === ownVersion;\n    };\n  }\n\n  function _reject(v: string) {\n    rejectedVersions.add(v);\n    return false;\n  }\n\n  function _accept(v: string) {\n    acceptedVersions.add(v);\n    return true;\n  }\n\n  return function isCompatible(globalVersion: string): boolean {\n    if (acceptedVersions.has(globalVersion)) {\n      return true;\n    }\n\n    if (rejectedVersions.has(globalVersion)) {\n      return false;\n    }\n\n    const globalVersionMatch = globalVersion.match(re);\n    if (!globalVersionMatch) {\n      // cannot parse other version\n      // we cannot guarantee compatibility so we always noop\n      return _reject(globalVersion);\n    }\n\n    const globalVersionParsed = {\n      major: +globalVersionMatch[1],\n      minor: +globalVersionMatch[2],\n      patch: +globalVersionMatch[3],\n      prerelease: globalVersionMatch[4],\n    };\n\n    // if globalVersion has a prerelease tag, versions must match exactly\n    if (globalVersionParsed.prerelease != null) {\n      return _reject(globalVersion);\n    }\n\n    // major versions must match\n    if (ownVersionParsed.major !== globalVersionParsed.major) {\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.major === 0) {\n      if (\n        ownVersionParsed.minor === globalVersionParsed.minor &&\n        ownVersionParsed.patch <= globalVersionParsed.patch\n      ) {\n        return _accept(globalVersion);\n      }\n\n      return _reject(globalVersion);\n    }\n\n    if (ownVersionParsed.minor <= globalVersionParsed.minor) {\n      return _accept(globalVersion);\n    }\n\n    return _reject(globalVersion);\n  };\n}\n\n/**\n * Test an API version to see if it is compatible with this API.\n *\n * - Exact match is always compatible\n * - Major versions must match exactly\n *    - 1.x package cannot use global 2.x package\n *    - 2.x package cannot use global 1.x package\n * - The minor version of the API module requesting access to the global API must be less than or equal to the minor version of this API\n *    - 1.3 package may use 1.4 global because the later global contains all functions 1.3 expects\n *    - 1.4 package may NOT use 1.3 global because it may try to call functions which don't exist on 1.3\n * - If the major version is 0, the minor version is treated as the major and the patch is treated as the minor\n * - Patch and build tag differences are not considered at this time\n *\n * @param version version of the API requesting an instance of the global API\n */\nexport const isCompatible = _makeCompatibilityCheck(VERSION);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}