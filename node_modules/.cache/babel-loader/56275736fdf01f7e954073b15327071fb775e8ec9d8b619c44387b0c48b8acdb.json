{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionPool = exports.PoolState = void 0;\nconst timers_1 = require(\"timers\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst timeout_1 = require(\"../timeout\");\nconst utils_1 = require(\"../utils\");\nconst connect_1 = require(\"./connect\");\nconst connection_1 = require(\"./connection\");\nconst connection_pool_events_1 = require(\"./connection_pool_events\");\nconst errors_1 = require(\"./errors\");\nconst metrics_1 = require(\"./metrics\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPending = Symbol('pending');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/** @internal */\nconst kPoolState = Symbol('poolState');\n/** @internal */\nexports.PoolState = Object.freeze({\n  paused: 'paused',\n  ready: 'ready',\n  closed: 'closed'\n});\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nclass ConnectionPool extends mongo_types_1.TypedEventEmitter {\n  constructor(server, options) {\n    super();\n    this.options = Object.freeze({\n      connectionType: connection_1.Connection,\n      ...options,\n      maxPoolSize: options.maxPoolSize ?? 100,\n      minPoolSize: options.minPoolSize ?? 0,\n      maxConnecting: options.maxConnecting ?? 2,\n      maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n      waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n      minPoolSizeCheckFrequencyMS: options.minPoolSizeCheckFrequencyMS ?? 100,\n      autoEncrypter: options.autoEncrypter\n    });\n    if (this.options.minPoolSize > this.options.maxPoolSize) {\n      throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n    }\n    this[kPoolState] = exports.PoolState.paused;\n    this[kServer] = server;\n    this[kConnections] = new utils_1.List();\n    this[kPending] = 0;\n    this[kCheckedOut] = new Set();\n    this[kMinPoolSizeTimer] = undefined;\n    this[kGeneration] = 0;\n    this[kServiceGenerations] = new Map();\n    this[kConnectionCounter] = (0, utils_1.makeCounter)(1);\n    this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kWaitQueue] = new utils_1.List();\n    this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n    this[kProcessingWaitQueue] = false;\n    this.mongoLogger = this[kServer].topology.client?.mongoLogger;\n    this.component = 'connection';\n    process.nextTick(() => {\n      this.emitAndLog(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n    });\n  }\n  /** The address of the endpoint the pool is connected to */\n  get address() {\n    return this.options.hostAddress.toString();\n  }\n  /**\n   * Check if the pool has been closed\n   *\n   * TODO(NODE-3263): We can remove this property once shell no longer needs it\n   */\n  get closed() {\n    return this[kPoolState] === exports.PoolState.closed;\n  }\n  /** An integer representing the SDAM generation of the pool */\n  get generation() {\n    return this[kGeneration];\n  }\n  /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n  get totalConnectionCount() {\n    return this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount;\n  }\n  /** An integer expressing how many connections are currently available in the pool. */\n  get availableConnectionCount() {\n    return this[kConnections].length;\n  }\n  get pendingConnectionCount() {\n    return this[kPending];\n  }\n  get currentCheckedOutCount() {\n    return this[kCheckedOut].size;\n  }\n  get waitQueueSize() {\n    return this[kWaitQueue].length;\n  }\n  get loadBalanced() {\n    return this.options.loadBalanced;\n  }\n  get serviceGenerations() {\n    return this[kServiceGenerations];\n  }\n  get serverError() {\n    return this[kServer].description.error;\n  }\n  /**\n   * This is exposed ONLY for use in mongosh, to enable\n   * killing all connections if a user quits the shell with\n   * operations in progress.\n   *\n   * This property may be removed as a part of NODE-3263.\n   */\n  get checkedOutConnections() {\n    return this[kCheckedOut];\n  }\n  /**\n   * Get the metrics information for the pool when a wait queue timeout occurs.\n   */\n  waitQueueErrorMetrics() {\n    return this[kMetrics].info(this.options.maxPoolSize);\n  }\n  /**\n   * Set the pool state to \"ready\"\n   */\n  ready() {\n    if (this[kPoolState] !== exports.PoolState.paused) {\n      return;\n    }\n    this[kPoolState] = exports.PoolState.ready;\n    this.emitAndLog(ConnectionPool.CONNECTION_POOL_READY, new connection_pool_events_1.ConnectionPoolReadyEvent(this));\n    (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n    this.ensureMinPoolSize();\n  }\n  /**\n   * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n   * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n   * explicitly destroyed by the new owner.\n   */\n  async checkOut() {\n    const checkoutTime = (0, utils_1.now)();\n    this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n    const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n    const {\n      promise,\n      resolve,\n      reject\n    } = (0, utils_1.promiseWithResolvers)();\n    const timeout = timeout_1.Timeout.expires(waitQueueTimeoutMS);\n    const waitQueueMember = {\n      resolve,\n      reject,\n      timeout,\n      checkoutTime\n    };\n    this[kWaitQueue].push(waitQueueMember);\n    process.nextTick(() => this.processWaitQueue());\n    try {\n      return await Promise.race([promise, waitQueueMember.timeout]);\n    } catch (error) {\n      if (timeout_1.TimeoutError.is(error)) {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timeout.clear();\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout', waitQueueMember.checkoutTime));\n        const timeoutError = new errors_1.WaitQueueTimeoutError(this.loadBalanced ? this.waitQueueErrorMetrics() : 'Timed out while checking out a connection from connection pool', this.address);\n        throw timeoutError;\n      }\n      throw error;\n    }\n  }\n  /**\n   * Check a connection into the pool.\n   *\n   * @param connection - The connection to check in\n   */\n  checkIn(connection) {\n    if (!this[kCheckedOut].has(connection)) {\n      return;\n    }\n    const poolClosed = this.closed;\n    const stale = this.connectionIsStale(connection);\n    const willDestroy = !!(poolClosed || stale || connection.closed);\n    if (!willDestroy) {\n      connection.markAvailable();\n      this[kConnections].unshift(connection);\n    }\n    this[kCheckedOut].delete(connection);\n    this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n    if (willDestroy) {\n      const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n      this.destroyConnection(connection, reason);\n    }\n    process.nextTick(() => this.processWaitQueue());\n  }\n  /**\n   * Clear the pool\n   *\n   * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n   * previous generation will eventually be pruned during subsequent checkouts.\n   */\n  clear() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.closed) {\n      return;\n    }\n    // handle load balanced case\n    if (this.loadBalanced) {\n      const {\n        serviceId\n      } = options;\n      if (!serviceId) {\n        throw new error_1.MongoRuntimeError('ConnectionPool.clear() called in load balanced mode with no serviceId.');\n      }\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      // Only need to worry if the generation exists, since it should\n      // always be there but typescript needs the check.\n      if (generation == null) {\n        throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n      } else {\n        // Increment the generation for the service id.\n        this.serviceGenerations.set(sid, generation + 1);\n      }\n      this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {\n        serviceId\n      }));\n      return;\n    }\n    // handle non load-balanced case\n    const interruptInUseConnections = options.interruptInUseConnections ?? false;\n    const oldGeneration = this[kGeneration];\n    this[kGeneration] += 1;\n    const alreadyPaused = this[kPoolState] === exports.PoolState.paused;\n    this[kPoolState] = exports.PoolState.paused;\n    this.clearMinPoolSizeTimer();\n    if (!alreadyPaused) {\n      this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {\n        interruptInUseConnections\n      }));\n    }\n    if (interruptInUseConnections) {\n      process.nextTick(() => this.interruptInUseConnections(oldGeneration));\n    }\n    this.processWaitQueue();\n  }\n  /**\n   * Closes all stale in-use connections in the pool with a resumable PoolClearedOnNetworkError.\n   *\n   * Only connections where `connection.generation <= minGeneration` are killed.\n   */\n  interruptInUseConnections(minGeneration) {\n    for (const connection of this[kCheckedOut]) {\n      if (connection.generation <= minGeneration) {\n        connection.onError(new errors_1.PoolClearedOnNetworkError(this));\n        this.checkIn(connection);\n      }\n    }\n  }\n  /** Close the pool */\n  close() {\n    if (this.closed) {\n      return;\n    }\n    // immediately cancel any in-flight connections\n    this[kCancellationToken].emit('cancel');\n    // end the connection counter\n    if (typeof this[kConnectionCounter].return === 'function') {\n      this[kConnectionCounter].return(undefined);\n    }\n    this[kPoolState] = exports.PoolState.closed;\n    this.clearMinPoolSizeTimer();\n    this.processWaitQueue();\n    for (const conn of this[kConnections]) {\n      this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));\n      conn.destroy();\n    }\n    this[kConnections].clear();\n    this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n  }\n  /**\n   * @internal\n   * Reauthenticate a connection\n   */\n  async reauthenticate(connection) {\n    const authContext = connection.authContext;\n    if (!authContext) {\n      throw new error_1.MongoRuntimeError('No auth context found on connection.');\n    }\n    const credentials = authContext.credentials;\n    if (!credentials) {\n      throw new error_1.MongoMissingCredentialsError('Connection is missing credentials when asked to reauthenticate');\n    }\n    const resolvedCredentials = credentials.resolveAuthMechanism(connection.hello);\n    const provider = this[kServer].topology.client.s.authProviders.getOrCreateProvider(resolvedCredentials.mechanism, resolvedCredentials.mechanismProperties);\n    if (!provider) {\n      throw new error_1.MongoMissingCredentialsError(`Reauthenticate failed due to no auth provider for ${credentials.mechanism}`);\n    }\n    await provider.reauth(authContext);\n    return;\n  }\n  /** Clear the min pool size timer */\n  clearMinPoolSizeTimer() {\n    const minPoolSizeTimer = this[kMinPoolSizeTimer];\n    if (minPoolSizeTimer) {\n      (0, timers_1.clearTimeout)(minPoolSizeTimer);\n    }\n  }\n  destroyConnection(connection, reason) {\n    this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, connection, reason));\n    // destroy the connection\n    connection.destroy();\n  }\n  connectionIsStale(connection) {\n    const serviceId = connection.serviceId;\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      return connection.generation !== generation;\n    }\n    return connection.generation !== this[kGeneration];\n  }\n  connectionIsIdle(connection) {\n    return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n  }\n  /**\n   * Destroys a connection if the connection is perished.\n   *\n   * @returns `true` if the connection was destroyed, `false` otherwise.\n   */\n  destroyConnectionIfPerished(connection) {\n    const isStale = this.connectionIsStale(connection);\n    const isIdle = this.connectionIsIdle(connection);\n    if (!isStale && !isIdle && !connection.closed) {\n      return false;\n    }\n    const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n    this.destroyConnection(connection, reason);\n    return true;\n  }\n  createConnection(callback) {\n    const connectOptions = {\n      ...this.options,\n      id: this[kConnectionCounter].next().value,\n      generation: this[kGeneration],\n      cancellationToken: this[kCancellationToken],\n      mongoLogger: this.mongoLogger,\n      authProviders: this[kServer].topology.client.s.authProviders\n    };\n    this[kPending]++;\n    // This is our version of a \"virtual\" no-I/O connection as the spec requires\n    const connectionCreatedTime = (0, utils_1.now)();\n    this.emitAndLog(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(this, {\n      id: connectOptions.id\n    }));\n    (0, connect_1.connect)(connectOptions).then(connection => {\n      // The pool might have closed since we started trying to create a connection\n      if (this[kPoolState] !== exports.PoolState.ready) {\n        this[kPending]--;\n        connection.destroy();\n        callback(this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this));\n        return;\n      }\n      // forward all events from the connection to the pool\n      for (const event of [...constants_1.APM_EVENTS, connection_1.Connection.CLUSTER_TIME_RECEIVED]) {\n        connection.on(event, e => this.emit(event, e));\n      }\n      if (this.loadBalanced) {\n        connection.on(connection_1.Connection.PINNED, pinType => this[kMetrics].markPinned(pinType));\n        connection.on(connection_1.Connection.UNPINNED, pinType => this[kMetrics].markUnpinned(pinType));\n        const serviceId = connection.serviceId;\n        if (serviceId) {\n          let generation;\n          const sid = serviceId.toHexString();\n          if (generation = this.serviceGenerations.get(sid)) {\n            connection.generation = generation;\n          } else {\n            this.serviceGenerations.set(sid, 0);\n            connection.generation = 0;\n          }\n        }\n      }\n      connection.markAvailable();\n      this.emitAndLog(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(this, connection, connectionCreatedTime));\n      this[kPending]--;\n      callback(undefined, connection);\n    }, error => {\n      this[kPending]--;\n      this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, {\n        id: connectOptions.id,\n        serviceId: undefined\n      }, 'error',\n      // TODO(NODE-5192): Remove this cast\n      error));\n      if (error instanceof error_1.MongoNetworkError || error instanceof error_1.MongoServerError) {\n        error.connectionGeneration = connectOptions.generation;\n      }\n      callback(error ?? new error_1.MongoRuntimeError('Connection creation failed without error'));\n    });\n  }\n  ensureMinPoolSize() {\n    const minPoolSize = this.options.minPoolSize;\n    if (this[kPoolState] !== exports.PoolState.ready || minPoolSize === 0) {\n      return;\n    }\n    this[kConnections].prune(connection => this.destroyConnectionIfPerished(connection));\n    if (this.totalConnectionCount < minPoolSize && this.pendingConnectionCount < this.options.maxConnecting) {\n      // NOTE: ensureMinPoolSize should not try to get all the pending\n      // connection permits because that potentially delays the availability of\n      // the connection to a checkout request\n      this.createConnection((err, connection) => {\n        if (err) {\n          this[kServer].handleError(err);\n        }\n        if (!err && connection) {\n          this[kConnections].push(connection);\n          process.nextTick(() => this.processWaitQueue());\n        }\n        if (this[kPoolState] === exports.PoolState.ready) {\n          (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n          this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n        }\n      });\n    } else {\n      (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n      this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n    }\n  }\n  processWaitQueue() {\n    if (this[kProcessingWaitQueue]) {\n      return;\n    }\n    this[kProcessingWaitQueue] = true;\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].first();\n      if (!waitQueueMember) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n      if (waitQueueMember[kCancelled]) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n      if (this[kPoolState] !== exports.PoolState.ready) {\n        const reason = this.closed ? 'poolClosed' : 'connectionError';\n        const error = this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this);\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, reason, waitQueueMember.checkoutTime, error));\n        waitQueueMember.timeout.clear();\n        this[kWaitQueue].shift();\n        waitQueueMember.reject(error);\n        continue;\n      }\n      if (!this.availableConnectionCount) {\n        break;\n      }\n      const connection = this[kConnections].shift();\n      if (!connection) {\n        break;\n      }\n      if (!this.destroyConnectionIfPerished(connection)) {\n        this[kCheckedOut].add(connection);\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection, waitQueueMember.checkoutTime));\n        waitQueueMember.timeout.clear();\n        this[kWaitQueue].shift();\n        waitQueueMember.resolve(connection);\n      }\n    }\n    const {\n      maxPoolSize,\n      maxConnecting\n    } = this.options;\n    while (this.waitQueueSize > 0 && this.pendingConnectionCount < maxConnecting && (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)) {\n      const waitQueueMember = this[kWaitQueue].shift();\n      if (!waitQueueMember || waitQueueMember[kCancelled]) {\n        continue;\n      }\n      this.createConnection((err, connection) => {\n        if (waitQueueMember[kCancelled]) {\n          if (!err && connection) {\n            this[kConnections].push(connection);\n          }\n        } else {\n          if (err) {\n            this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n            // TODO(NODE-5192): Remove this cast\n            new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'connectionError', waitQueueMember.checkoutTime, err));\n            waitQueueMember.reject(err);\n          } else if (connection) {\n            this[kCheckedOut].add(connection);\n            this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection, waitQueueMember.checkoutTime));\n            waitQueueMember.resolve(connection);\n          }\n          waitQueueMember.timeout.clear();\n        }\n        process.nextTick(() => this.processWaitQueue());\n      });\n    }\n    this[kProcessingWaitQueue] = false;\n  }\n}\nexports.ConnectionPool = ConnectionPool;\n/**\n * Emitted when the connection pool is created.\n * @event\n */\nConnectionPool.CONNECTION_POOL_CREATED = constants_1.CONNECTION_POOL_CREATED;\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLOSED = constants_1.CONNECTION_POOL_CLOSED;\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLEARED = constants_1.CONNECTION_POOL_CLEARED;\n/**\n * Emitted each time the connection pool is marked ready\n * @event\n */\nConnectionPool.CONNECTION_POOL_READY = constants_1.CONNECTION_POOL_READY;\n/**\n * Emitted when a connection is created.\n * @event\n */\nConnectionPool.CONNECTION_CREATED = constants_1.CONNECTION_CREATED;\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\nConnectionPool.CONNECTION_READY = constants_1.CONNECTION_READY;\n/**\n * Emitted when a connection is closed\n * @event\n */\nConnectionPool.CONNECTION_CLOSED = constants_1.CONNECTION_CLOSED;\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = constants_1.CONNECTION_CHECK_OUT_STARTED;\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = constants_1.CONNECTION_CHECK_OUT_FAILED;\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_OUT = constants_1.CONNECTION_CHECKED_OUT;\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_IN = constants_1.CONNECTION_CHECKED_IN;","map":{"version":3,"mappings":"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","names":["kServer","Symbol","kConnections","kPending","kCheckedOut","kMinPoolSizeTimer","kGeneration","kServiceGenerations","kConnectionCounter","kCancellationToken","kWaitQueue","kCancelled","kMetrics","kProcessingWaitQueue","kPoolState","exports","Object","freeze","paused","ready","closed","ConnectionPool","mongo_types_1","constructor","server","options","connectionType","connection_1","maxPoolSize","minPoolSize","maxConnecting","maxIdleTimeMS","waitQueueTimeoutMS","minPoolSizeCheckFrequencyMS","autoEncrypter","error_1","utils_1","Set","undefined","Map","setMaxListeners","Infinity","metrics_1","mongoLogger","topology","client","component","process","nextTick","emitAndLog","CONNECTION_POOL_CREATED","connection_pool_events_1","address","hostAddress","toString","generation","totalConnectionCount","availableConnectionCount","pendingConnectionCount","currentCheckedOutCount","length","size","waitQueueSize","loadBalanced","serviceGenerations","serverError","description","error","checkedOutConnections","waitQueueErrorMetrics","info","CONNECTION_POOL_READY","ensureMinPoolSize","checkOut","checkoutTime","CONNECTION_CHECK_OUT_STARTED","promise","resolve","reject","timeout","timeout_1","expires","waitQueueMember","push","processWaitQueue","Promise","race","is","clear","CONNECTION_CHECK_OUT_FAILED","timeoutError","errors_1","checkIn","connection","has","poolClosed","stale","connectionIsStale","willDestroy","markAvailable","unshift","delete","CONNECTION_CHECKED_IN","reason","destroyConnection","serviceId","sid","toHexString","get","set","CONNECTION_POOL_CLEARED","interruptInUseConnections","oldGeneration","alreadyPaused","clearMinPoolSizeTimer","minGeneration","onError","close","emit","return","conn","CONNECTION_CLOSED","destroy","CONNECTION_POOL_CLOSED","reauthenticate","authContext","credentials","resolvedCredentials","resolveAuthMechanism","hello","provider","s","authProviders","getOrCreateProvider","mechanism","mechanismProperties","reauth","minPoolSizeTimer","connectionIsIdle","idleTime","destroyConnectionIfPerished","isStale","isIdle","createConnection","callback","connectOptions","id","next","value","cancellationToken","connectionCreatedTime","CONNECTION_CREATED","then","event","constants_1","CLUSTER_TIME_RECEIVED","on","e","PINNED","pinType","markPinned","UNPINNED","markUnpinned","CONNECTION_READY","connectionGeneration","prune","err","handleError","first","shift","add","CONNECTION_CHECKED_OUT"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/cmap/connection_pool.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\n\nimport type { ObjectId } from '../bson';\nimport {\n  APM_EVENTS,\n  CONNECTION_CHECK_OUT_FAILED,\n  CONNECTION_CHECK_OUT_STARTED,\n  CONNECTION_CHECKED_IN,\n  CONNECTION_CHECKED_OUT,\n  CONNECTION_CLOSED,\n  CONNECTION_CREATED,\n  CONNECTION_POOL_CLEARED,\n  CONNECTION_POOL_CLOSED,\n  CONNECTION_POOL_CREATED,\n  CONNECTION_POOL_READY,\n  CONNECTION_READY\n} from '../constants';\nimport {\n  type AnyError,\n  type MongoError,\n  MongoInvalidArgumentError,\n  MongoMissingCredentialsError,\n  MongoNetworkError,\n  MongoRuntimeError,\n  MongoServerError\n} from '../error';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport type { Server } from '../sdam/server';\nimport { Timeout, TimeoutError } from '../timeout';\nimport { type Callback, List, makeCounter, now, promiseWithResolvers } from '../utils';\nimport { connect } from './connect';\nimport { Connection, type ConnectionEvents, type ConnectionOptions } from './connection';\nimport {\n  ConnectionCheckedInEvent,\n  ConnectionCheckedOutEvent,\n  ConnectionCheckOutFailedEvent,\n  ConnectionCheckOutStartedEvent,\n  ConnectionClosedEvent,\n  ConnectionCreatedEvent,\n  ConnectionPoolClearedEvent,\n  ConnectionPoolClosedEvent,\n  ConnectionPoolCreatedEvent,\n  ConnectionPoolReadyEvent,\n  ConnectionReadyEvent\n} from './connection_pool_events';\nimport {\n  PoolClearedError,\n  PoolClearedOnNetworkError,\n  PoolClosedError,\n  WaitQueueTimeoutError\n} from './errors';\nimport { ConnectionPoolMetrics } from './metrics';\n\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPending = Symbol('pending');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/** @internal */\nconst kPoolState = Symbol('poolState');\n\n/** @public */\nexport interface ConnectionPoolOptions extends Omit<ConnectionOptions, 'id' | 'generation'> {\n  /** The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections. */\n  maxPoolSize: number;\n  /** The minimum number of connections that MUST exist at any moment in a single connection pool. */\n  minPoolSize: number;\n  /** The maximum number of connections that may be in the process of being established concurrently by the connection pool. */\n  maxConnecting: number;\n  /** The maximum amount of time a connection should remain idle in the connection pool before being marked idle. */\n  maxIdleTimeMS: number;\n  /** The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit. */\n  waitQueueTimeoutMS: number;\n  /** If we are in load balancer mode. */\n  loadBalanced: boolean;\n  /** @internal */\n  minPoolSizeCheckFrequencyMS?: number;\n}\n\n/** @internal */\nexport interface WaitQueueMember {\n  resolve: (conn: Connection) => void;\n  reject: (err: AnyError) => void;\n  timeout: Timeout;\n  [kCancelled]?: boolean;\n  checkoutTime: number;\n}\n\n/** @internal */\nexport const PoolState = Object.freeze({\n  paused: 'paused',\n  ready: 'ready',\n  closed: 'closed'\n} as const);\n\n/**\n * @public\n * @deprecated This interface is deprecated and will be removed in a future release as it is not used\n * in the driver\n */\nexport interface CloseOptions {\n  force?: boolean;\n}\n\n/** @public */\nexport type ConnectionPoolEvents = {\n  connectionPoolCreated(event: ConnectionPoolCreatedEvent): void;\n  connectionPoolReady(event: ConnectionPoolReadyEvent): void;\n  connectionPoolClosed(event: ConnectionPoolClosedEvent): void;\n  connectionPoolCleared(event: ConnectionPoolClearedEvent): void;\n  connectionCreated(event: ConnectionCreatedEvent): void;\n  connectionReady(event: ConnectionReadyEvent): void;\n  connectionClosed(event: ConnectionClosedEvent): void;\n  connectionCheckOutStarted(event: ConnectionCheckOutStartedEvent): void;\n  connectionCheckOutFailed(event: ConnectionCheckOutFailedEvent): void;\n  connectionCheckedOut(event: ConnectionCheckedOutEvent): void;\n  connectionCheckedIn(event: ConnectionCheckedInEvent): void;\n} & Omit<ConnectionEvents, 'close' | 'message'>;\n\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nexport class ConnectionPool extends TypedEventEmitter<ConnectionPoolEvents> {\n  options: Readonly<ConnectionPoolOptions>;\n  [kPoolState]: (typeof PoolState)[keyof typeof PoolState];\n  [kServer]: Server;\n  [kConnections]: List<Connection>;\n  [kPending]: number;\n  [kCheckedOut]: Set<Connection>;\n  [kMinPoolSizeTimer]?: NodeJS.Timeout;\n  /**\n   * An integer representing the SDAM generation of the pool\n   */\n  [kGeneration]: number;\n  /**\n   * A map of generations to service ids\n   */\n  [kServiceGenerations]: Map<string, number>;\n  [kConnectionCounter]: Generator<number>;\n  [kCancellationToken]: CancellationToken;\n  [kWaitQueue]: List<WaitQueueMember>;\n  [kMetrics]: ConnectionPoolMetrics;\n  [kProcessingWaitQueue]: boolean;\n\n  /**\n   * Emitted when the connection pool is created.\n   * @event\n   */\n  static readonly CONNECTION_POOL_CREATED = CONNECTION_POOL_CREATED;\n  /**\n   * Emitted once when the connection pool is closed\n   * @event\n   */\n  static readonly CONNECTION_POOL_CLOSED = CONNECTION_POOL_CLOSED;\n  /**\n   * Emitted each time the connection pool is cleared and it's generation incremented\n   * @event\n   */\n  static readonly CONNECTION_POOL_CLEARED = CONNECTION_POOL_CLEARED;\n  /**\n   * Emitted each time the connection pool is marked ready\n   * @event\n   */\n  static readonly CONNECTION_POOL_READY = CONNECTION_POOL_READY;\n  /**\n   * Emitted when a connection is created.\n   * @event\n   */\n  static readonly CONNECTION_CREATED = CONNECTION_CREATED;\n  /**\n   * Emitted when a connection becomes established, and is ready to use\n   * @event\n   */\n  static readonly CONNECTION_READY = CONNECTION_READY;\n  /**\n   * Emitted when a connection is closed\n   * @event\n   */\n  static readonly CONNECTION_CLOSED = CONNECTION_CLOSED;\n  /**\n   * Emitted when an attempt to check out a connection begins\n   * @event\n   */\n  static readonly CONNECTION_CHECK_OUT_STARTED = CONNECTION_CHECK_OUT_STARTED;\n  /**\n   * Emitted when an attempt to check out a connection fails\n   * @event\n   */\n  static readonly CONNECTION_CHECK_OUT_FAILED = CONNECTION_CHECK_OUT_FAILED;\n  /**\n   * Emitted each time a connection is successfully checked out of the connection pool\n   * @event\n   */\n  static readonly CONNECTION_CHECKED_OUT = CONNECTION_CHECKED_OUT;\n  /**\n   * Emitted each time a connection is successfully checked into the connection pool\n   * @event\n   */\n  static readonly CONNECTION_CHECKED_IN = CONNECTION_CHECKED_IN;\n\n  constructor(server: Server, options: ConnectionPoolOptions) {\n    super();\n\n    this.options = Object.freeze({\n      connectionType: Connection,\n      ...options,\n      maxPoolSize: options.maxPoolSize ?? 100,\n      minPoolSize: options.minPoolSize ?? 0,\n      maxConnecting: options.maxConnecting ?? 2,\n      maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n      waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n      minPoolSizeCheckFrequencyMS: options.minPoolSizeCheckFrequencyMS ?? 100,\n      autoEncrypter: options.autoEncrypter\n    });\n\n    if (this.options.minPoolSize > this.options.maxPoolSize) {\n      throw new MongoInvalidArgumentError(\n        'Connection pool minimum size must not be greater than maximum pool size'\n      );\n    }\n\n    this[kPoolState] = PoolState.paused;\n    this[kServer] = server;\n    this[kConnections] = new List();\n    this[kPending] = 0;\n    this[kCheckedOut] = new Set();\n    this[kMinPoolSizeTimer] = undefined;\n    this[kGeneration] = 0;\n    this[kServiceGenerations] = new Map();\n    this[kConnectionCounter] = makeCounter(1);\n    this[kCancellationToken] = new CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kWaitQueue] = new List();\n    this[kMetrics] = new ConnectionPoolMetrics();\n    this[kProcessingWaitQueue] = false;\n\n    this.mongoLogger = this[kServer].topology.client?.mongoLogger;\n    this.component = 'connection';\n\n    process.nextTick(() => {\n      this.emitAndLog(ConnectionPool.CONNECTION_POOL_CREATED, new ConnectionPoolCreatedEvent(this));\n    });\n  }\n\n  /** The address of the endpoint the pool is connected to */\n  get address(): string {\n    return this.options.hostAddress.toString();\n  }\n\n  /**\n   * Check if the pool has been closed\n   *\n   * TODO(NODE-3263): We can remove this property once shell no longer needs it\n   */\n  get closed(): boolean {\n    return this[kPoolState] === PoolState.closed;\n  }\n\n  /** An integer representing the SDAM generation of the pool */\n  get generation(): number {\n    return this[kGeneration];\n  }\n\n  /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n  get totalConnectionCount(): number {\n    return (\n      this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount\n    );\n  }\n\n  /** An integer expressing how many connections are currently available in the pool. */\n  get availableConnectionCount(): number {\n    return this[kConnections].length;\n  }\n\n  get pendingConnectionCount(): number {\n    return this[kPending];\n  }\n\n  get currentCheckedOutCount(): number {\n    return this[kCheckedOut].size;\n  }\n\n  get waitQueueSize(): number {\n    return this[kWaitQueue].length;\n  }\n\n  get loadBalanced(): boolean {\n    return this.options.loadBalanced;\n  }\n\n  get serviceGenerations(): Map<string, number> {\n    return this[kServiceGenerations];\n  }\n\n  get serverError() {\n    return this[kServer].description.error;\n  }\n\n  /**\n   * This is exposed ONLY for use in mongosh, to enable\n   * killing all connections if a user quits the shell with\n   * operations in progress.\n   *\n   * This property may be removed as a part of NODE-3263.\n   */\n  get checkedOutConnections() {\n    return this[kCheckedOut];\n  }\n\n  /**\n   * Get the metrics information for the pool when a wait queue timeout occurs.\n   */\n  private waitQueueErrorMetrics(): string {\n    return this[kMetrics].info(this.options.maxPoolSize);\n  }\n\n  /**\n   * Set the pool state to \"ready\"\n   */\n  ready(): void {\n    if (this[kPoolState] !== PoolState.paused) {\n      return;\n    }\n    this[kPoolState] = PoolState.ready;\n    this.emitAndLog(ConnectionPool.CONNECTION_POOL_READY, new ConnectionPoolReadyEvent(this));\n    clearTimeout(this[kMinPoolSizeTimer]);\n    this.ensureMinPoolSize();\n  }\n\n  /**\n   * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n   * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n   * explicitly destroyed by the new owner.\n   */\n  async checkOut(): Promise<Connection> {\n    const checkoutTime = now();\n    this.emitAndLog(\n      ConnectionPool.CONNECTION_CHECK_OUT_STARTED,\n      new ConnectionCheckOutStartedEvent(this)\n    );\n\n    const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n\n    const { promise, resolve, reject } = promiseWithResolvers<Connection>();\n\n    const timeout = Timeout.expires(waitQueueTimeoutMS);\n\n    const waitQueueMember: WaitQueueMember = {\n      resolve,\n      reject,\n      timeout,\n      checkoutTime\n    };\n\n    this[kWaitQueue].push(waitQueueMember);\n    process.nextTick(() => this.processWaitQueue());\n\n    try {\n      return await Promise.race([promise, waitQueueMember.timeout]);\n    } catch (error) {\n      if (TimeoutError.is(error)) {\n        waitQueueMember[kCancelled] = true;\n\n        waitQueueMember.timeout.clear();\n\n        this.emitAndLog(\n          ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n          new ConnectionCheckOutFailedEvent(this, 'timeout', waitQueueMember.checkoutTime)\n        );\n        const timeoutError = new WaitQueueTimeoutError(\n          this.loadBalanced\n            ? this.waitQueueErrorMetrics()\n            : 'Timed out while checking out a connection from connection pool',\n          this.address\n        );\n        throw timeoutError;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Check a connection into the pool.\n   *\n   * @param connection - The connection to check in\n   */\n  checkIn(connection: Connection): void {\n    if (!this[kCheckedOut].has(connection)) {\n      return;\n    }\n    const poolClosed = this.closed;\n    const stale = this.connectionIsStale(connection);\n    const willDestroy = !!(poolClosed || stale || connection.closed);\n\n    if (!willDestroy) {\n      connection.markAvailable();\n      this[kConnections].unshift(connection);\n    }\n\n    this[kCheckedOut].delete(connection);\n    this.emitAndLog(\n      ConnectionPool.CONNECTION_CHECKED_IN,\n      new ConnectionCheckedInEvent(this, connection)\n    );\n\n    if (willDestroy) {\n      const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n      this.destroyConnection(connection, reason);\n    }\n\n    process.nextTick(() => this.processWaitQueue());\n  }\n\n  /**\n   * Clear the pool\n   *\n   * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n   * previous generation will eventually be pruned during subsequent checkouts.\n   */\n  clear(options: { serviceId?: ObjectId; interruptInUseConnections?: boolean } = {}): void {\n    if (this.closed) {\n      return;\n    }\n\n    // handle load balanced case\n    if (this.loadBalanced) {\n      const { serviceId } = options;\n      if (!serviceId) {\n        throw new MongoRuntimeError(\n          'ConnectionPool.clear() called in load balanced mode with no serviceId.'\n        );\n      }\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      // Only need to worry if the generation exists, since it should\n      // always be there but typescript needs the check.\n      if (generation == null) {\n        throw new MongoRuntimeError('Service generations are required in load balancer mode.');\n      } else {\n        // Increment the generation for the service id.\n        this.serviceGenerations.set(sid, generation + 1);\n      }\n      this.emitAndLog(\n        ConnectionPool.CONNECTION_POOL_CLEARED,\n        new ConnectionPoolClearedEvent(this, { serviceId })\n      );\n      return;\n    }\n    // handle non load-balanced case\n    const interruptInUseConnections = options.interruptInUseConnections ?? false;\n    const oldGeneration = this[kGeneration];\n    this[kGeneration] += 1;\n    const alreadyPaused = this[kPoolState] === PoolState.paused;\n    this[kPoolState] = PoolState.paused;\n\n    this.clearMinPoolSizeTimer();\n    if (!alreadyPaused) {\n      this.emitAndLog(\n        ConnectionPool.CONNECTION_POOL_CLEARED,\n        new ConnectionPoolClearedEvent(this, {\n          interruptInUseConnections\n        })\n      );\n    }\n\n    if (interruptInUseConnections) {\n      process.nextTick(() => this.interruptInUseConnections(oldGeneration));\n    }\n\n    this.processWaitQueue();\n  }\n\n  /**\n   * Closes all stale in-use connections in the pool with a resumable PoolClearedOnNetworkError.\n   *\n   * Only connections where `connection.generation <= minGeneration` are killed.\n   */\n  private interruptInUseConnections(minGeneration: number) {\n    for (const connection of this[kCheckedOut]) {\n      if (connection.generation <= minGeneration) {\n        connection.onError(new PoolClearedOnNetworkError(this));\n        this.checkIn(connection);\n      }\n    }\n  }\n\n  /** Close the pool */\n  close(): void {\n    if (this.closed) {\n      return;\n    }\n\n    // immediately cancel any in-flight connections\n    this[kCancellationToken].emit('cancel');\n\n    // end the connection counter\n    if (typeof this[kConnectionCounter].return === 'function') {\n      this[kConnectionCounter].return(undefined);\n    }\n\n    this[kPoolState] = PoolState.closed;\n    this.clearMinPoolSizeTimer();\n    this.processWaitQueue();\n\n    for (const conn of this[kConnections]) {\n      this.emitAndLog(\n        ConnectionPool.CONNECTION_CLOSED,\n        new ConnectionClosedEvent(this, conn, 'poolClosed')\n      );\n      conn.destroy();\n    }\n    this[kConnections].clear();\n    this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLOSED, new ConnectionPoolClosedEvent(this));\n  }\n\n  /**\n   * @internal\n   * Reauthenticate a connection\n   */\n  async reauthenticate(connection: Connection): Promise<void> {\n    const authContext = connection.authContext;\n    if (!authContext) {\n      throw new MongoRuntimeError('No auth context found on connection.');\n    }\n    const credentials = authContext.credentials;\n    if (!credentials) {\n      throw new MongoMissingCredentialsError(\n        'Connection is missing credentials when asked to reauthenticate'\n      );\n    }\n\n    const resolvedCredentials = credentials.resolveAuthMechanism(connection.hello);\n    const provider = this[kServer].topology.client.s.authProviders.getOrCreateProvider(\n      resolvedCredentials.mechanism,\n      resolvedCredentials.mechanismProperties\n    );\n\n    if (!provider) {\n      throw new MongoMissingCredentialsError(\n        `Reauthenticate failed due to no auth provider for ${credentials.mechanism}`\n      );\n    }\n\n    await provider.reauth(authContext);\n\n    return;\n  }\n\n  /** Clear the min pool size timer */\n  private clearMinPoolSizeTimer(): void {\n    const minPoolSizeTimer = this[kMinPoolSizeTimer];\n    if (minPoolSizeTimer) {\n      clearTimeout(minPoolSizeTimer);\n    }\n  }\n\n  private destroyConnection(\n    connection: Connection,\n    reason: 'error' | 'idle' | 'stale' | 'poolClosed'\n  ) {\n    this.emitAndLog(\n      ConnectionPool.CONNECTION_CLOSED,\n      new ConnectionClosedEvent(this, connection, reason)\n    );\n    // destroy the connection\n    connection.destroy();\n  }\n\n  private connectionIsStale(connection: Connection) {\n    const serviceId = connection.serviceId;\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      return connection.generation !== generation;\n    }\n\n    return connection.generation !== this[kGeneration];\n  }\n\n  private connectionIsIdle(connection: Connection) {\n    return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n  }\n\n  /**\n   * Destroys a connection if the connection is perished.\n   *\n   * @returns `true` if the connection was destroyed, `false` otherwise.\n   */\n  private destroyConnectionIfPerished(connection: Connection): boolean {\n    const isStale = this.connectionIsStale(connection);\n    const isIdle = this.connectionIsIdle(connection);\n    if (!isStale && !isIdle && !connection.closed) {\n      return false;\n    }\n    const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n    this.destroyConnection(connection, reason);\n    return true;\n  }\n\n  private createConnection(callback: Callback<Connection>) {\n    const connectOptions: ConnectionOptions = {\n      ...this.options,\n      id: this[kConnectionCounter].next().value,\n      generation: this[kGeneration],\n      cancellationToken: this[kCancellationToken],\n      mongoLogger: this.mongoLogger,\n      authProviders: this[kServer].topology.client.s.authProviders\n    };\n\n    this[kPending]++;\n    // This is our version of a \"virtual\" no-I/O connection as the spec requires\n    const connectionCreatedTime = now();\n    this.emitAndLog(\n      ConnectionPool.CONNECTION_CREATED,\n      new ConnectionCreatedEvent(this, { id: connectOptions.id })\n    );\n\n    connect(connectOptions).then(\n      connection => {\n        // The pool might have closed since we started trying to create a connection\n        if (this[kPoolState] !== PoolState.ready) {\n          this[kPending]--;\n          connection.destroy();\n          callback(this.closed ? new PoolClosedError(this) : new PoolClearedError(this));\n          return;\n        }\n\n        // forward all events from the connection to the pool\n        for (const event of [...APM_EVENTS, Connection.CLUSTER_TIME_RECEIVED]) {\n          connection.on(event, (e: any) => this.emit(event, e));\n        }\n\n        if (this.loadBalanced) {\n          connection.on(Connection.PINNED, pinType => this[kMetrics].markPinned(pinType));\n          connection.on(Connection.UNPINNED, pinType => this[kMetrics].markUnpinned(pinType));\n\n          const serviceId = connection.serviceId;\n          if (serviceId) {\n            let generation;\n            const sid = serviceId.toHexString();\n            if ((generation = this.serviceGenerations.get(sid))) {\n              connection.generation = generation;\n            } else {\n              this.serviceGenerations.set(sid, 0);\n              connection.generation = 0;\n            }\n          }\n        }\n\n        connection.markAvailable();\n        this.emitAndLog(\n          ConnectionPool.CONNECTION_READY,\n          new ConnectionReadyEvent(this, connection, connectionCreatedTime)\n        );\n\n        this[kPending]--;\n        callback(undefined, connection);\n      },\n      error => {\n        this[kPending]--;\n        this.emitAndLog(\n          ConnectionPool.CONNECTION_CLOSED,\n          new ConnectionClosedEvent(\n            this,\n            { id: connectOptions.id, serviceId: undefined },\n            'error',\n            // TODO(NODE-5192): Remove this cast\n            error as MongoError\n          )\n        );\n        if (error instanceof MongoNetworkError || error instanceof MongoServerError) {\n          error.connectionGeneration = connectOptions.generation;\n        }\n        callback(error ?? new MongoRuntimeError('Connection creation failed without error'));\n      }\n    );\n  }\n\n  private ensureMinPoolSize() {\n    const minPoolSize = this.options.minPoolSize;\n    if (this[kPoolState] !== PoolState.ready || minPoolSize === 0) {\n      return;\n    }\n\n    this[kConnections].prune(connection => this.destroyConnectionIfPerished(connection));\n\n    if (\n      this.totalConnectionCount < minPoolSize &&\n      this.pendingConnectionCount < this.options.maxConnecting\n    ) {\n      // NOTE: ensureMinPoolSize should not try to get all the pending\n      // connection permits because that potentially delays the availability of\n      // the connection to a checkout request\n      this.createConnection((err, connection) => {\n        if (err) {\n          this[kServer].handleError(err);\n        }\n        if (!err && connection) {\n          this[kConnections].push(connection);\n          process.nextTick(() => this.processWaitQueue());\n        }\n        if (this[kPoolState] === PoolState.ready) {\n          clearTimeout(this[kMinPoolSizeTimer]);\n          this[kMinPoolSizeTimer] = setTimeout(\n            () => this.ensureMinPoolSize(),\n            this.options.minPoolSizeCheckFrequencyMS\n          );\n        }\n      });\n    } else {\n      clearTimeout(this[kMinPoolSizeTimer]);\n      this[kMinPoolSizeTimer] = setTimeout(\n        () => this.ensureMinPoolSize(),\n        this.options.minPoolSizeCheckFrequencyMS\n      );\n    }\n  }\n\n  private processWaitQueue() {\n    if (this[kProcessingWaitQueue]) {\n      return;\n    }\n    this[kProcessingWaitQueue] = true;\n\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].first();\n      if (!waitQueueMember) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n\n      if (waitQueueMember[kCancelled]) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n\n      if (this[kPoolState] !== PoolState.ready) {\n        const reason = this.closed ? 'poolClosed' : 'connectionError';\n        const error = this.closed ? new PoolClosedError(this) : new PoolClearedError(this);\n        this.emitAndLog(\n          ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n          new ConnectionCheckOutFailedEvent(this, reason, waitQueueMember.checkoutTime, error)\n        );\n        waitQueueMember.timeout.clear();\n        this[kWaitQueue].shift();\n        waitQueueMember.reject(error);\n        continue;\n      }\n\n      if (!this.availableConnectionCount) {\n        break;\n      }\n\n      const connection = this[kConnections].shift();\n      if (!connection) {\n        break;\n      }\n\n      if (!this.destroyConnectionIfPerished(connection)) {\n        this[kCheckedOut].add(connection);\n        this.emitAndLog(\n          ConnectionPool.CONNECTION_CHECKED_OUT,\n          new ConnectionCheckedOutEvent(this, connection, waitQueueMember.checkoutTime)\n        );\n        waitQueueMember.timeout.clear();\n\n        this[kWaitQueue].shift();\n        waitQueueMember.resolve(connection);\n      }\n    }\n\n    const { maxPoolSize, maxConnecting } = this.options;\n    while (\n      this.waitQueueSize > 0 &&\n      this.pendingConnectionCount < maxConnecting &&\n      (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)\n    ) {\n      const waitQueueMember = this[kWaitQueue].shift();\n      if (!waitQueueMember || waitQueueMember[kCancelled]) {\n        continue;\n      }\n      this.createConnection((err, connection) => {\n        if (waitQueueMember[kCancelled]) {\n          if (!err && connection) {\n            this[kConnections].push(connection);\n          }\n        } else {\n          if (err) {\n            this.emitAndLog(\n              ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n              // TODO(NODE-5192): Remove this cast\n              new ConnectionCheckOutFailedEvent(\n                this,\n                'connectionError',\n                waitQueueMember.checkoutTime,\n                err as MongoError\n              )\n            );\n            waitQueueMember.reject(err);\n          } else if (connection) {\n            this[kCheckedOut].add(connection);\n            this.emitAndLog(\n              ConnectionPool.CONNECTION_CHECKED_OUT,\n              new ConnectionCheckedOutEvent(this, connection, waitQueueMember.checkoutTime)\n            );\n            waitQueueMember.resolve(connection);\n          }\n\n          waitQueueMember.timeout.clear();\n        }\n        process.nextTick(() => this.processWaitQueue());\n      });\n    }\n    this[kProcessingWaitQueue] = false;\n  }\n}\n\n/**\n * A callback provided to `withConnection`\n * @internal\n *\n * @param error - An error instance representing the error during the execution.\n * @param connection - The managed connection which was checked out of the pool.\n * @param callback - A function to call back after connection management is complete\n */\nexport type WithConnectionCallback = (\n  error: MongoError | undefined,\n  connection: Connection | undefined,\n  callback: Callback<Connection>\n) => void;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}