{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal } from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport { isSpanContextValid, wrapSpanContext } from '../trace/spancontext-utils';\nimport { deleteSpan, getActiveSpan, getSpan, getSpanContext, setSpan, setSpanContext } from '../trace/context-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'trace';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nvar TraceAPI = /** @class */function () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function TraceAPI() {\n    this._proxyTracerProvider = new ProxyTracerProvider();\n    this.wrapSpanContext = wrapSpanContext;\n    this.isSpanContextValid = isSpanContextValid;\n    this.deleteSpan = deleteSpan;\n    this.getSpan = getSpan;\n    this.getActiveSpan = getActiveSpan;\n    this.getSpanContext = getSpanContext;\n    this.setSpan = setSpan;\n    this.setSpanContext = setSpanContext;\n  }\n  /** Get the singleton instance of the Trace API */\n  TraceAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new TraceAPI();\n    }\n    return this._instance;\n  };\n  /**\n   * Set the current global tracer.\n   *\n   * @returns true if the tracer provider was successfully registered, else false\n   */\n  TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n    var success = registerGlobal(API_NAME, this._proxyTracerProvider, DiagAPI.instance());\n    if (success) {\n      this._proxyTracerProvider.setDelegate(provider);\n    }\n    return success;\n  };\n  /**\n   * Returns the global tracer provider.\n   */\n  TraceAPI.prototype.getTracerProvider = function () {\n    return getGlobal(API_NAME) || this._proxyTracerProvider;\n  };\n  /**\n   * Returns a tracer from the global tracer provider.\n   */\n  TraceAPI.prototype.getTracer = function (name, version) {\n    return this.getTracerProvider().getTracer(name, version);\n  };\n  /** Remove the global tracer provider */\n  TraceAPI.prototype.disable = function () {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n    this._proxyTracerProvider = new ProxyTracerProvider();\n  };\n  return TraceAPI;\n}();\nexport { TraceAPI };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SACEA,SAAS,EACTC,cAAc,EACdC,gBAAgB,QACX,0BAA0B;AACjC,SAASC,mBAAmB,QAAQ,8BAA8B;AAClE,SACEC,kBAAkB,EAClBC,eAAe,QACV,4BAA4B;AAGnC,SACEC,UAAU,EACVC,aAAa,EACbC,OAAO,EACPC,cAAc,EACdC,OAAO,EACPC,cAAc,QACT,wBAAwB;AAC/B,SAASC,OAAO,QAAQ,QAAQ;AAEhC,IAAMC,QAAQ,GAAG,OAAO;AAExB;;;AAGA;EAKE;EACA;IAHQ,yBAAoB,GAAG,IAAIV,mBAAmB,EAAE;IAmDjD,oBAAe,GAAGE,eAAe;IAEjC,uBAAkB,GAAGD,kBAAkB;IAEvC,eAAU,GAAGE,UAAU;IAEvB,YAAO,GAAGE,OAAO;IAEjB,kBAAa,GAAGD,aAAa;IAE7B,mBAAc,GAAGE,cAAc;IAE/B,YAAO,GAAGC,OAAO;IAEjB,mBAAc,GAAGC,cAAc;EA9Df;EAEvB;EACcG,oBAAW,GAAzB;IACE,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACnB,IAAI,CAACA,SAAS,GAAG,IAAID,QAAQ,EAAE;;IAGjC,OAAO,IAAI,CAACC,SAAS;EACvB,CAAC;EAED;;;;;EAKOD,0CAAuB,GAA9B,UAA+BE,QAAwB;IACrD,IAAMC,OAAO,GAAGhB,cAAc,CAC5BY,QAAQ,EACR,IAAI,CAACK,oBAAoB,EACzBN,OAAO,CAACO,QAAQ,EAAE,CACnB;IACD,IAAIF,OAAO,EAAE;MACX,IAAI,CAACC,oBAAoB,CAACE,WAAW,CAACJ,QAAQ,CAAC;;IAEjD,OAAOC,OAAO;EAChB,CAAC;EAED;;;EAGOH,oCAAiB,GAAxB;IACE,OAAOd,SAAS,CAACa,QAAQ,CAAC,IAAI,IAAI,CAACK,oBAAoB;EACzD,CAAC;EAED;;;EAGOJ,4BAAS,GAAhB,UAAiBO,IAAY,EAAEC,OAAgB;IAC7C,OAAO,IAAI,CAACC,iBAAiB,EAAE,CAACC,SAAS,CAACH,IAAI,EAAEC,OAAO,CAAC;EAC1D,CAAC;EAED;EACOR,0BAAO,GAAd;IACEZ,gBAAgB,CAACW,QAAQ,EAAED,OAAO,CAACO,QAAQ,EAAE,CAAC;IAC9C,IAAI,CAACD,oBAAoB,GAAG,IAAIf,mBAAmB,EAAE;EACvD,CAAC;EAiBH,eAAC;AAAD,CAAC,EArED","names":["getGlobal","registerGlobal","unregisterGlobal","ProxyTracerProvider","isSpanContextValid","wrapSpanContext","deleteSpan","getActiveSpan","getSpan","getSpanContext","setSpan","setSpanContext","DiagAPI","API_NAME","TraceAPI","_instance","provider","success","_proxyTracerProvider","instance","setDelegate","name","version","getTracerProvider","getTracer"],"sources":["/home/yadu/Music/Gifty/node_modules/@opentelemetry/api/src/api/trace.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  getGlobal,\n  registerGlobal,\n  unregisterGlobal,\n} from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport {\n  isSpanContextValid,\n  wrapSpanContext,\n} from '../trace/spancontext-utils';\nimport { Tracer } from '../trace/tracer';\nimport { TracerProvider } from '../trace/tracer_provider';\nimport {\n  deleteSpan,\n  getActiveSpan,\n  getSpan,\n  getSpanContext,\n  setSpan,\n  setSpanContext,\n} from '../trace/context-utils';\nimport { DiagAPI } from './diag';\n\nconst API_NAME = 'trace';\n\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nexport class TraceAPI {\n  private static _instance?: TraceAPI;\n\n  private _proxyTracerProvider = new ProxyTracerProvider();\n\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  private constructor() {}\n\n  /** Get the singleton instance of the Trace API */\n  public static getInstance(): TraceAPI {\n    if (!this._instance) {\n      this._instance = new TraceAPI();\n    }\n\n    return this._instance;\n  }\n\n  /**\n   * Set the current global tracer.\n   *\n   * @returns true if the tracer provider was successfully registered, else false\n   */\n  public setGlobalTracerProvider(provider: TracerProvider): boolean {\n    const success = registerGlobal(\n      API_NAME,\n      this._proxyTracerProvider,\n      DiagAPI.instance()\n    );\n    if (success) {\n      this._proxyTracerProvider.setDelegate(provider);\n    }\n    return success;\n  }\n\n  /**\n   * Returns the global tracer provider.\n   */\n  public getTracerProvider(): TracerProvider {\n    return getGlobal(API_NAME) || this._proxyTracerProvider;\n  }\n\n  /**\n   * Returns a tracer from the global tracer provider.\n   */\n  public getTracer(name: string, version?: string): Tracer {\n    return this.getTracerProvider().getTracer(name, version);\n  }\n\n  /** Remove the global tracer provider */\n  public disable() {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n    this._proxyTracerProvider = new ProxyTracerProvider();\n  }\n\n  public wrapSpanContext = wrapSpanContext;\n\n  public isSpanContextValid = isSpanContextValid;\n\n  public deleteSpan = deleteSpan;\n\n  public getSpan = getSpan;\n\n  public getActiveSpan = getActiveSpan;\n\n  public getSpanContext = getSpanContext;\n\n  public setSpan = setSpan;\n\n  public setSpanContext = setSpanContext;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}