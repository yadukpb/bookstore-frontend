{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopTracer } from './NoopTracer';\nvar NOOP_TRACER = new NoopTracer();\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nvar ProxyTracer = /** @class */function () {\n  function ProxyTracer(_provider, name, version, options) {\n    this._provider = _provider;\n    this.name = name;\n    this.version = version;\n    this.options = options;\n  }\n  ProxyTracer.prototype.startSpan = function (name, options, context) {\n    return this._getTracer().startSpan(name, options, context);\n  };\n  ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {\n    var tracer = this._getTracer();\n    return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n  };\n  /**\n   * Try to get a tracer from the proxy tracer provider.\n   * If the proxy tracer provider has no delegate, return a noop tracer.\n   */\n  ProxyTracer.prototype._getTracer = function () {\n    if (this._delegate) {\n      return this._delegate;\n    }\n    var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);\n    if (!tracer) {\n      return NOOP_TRACER;\n    }\n    this._delegate = tracer;\n    return this._delegate;\n  };\n  return ProxyTracer;\n}();\nexport { ProxyTracer };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAiBA,SAASA,UAAU,QAAQ,cAAc;AAMzC,IAAMC,WAAW,GAAG,IAAID,UAAU,EAAE;AAEpC;;;AAGA;EAIE,qBACUE,SAA0B,EAClBC,IAAY,EACZC,OAAgB,EAChBC,OAAuB;IAH/B,cAAS,GAATH,SAAS;IACD,SAAI,GAAJC,IAAI;IACJ,YAAO,GAAPC,OAAO;IACP,YAAO,GAAPC,OAAO;EACtB;EAEHC,+BAAS,GAAT,UAAUH,IAAY,EAAEE,OAAqB,EAAEE,OAAiB;IAC9D,OAAO,IAAI,CAACC,UAAU,EAAE,CAACC,SAAS,CAACN,IAAI,EAAEE,OAAO,EAAEE,OAAO,CAAC;EAC5D,CAAC;EAEDD,qCAAe,GAAf,UACEI,KAAa,EACbC,QAAyB,EACzBC,QAAsB,EACtBC,GAAO;IAEP,IAAMC,MAAM,GAAG,IAAI,CAACN,UAAU,EAAE;IAChC,OAAOO,OAAO,CAACC,KAAK,CAACF,MAAM,CAACG,eAAe,EAAEH,MAAM,EAAEI,SAAS,CAAC;EACjE,CAAC;EAED;;;;EAIQZ,gCAAU,GAAlB;IACE,IAAI,IAAI,CAACa,SAAS,EAAE;MAClB,OAAO,IAAI,CAACA,SAAS;;IAGvB,IAAML,MAAM,GAAG,IAAI,CAACZ,SAAS,CAACkB,iBAAiB,CAC7C,IAAI,CAACjB,IAAI,EACT,IAAI,CAACC,OAAO,EACZ,IAAI,CAACC,OAAO,CACb;IAED,IAAI,CAACS,MAAM,EAAE;MACX,OAAOb,WAAW;;IAGpB,IAAI,CAACkB,SAAS,GAAGL,MAAM;IACvB,OAAO,IAAI,CAACK,SAAS;EACvB,CAAC;EACH,kBAAC;AAAD,CAAC,EA/CD","names":["NoopTracer","NOOP_TRACER","_provider","name","version","options","ProxyTracer","context","_getTracer","startSpan","_name","_options","_context","_fn","tracer","Reflect","apply","startActiveSpan","arguments","_delegate","getDelegateTracer"],"sources":["/home/yadu/Music/Gifty/node_modules/@opentelemetry/api/src/trace/ProxyTracer.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '../context/types';\nimport { NoopTracer } from './NoopTracer';\nimport { Span } from './span';\nimport { SpanOptions } from './SpanOptions';\nimport { Tracer } from './tracer';\nimport { TracerOptions } from './tracer_options';\n\nconst NOOP_TRACER = new NoopTracer();\n\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nexport class ProxyTracer implements Tracer {\n  // When a real implementation is provided, this will be it\n  private _delegate?: Tracer;\n\n  constructor(\n    private _provider: TracerDelegator,\n    public readonly name: string,\n    public readonly version?: string,\n    public readonly options?: TracerOptions\n  ) {}\n\n  startSpan(name: string, options?: SpanOptions, context?: Context): Span {\n    return this._getTracer().startSpan(name, options, context);\n  }\n\n  startActiveSpan<F extends (span: Span) => unknown>(\n    _name: string,\n    _options: F | SpanOptions,\n    _context?: F | Context,\n    _fn?: F\n  ): ReturnType<F> {\n    const tracer = this._getTracer();\n    return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n  }\n\n  /**\n   * Try to get a tracer from the proxy tracer provider.\n   * If the proxy tracer provider has no delegate, return a noop tracer.\n   */\n  private _getTracer() {\n    if (this._delegate) {\n      return this._delegate;\n    }\n\n    const tracer = this._provider.getDelegateTracer(\n      this.name,\n      this.version,\n      this.options\n    );\n\n    if (!tracer) {\n      return NOOP_TRACER;\n    }\n\n    this._delegate = tracer;\n    return this._delegate;\n  }\n}\n\nexport interface TracerDelegator {\n  getDelegateTracer(\n    name: string,\n    version?: string,\n    options?: TracerOptions\n  ): Tracer | undefined;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}