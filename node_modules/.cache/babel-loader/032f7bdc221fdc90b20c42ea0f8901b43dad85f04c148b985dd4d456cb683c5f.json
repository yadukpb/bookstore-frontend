{"ast":null,"code":"\"use strict\";\n\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bucket = exports.BucketExceptionMessages = exports.AvailableServiceObjectMethods = exports.BucketActionToHTTPMethod = void 0;\nconst index_js_1 = require(\"./nodejs-common/index.js\");\nconst paginator_1 = require(\"@google-cloud/paginator\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst fs = __importStar(require(\"fs\"));\nconst mime_1 = __importDefault(require(\"mime\"));\nconst path = __importStar(require(\"path\"));\nconst p_limit_1 = __importDefault(require(\"p-limit\"));\nconst util_1 = require(\"util\");\nconst async_retry_1 = __importDefault(require(\"async-retry\"));\nconst util_js_1 = require(\"./util.js\");\nconst acl_js_1 = require(\"./acl.js\");\nconst file_js_1 = require(\"./file.js\");\nconst iam_js_1 = require(\"./iam.js\");\nconst notification_js_1 = require(\"./notification.js\");\nconst storage_js_1 = require(\"./storage.js\");\nconst signer_js_1 = require(\"./signer.js\");\nconst stream_1 = require(\"stream\");\nconst url_1 = require(\"url\");\nvar BucketActionToHTTPMethod;\n(function (BucketActionToHTTPMethod) {\n  BucketActionToHTTPMethod[\"list\"] = \"GET\";\n})(BucketActionToHTTPMethod || (exports.BucketActionToHTTPMethod = BucketActionToHTTPMethod = {}));\nvar AvailableServiceObjectMethods;\n(function (AvailableServiceObjectMethods) {\n  AvailableServiceObjectMethods[AvailableServiceObjectMethods[\"setMetadata\"] = 0] = \"setMetadata\";\n  AvailableServiceObjectMethods[AvailableServiceObjectMethods[\"delete\"] = 1] = \"delete\";\n})(AvailableServiceObjectMethods || (exports.AvailableServiceObjectMethods = AvailableServiceObjectMethods = {}));\nvar BucketExceptionMessages;\n(function (BucketExceptionMessages) {\n  BucketExceptionMessages[\"PROVIDE_SOURCE_FILE\"] = \"You must provide at least one source file.\";\n  BucketExceptionMessages[\"DESTINATION_FILE_NOT_SPECIFIED\"] = \"A destination file must be specified.\";\n  BucketExceptionMessages[\"CHANNEL_ID_REQUIRED\"] = \"An ID is required to create a channel.\";\n  BucketExceptionMessages[\"TOPIC_NAME_REQUIRED\"] = \"A valid topic name is required.\";\n  BucketExceptionMessages[\"CONFIGURATION_OBJECT_PREFIX_REQUIRED\"] = \"A configuration object with a prefix is required.\";\n  BucketExceptionMessages[\"SPECIFY_FILE_NAME\"] = \"A file name must be specified.\";\n  BucketExceptionMessages[\"METAGENERATION_NOT_PROVIDED\"] = \"A metageneration must be provided.\";\n  BucketExceptionMessages[\"SUPPLY_NOTIFICATION_ID\"] = \"You must supply a notification ID.\";\n})(BucketExceptionMessages || (exports.BucketExceptionMessages = BucketExceptionMessages = {}));\n/**\n * @callback Crc32cGeneratorToStringCallback\n * A method returning the CRC32C as a base64-encoded string.\n *\n * @returns {string}\n *\n * @example\n * Hashing the string 'data' should return 'rth90Q=='\n *\n * ```js\n * const buffer = Buffer.from('data');\n * crc32c.update(buffer);\n * crc32c.toString(); // 'rth90Q=='\n * ```\n **/\n/**\n * @callback Crc32cGeneratorValidateCallback\n * A method validating a base64-encoded CRC32C string.\n *\n * @param {string} [value] base64-encoded CRC32C string to validate\n * @returns {boolean}\n *\n * @example\n * Should return `true` if the value matches, `false` otherwise\n *\n * ```js\n * const buffer = Buffer.from('data');\n * crc32c.update(buffer);\n * crc32c.validate('DkjKuA=='); // false\n * crc32c.validate('rth90Q=='); // true\n * ```\n **/\n/**\n * @callback Crc32cGeneratorUpdateCallback\n * A method for passing `Buffer`s for CRC32C generation.\n *\n * @param {Buffer} [data] data to update CRC32C value with\n * @returns {undefined}\n *\n * @example\n * Hashing buffers from 'some ' and 'text\\n'\n *\n * ```js\n * const buffer1 = Buffer.from('some ');\n * crc32c.update(buffer1);\n *\n * const buffer2 = Buffer.from('text\\n');\n * crc32c.update(buffer2);\n *\n * crc32c.toString(); // 'DkjKuA=='\n * ```\n **/\n/**\n * @typedef {object} CRC32CValidator\n * @property {Crc32cGeneratorToStringCallback}\n * @property {Crc32cGeneratorValidateCallback}\n * @property {Crc32cGeneratorUpdateCallback}\n */\n/**\n * A function that generates a CRC32C Validator. Defaults to {@link CRC32C}\n *\n * @name Bucket#crc32cGenerator\n * @type {CRC32CValidator}\n */\n/**\n * Get and set IAM policies for your bucket.\n *\n * @name Bucket#iam\n * @mixes Iam\n *\n * See {@link https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management| Cloud Storage IAM Management}\n * See {@link https://cloud.google.com/iam/docs/granting-changing-revoking-access| Granting, Changing, and Revoking Access}\n * See {@link https://cloud.google.com/iam/docs/understanding-roles| IAM Roles}\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n *\n * //-\n * // Get the IAM policy for your bucket.\n * //-\n * bucket.iam.getPolicy(function(err, policy) {\n *   console.log(policy);\n * });\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * bucket.iam.getPolicy().then(function(data) {\n *   const policy = data[0];\n *   const apiResponse = data[1];\n * });\n *\n * ```\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_view_bucket_iam_members\n * Example of retrieving a bucket's IAM policy:\n *\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_add_bucket_iam_member\n * Example of adding to a bucket's IAM policy:\n *\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_remove_bucket_iam_member\n * Example of removing from a bucket's IAM policy:\n */\n/**\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share objects with other\n * users and allow other users to access your buckets and objects.\n *\n * An ACL consists of one or more entries, where each entry grants permissions\n * to an entity. Permissions define the actions that can be performed against\n * an object or bucket (for example, `READ` or `WRITE`); the entity defines\n * who the permission applies to (for example, a specific user or group of\n * users).\n *\n * The `acl` object on a Bucket instance provides methods to get you a list of\n * the ACLs defined on your bucket, as well as set, update, and delete them.\n *\n * Buckets also have\n * {@link https://cloud.google.com/storage/docs/access-control/lists#default| default ACLs}\n * for all created files. Default ACLs specify permissions that all new\n * objects added to the bucket will inherit by default. You can add, delete,\n * get, and update entities and permissions for these as well with\n * {@link Bucket#acl.default}.\n *\n * See {@link http://goo.gl/6qBBPO| About Access Control Lists}\n * See {@link https://cloud.google.com/storage/docs/access-control/lists#default| Default ACLs}\n *\n * @name Bucket#acl\n * @mixes Acl\n * @property {Acl} default Cloud Storage Buckets have\n * {@link https://cloud.google.com/storage/docs/access-control/lists#default| default ACLs}\n * for all created files. You can add, delete, get, and update entities and\n * permissions for these as well. The method signatures and examples are all\n * the same, after only prefixing the method call with `default`.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n *\n * //-\n * // Make a bucket's contents publicly readable.\n * //-\n * const myBucket = storage.bucket('my-bucket');\n *\n * const options = {\n *   entity: 'allUsers',\n *   role: storage.acl.READER_ROLE\n * };\n *\n * myBucket.acl.add(options, function(err, aclObject) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * myBucket.acl.add(options).then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n *\n * ```\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_print_bucket_acl\n * Example of printing a bucket's ACL:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_print_bucket_acl_for_user\n * Example of printing a bucket's ACL for a specific user:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_add_bucket_owner\n * Example of adding an owner to a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_remove_bucket_owner\n * Example of removing an owner from a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_add_bucket_default_owner\n * Example of adding a default owner to a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_remove_bucket_default_owner\n * Example of removing a default owner from a bucket:\n */\n/**\n * The API-formatted resource description of the bucket.\n *\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\n * latest record, call the `getMetadata()` method.\n *\n * @name Bucket#metadata\n * @type {object}\n */\n/**\n * The bucket's name.\n * @name Bucket#name\n * @type {string}\n */\n/**\n * Get {@link File} objects for the files currently in the bucket as a\n * readable object stream.\n *\n * @method Bucket#getFilesStream\n * @param {GetFilesOptions} [query] Query object for listing files.\n * @returns {ReadableStream} A readable stream that emits {@link File} instances.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n *\n * bucket.getFilesStream()\n *   .on('error', console.error)\n *   .on('data', function(file) {\n *     // file is a File object.\n *   })\n *   .on('end', function() {\n *     // All files retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * bucket.getFilesStream()\n *   .on('data', function(file) {\n *     this.end();\n *   });\n *\n * //-\n * // If you're filtering files with a delimiter, you should use\n * // {@link Bucket#getFiles} and set `autoPaginate: false` in order to\n * // preserve the `apiResponse` argument.\n * //-\n * const prefixes = [];\n *\n * function callback(err, files, nextQuery, apiResponse) {\n *   prefixes = prefixes.concat(apiResponse.prefixes);\n *\n *   if (nextQuery) {\n *     bucket.getFiles(nextQuery, callback);\n *   } else {\n *     // prefixes = The finished array of prefixes.\n *   }\n * }\n *\n * bucket.getFiles({\n *   autoPaginate: false,\n *   delimiter: '/'\n * }, callback);\n * ```\n */\n/**\n * Create a Bucket object to interact with a Cloud Storage bucket.\n *\n * @class\n * @hideconstructor\n *\n * @param {Storage} storage A {@link Storage} instance.\n * @param {string} name The name of the bucket.\n * @param {object} [options] Configuration object.\n * @param {string} [options.userProject] User project.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n * ```\n */\nclass Bucket extends index_js_1.ServiceObject {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getFilesStream(query) {\n    // placeholder body, overwritten in constructor\n    return new stream_1.Readable();\n  }\n  constructor(storage, name, options) {\n    var _a, _b, _c, _d;\n    options = options || {};\n    // Allow for \"gs://\"-style input, and strip any trailing slashes.\n    name = name.replace(/^gs:\\/\\//, '').replace(/\\/+$/, '');\n    const requestQueryObject = {};\n    if ((_a = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) {\n      requestQueryObject.ifGenerationMatch = options.preconditionOpts.ifGenerationMatch;\n    }\n    if ((_b = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationNotMatch) {\n      requestQueryObject.ifGenerationNotMatch = options.preconditionOpts.ifGenerationNotMatch;\n    }\n    if ((_c = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _c === void 0 ? void 0 : _c.ifMetagenerationMatch) {\n      requestQueryObject.ifMetagenerationMatch = options.preconditionOpts.ifMetagenerationMatch;\n    }\n    if ((_d = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _d === void 0 ? void 0 : _d.ifMetagenerationNotMatch) {\n      requestQueryObject.ifMetagenerationNotMatch = options.preconditionOpts.ifMetagenerationNotMatch;\n    }\n    const userProject = options.userProject;\n    if (typeof userProject === 'string') {\n      requestQueryObject.userProject = userProject;\n    }\n    const methods = {\n      /**\n       * Create a bucket.\n       *\n       * @method Bucket#create\n       * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\n       * @param {CreateBucketCallback} [callback] Callback function.\n       * @returns {Promise<CreateBucketResponse>}\n       *\n       * @example\n       * ```\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const bucket = storage.bucket('albums');\n       * bucket.create(function(err, bucket, apiResponse) {\n       *   if (!err) {\n       *     // The bucket was created successfully.\n       *   }\n       * });\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * bucket.create().then(function(data) {\n       *   const bucket = data[0];\n       *   const apiResponse = data[1];\n       * });\n       * ```\n       */\n      create: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n      /**\n       * IamDeleteBucketOptions Configuration options.\n       * @property {boolean} [ignoreNotFound = false] Ignore an error if\n       *     the bucket does not exist.\n       * @property {string} [userProject] The ID of the project which will be\n       *     billed for the request.\n       */\n      /**\n       * @typedef {array} DeleteBucketResponse\n       * @property {object} 0 The full API response.\n       */\n      /**\n       * @callback DeleteBucketCallback\n       * @param {?Error} err Request error, if any.\n       * @param {object} apiResponse The full API response.\n       */\n      /**\n       * Delete the bucket.\n       *\n       * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/delete| Buckets: delete API Documentation}\n       *\n       * @method Bucket#delete\n       * @param {DeleteBucketOptions} [options] Configuration options.\n       * @param {boolean} [options.ignoreNotFound = false] Ignore an error if\n       *     the bucket does not exist.\n       * @param {string} [options.userProject] The ID of the project which will be\n       *     billed for the request.\n       * @param {DeleteBucketCallback} [callback] Callback function.\n       * @returns {Promise<DeleteBucketResponse>}\n       *\n       * @example\n       * ```\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const bucket = storage.bucket('albums');\n       * bucket.delete(function(err, apiResponse) {});\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * bucket.delete().then(function(data) {\n       *   const apiResponse = data[0];\n       * });\n       *\n       * ```\n       * @example <caption>include:samples/buckets.js</caption>\n       * region_tag:storage_delete_bucket\n       * Another example:\n       */\n      delete: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n      /**\n       * @typedef {object} BucketExistsOptions Configuration options for Bucket#exists().\n       * @property {string} [userProject] The ID of the project which will be\n       *     billed for the request.\n       */\n      /**\n       * @typedef {array} BucketExistsResponse\n       * @property {boolean} 0 Whether the {@link Bucket} exists.\n       */\n      /**\n       * @callback BucketExistsCallback\n       * @param {?Error} err Request error, if any.\n       * @param {boolean} exists Whether the {@link Bucket} exists.\n       */\n      /**\n       * Check if the bucket exists.\n       *\n       * @method Bucket#exists\n       * @param {BucketExistsOptions} [options] Configuration options.\n       * @param {string} [options.userProject] The ID of the project which will be\n       *     billed for the request.\n       * @param {BucketExistsCallback} [callback] Callback function.\n       * @returns {Promise<BucketExistsResponse>}\n       *\n       * @example\n       * ```\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const bucket = storage.bucket('albums');\n       *\n       * bucket.exists(function(err, exists) {});\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * bucket.exists().then(function(data) {\n       *   const exists = data[0];\n       * });\n       * ```\n       */\n      exists: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n      /**\n       * @typedef {object} [GetBucketOptions] Configuration options for Bucket#get()\n       * @property {boolean} [autoCreate] Automatically create the object if\n       *     it does not exist. Default: `false`\n       * @property {string} [userProject] The ID of the project which will be\n       *     billed for the request.\n       */\n      /**\n       * @typedef {array} GetBucketResponse\n       * @property {Bucket} 0 The {@link Bucket}.\n       * @property {object} 1 The full API response.\n       */\n      /**\n       * @callback GetBucketCallback\n       * @param {?Error} err Request error, if any.\n       * @param {Bucket} bucket The {@link Bucket}.\n       * @param {object} apiResponse The full API response.\n       */\n      /**\n       * Get a bucket if it exists.\n       *\n       * You may optionally use this to \"get or create\" an object by providing\n       * an object with `autoCreate` set to `true`. Any extra configuration that\n       * is normally required for the `create` method must be contained within\n       * this object as well.\n       *\n       * @method Bucket#get\n       * @param {GetBucketOptions} [options] Configuration options.\n       * @param {boolean} [options.autoCreate] Automatically create the object if\n       *     it does not exist. Default: `false`\n       * @param {string} [options.userProject] The ID of the project which will be\n       *     billed for the request.\n       * @param {GetBucketCallback} [callback] Callback function.\n       * @returns {Promise<GetBucketResponse>}\n       *\n       * @example\n       * ```\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const bucket = storage.bucket('albums');\n       *\n       * bucket.get(function(err, bucket, apiResponse) {\n       *   // `bucket.metadata` has been populated.\n       * });\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * bucket.get().then(function(data) {\n       *   const bucket = data[0];\n       *   const apiResponse = data[1];\n       * });\n       * ```\n       */\n      get: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n      /**\n       * @typedef {array} GetBucketMetadataResponse\n       * @property {object} 0 The bucket metadata.\n       * @property {object} 1 The full API response.\n       */\n      /**\n       * @callback GetBucketMetadataCallback\n       * @param {?Error} err Request error, if any.\n       * @param {object} metadata The bucket metadata.\n       * @param {object} apiResponse The full API response.\n       */\n      /**\n       * @typedef {object} GetBucketMetadataOptions Configuration options for Bucket#getMetadata().\n       * @property {string} [userProject] The ID of the project which will be\n       *     billed for the request.\n       */\n      /**\n       * Get the bucket's metadata.\n       *\n       * To set metadata, see {@link Bucket#setMetadata}.\n       *\n       * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/get| Buckets: get API Documentation}\n       *\n       * @method Bucket#getMetadata\n       * @param {GetBucketMetadataOptions} [options] Configuration options.\n       * @param {string} [options.userProject] The ID of the project which will be\n       *     billed for the request.\n       * @param {GetBucketMetadataCallback} [callback] Callback function.\n       * @returns {Promise<GetBucketMetadataResponse>}\n       *\n       * @example\n       * ```\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const bucket = storage.bucket('albums');\n       *\n       * bucket.getMetadata(function(err, metadata, apiResponse) {});\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * bucket.getMetadata().then(function(data) {\n       *   const metadata = data[0];\n       *   const apiResponse = data[1];\n       * });\n       *\n       * ```\n       * @example <caption>include:samples/requesterPays.js</caption>\n       * region_tag:storage_get_requester_pays_status\n       * Example of retrieving the requester pays status of a bucket:\n       */\n      getMetadata: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      },\n      /**\n       * @typedef {object} SetBucketMetadataOptions Configuration options for Bucket#setMetadata().\n       * @property {string} [userProject] The ID of the project which will be\n       *     billed for the request.\n       */\n      /**\n       * @typedef {array} SetBucketMetadataResponse\n       * @property {object} apiResponse The full API response.\n       */\n      /**\n       * @callback SetBucketMetadataCallback\n       * @param {?Error} err Request error, if any.\n       * @param {object} metadata The bucket metadata.\n       */\n      /**\n       * Set the bucket's metadata.\n       *\n       * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n       *\n       * @method Bucket#setMetadata\n       * @param {object<string, *>} metadata The metadata you wish to set.\n       * @param {SetBucketMetadataOptions} [options] Configuration options.\n       * @param {string} [options.userProject] The ID of the project which will be\n       *     billed for the request.\n       * @param {SetBucketMetadataCallback} [callback] Callback function.\n       * @returns {Promise<SetBucketMetadataResponse>}\n       *\n       * @example\n       * ```\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const bucket = storage.bucket('albums');\n       *\n       * //-\n       * // Set website metadata field on the bucket.\n       * //-\n       * const metadata = {\n       *   website: {\n       *     mainPageSuffix: 'http://example.com',\n       *     notFoundPage: 'http://example.com/404.html'\n       *   }\n       * };\n       *\n       * bucket.setMetadata(metadata, function(err, apiResponse) {});\n       *\n       * //-\n       * // Enable versioning for your bucket.\n       * //-\n       * bucket.setMetadata({\n       *   versioning: {\n       *     enabled: true\n       *   }\n       * }, function(err, apiResponse) {});\n       *\n       * //-\n       * // Enable KMS encryption for objects within this bucket.\n       * //-\n       * bucket.setMetadata({\n       *   encryption: {\n       *     defaultKmsKeyName: 'projects/grape-spaceship-123/...'\n       *   }\n       * }, function(err, apiResponse) {});\n       *\n       * //-\n       * // Set the default event-based hold value for new objects in this\n       * // bucket.\n       * //-\n       * bucket.setMetadata({\n       *   defaultEventBasedHold: true\n       * }, function(err, apiResponse) {});\n       *\n       * //-\n       * // Remove object lifecycle rules.\n       * //-\n       * bucket.setMetadata({\n       *   lifecycle: null\n       * }, function(err, apiResponse) {});\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * bucket.setMetadata(metadata).then(function(data) {\n       *   const apiResponse = data[0];\n       * });\n       * ```\n       */\n      setMetadata: {\n        reqOpts: {\n          qs: requestQueryObject\n        }\n      }\n    };\n    super({\n      parent: storage,\n      baseUrl: '/b',\n      id: name,\n      createMethod: storage.createBucket.bind(storage),\n      methods\n    });\n    this.name = name;\n    this.storage = storage;\n    this.userProject = options.userProject;\n    this.acl = new acl_js_1.Acl({\n      request: this.request.bind(this),\n      pathPrefix: '/acl'\n    });\n    this.acl.default = new acl_js_1.Acl({\n      request: this.request.bind(this),\n      pathPrefix: '/defaultObjectAcl'\n    });\n    this.crc32cGenerator = options.crc32cGenerator || this.storage.crc32cGenerator;\n    this.iam = new iam_js_1.Iam(this);\n    this.getFilesStream = paginator_1.paginator.streamify('getFiles');\n    this.instanceRetryValue = storage.retryOptions.autoRetry;\n    this.instancePreconditionOpts = options === null || options === void 0 ? void 0 : options.preconditionOpts;\n  }\n  /**\n   * The bucket's Cloud Storage URI (`gs://`)\n   *\n   * @example\n   * ```ts\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('my-bucket');\n   *\n   * // `gs://my-bucket`\n   * const href = bucket.cloudStorageURI.href;\n   * ```\n   */\n  get cloudStorageURI() {\n    const uri = new url_1.URL('gs://');\n    uri.host = this.name;\n    return uri;\n  }\n  /**\n   * @typedef {object} AddLifecycleRuleOptions Configuration options for Bucket#addLifecycleRule().\n   * @property {boolean} [append=true] The new rules will be appended to any\n   *     pre-existing rules.\n   */\n  /**\n   *\n   * @typedef {object} LifecycleRule The new lifecycle rule to be added to objects\n   *     in this bucket.\n   * @property {string|object} action The action to be taken upon matching of\n   *     all the conditions 'delete', 'setStorageClass', or 'AbortIncompleteMultipartUpload'.\n   *     **Note**: For configuring a raw-formatted rule object to be passed as `action`\n   *               please refer to the [examples]{@link https://cloud.google.com/storage/docs/managing-lifecycles#configexamples}.\n   * @property {object} condition Condition a bucket must meet before the\n   *     action occurs on the bucket. Refer to following supported [conditions]{@link https://cloud.google.com/storage/docs/lifecycle#conditions}.\n   * @property {string} [storageClass] When using the `setStorageClass`\n   *     action, provide this option to dictate which storage class the object\n   *     should update to. Please see\n   *     [SetStorageClass option documentation]{@link https://cloud.google.com/storage/docs/lifecycle#setstorageclass} for supported transitions.\n   */\n  /**\n   * Add an object lifecycle management rule to the bucket.\n   *\n   * By default, an Object Lifecycle Management rule provided to this method\n   * will be included to the existing policy. To replace all existing rules,\n   * supply the `options` argument, setting `append` to `false`.\n   *\n   * To add multiple rules, pass a list to the `rule` parameter. Calling this\n   * function multiple times asynchronously does not guarantee that all rules\n   * are added correctly.\n   *\n   * See {@link https://cloud.google.com/storage/docs/lifecycle| Object Lifecycle Management}\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n   *\n   * @param {LifecycleRule|LifecycleRule[]} rule The new lifecycle rule or rules to be added to objects\n   *     in this bucket.\n   * @param {string|object} rule.action The action to be taken upon matching of\n   *     all the conditions 'delete', 'setStorageClass', or 'AbortIncompleteMultipartUpload'.\n   *     **Note**: For configuring a raw-formatted rule object to be passed as `action`\n   *               please refer to the [examples]{@link https://cloud.google.com/storage/docs/managing-lifecycles#configexamples}.\n   * @param {object} rule.condition Condition a bucket must meet before the\n   *     action occurson the bucket. Refer to followitn supported [conditions]{@link https://cloud.google.com/storage/docs/lifecycle#conditions}.\n   * @param {string} [rule.storageClass] When using the `setStorageClass`\n   *     action, provide this option to dictate which storage class the object\n   *     should update to.\n   * @param {AddLifecycleRuleOptions} [options] Configuration object.\n   * @param {boolean} [options.append=true] Append the new rule to the existing\n   *     policy.\n   * @param {SetBucketMetadataCallback} [callback] Callback function.\n   * @returns {Promise<SetBucketMetadataResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * //-\n   * // Automatically have an object deleted from this bucket once it is 3 years\n   * // of age.\n   * //-\n   * bucket.addLifecycleRule({\n   *   action: 'delete',\n   *   condition: {\n   *     age: 365 * 3 // Specified in days.\n   *   }\n   * }, function(err, apiResponse) {\n   *   if (err) {\n   *     // Error handling omitted.\n   *   }\n   *\n   *   const lifecycleRules = bucket.metadata.lifecycle.rule;\n   *\n   *   // Iterate over the Object Lifecycle Management rules on this bucket.\n   *   lifecycleRules.forEach(lifecycleRule => {});\n   * });\n   *\n   * //-\n   * // By default, the rule you provide will be added to the existing policy.\n   * // Optionally, you can disable this behavior to replace all of the\n   * // pre-existing rules.\n   * //-\n   * const options = {\n   *   append: false\n   * };\n   *\n   * bucket.addLifecycleRule({\n   *   action: 'delete',\n   *   condition: {\n   *     age: 365 * 3 // Specified in days.\n   *   }\n   * }, options, function(err, apiResponse) {\n   *   if (err) {\n   *     // Error handling omitted.\n   *   }\n   *\n   *   // All rules have been replaced with the new \"delete\" rule.\n   *\n   *   // Iterate over the Object Lifecycle Management rules on this bucket.\n   *   lifecycleRules.forEach(lifecycleRule => {});\n   * });\n   *\n   * //-\n   * // For objects created before 2018, \"downgrade\" the storage class.\n   * //-\n   * bucket.addLifecycleRule({\n   *   action: 'setStorageClass',\n   *   storageClass: 'COLDLINE',\n   *   condition: {\n   *     createdBefore: new Date('2018')\n   *   }\n   * }, function(err, apiResponse) {});\n   *\n   * //-\n   * // Delete objects created before 2016 which have the Coldline storage\n   * // class.\n   * //-\n   * bucket.addLifecycleRule({\n   *   action: 'delete',\n   *   condition: {\n   *     matchesStorageClass: [\n   *       'COLDLINE'\n   *     ],\n   *     createdBefore: new Date('2016')\n   *   }\n   * }, function(err, apiResponse) {});\n   *\n   * //-\n   * // Delete object that has a noncurrent timestamp that is at least 100 days.\n   * //-\n   * bucket.addLifecycleRule({\n   *   action: 'delete',\n   *   condition: {\n   *     daysSinceNoncurrentTime: 100\n   *   }\n   * }, function(err, apiResponse) {});\n   *\n   * //-\n   * // Delete object that has a noncurrent timestamp before 2020-01-01.\n   * //-\n   * bucket.addLifecycleRule({\n   *   action: 'delete',\n   *   condition: {\n   *     noncurrentTimeBefore: new Date('2020-01-01')\n   *   }\n   * }, function(err, apiResponse) {});\n   *\n   * //-\n   * // Delete object that has a customTime that is at least 100 days.\n   * //-\n   * bucket.addLifecycleRule({\n   *   action: 'delete',\n   *   condition: {\n   *     daysSinceCustomTime: 100\n   *   }\n   * }, function(err, apiResponse) ());\n   *\n   * //-\n   * // Delete object that has a customTime before 2020-01-01.\n   * //-\n   * bucket.addLifecycleRule({\n   *   action: 'delete',\n   *   condition: {\n   *     customTimeBefore: new Date('2020-01-01')\n   *   }\n   * }, function(err, apiResponse) {});\n   * ```\n   */\n  addLifecycleRule(rule, optionsOrCallback, callback) {\n    let options = {};\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    const rules = Array.isArray(rule) ? rule : [rule];\n    for (const curRule of rules) {\n      if (curRule.condition.createdBefore instanceof Date) {\n        curRule.condition.createdBefore = curRule.condition.createdBefore.toISOString().replace(/T.+$/, '');\n      }\n      if (curRule.condition.customTimeBefore instanceof Date) {\n        curRule.condition.customTimeBefore = curRule.condition.customTimeBefore.toISOString().replace(/T.+$/, '');\n      }\n      if (curRule.condition.noncurrentTimeBefore instanceof Date) {\n        curRule.condition.noncurrentTimeBefore = curRule.condition.noncurrentTimeBefore.toISOString().replace(/T.+$/, '');\n      }\n    }\n    if (options.append === false) {\n      this.setMetadata({\n        lifecycle: {\n          rule: rules\n        }\n      }, options, callback);\n      return;\n    }\n    // The default behavior appends the previously-defined lifecycle rules with\n    // the new ones just passed in by the user.\n    this.getMetadata((err, metadata) => {\n      var _a, _b;\n      if (err) {\n        callback(err);\n        return;\n      }\n      const currentLifecycleRules = Array.isArray((_a = metadata.lifecycle) === null || _a === void 0 ? void 0 : _a.rule) ? (_b = metadata.lifecycle) === null || _b === void 0 ? void 0 : _b.rule : [];\n      this.setMetadata({\n        lifecycle: {\n          rule: currentLifecycleRules.concat(rules)\n        }\n      }, options, callback);\n    });\n  }\n  /**\n   * @typedef {object} CombineOptions\n   * @property {string} [kmsKeyName] Resource name of the Cloud KMS key, of\n   *     the form\n   *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\n   *     that will be used to encrypt the object. Overwrites the object\n   * metadata's `kms_key_name` value, if any.\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   */\n  /**\n   * @callback CombineCallback\n   * @param {?Error} err Request error, if any.\n   * @param {File} newFile The new {@link File}.\n   * @param {object} apiResponse The full API response.\n   */\n  /**\n   * @typedef {array} CombineResponse\n   * @property {File} 0 The new {@link File}.\n   * @property {object} 1 The full API response.\n   */\n  /**\n   * Combine multiple files into one new file.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/compose| Objects: compose API Documentation}\n   *\n   * @throws {Error} if a non-array is provided as sources argument.\n   * @throws {Error} if no sources are provided.\n   * @throws {Error} if no destination is provided.\n   *\n   * @param {string[]|File[]} sources The source files that will be\n   *     combined.\n   * @param {string|File} destination The file you would like the\n   *     source files combined into.\n   * @param {CombineOptions} [options] Configuration options.\n   * @param {string} [options.kmsKeyName] Resource name of the Cloud KMS key, of\n   *     the form\n   *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\n   *     that will be used to encrypt the object. Overwrites the object\n   * metadata's `kms_key_name` value, if any.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n      * @param {CombineCallback} [callback] Callback function.\n   * @returns {Promise<CombineResponse>}\n   *\n   * @example\n   * ```\n   * const logBucket = storage.bucket('log-bucket');\n   *\n   * const sources = [\n   *   logBucket.file('2013-logs.txt'),\n   *   logBucket.file('2014-logs.txt')\n   * ];\n   *\n   * const allLogs = logBucket.file('all-logs.txt');\n   *\n   * logBucket.combine(sources, allLogs, function(err, newFile, apiResponse) {\n   *   // newFile === allLogs\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * logBucket.combine(sources, allLogs).then(function(data) {\n   *   const newFile = data[0];\n   *   const apiResponse = data[1];\n   * });\n   * ```\n   */\n  combine(sources, destination, optionsOrCallback, callback) {\n    var _a;\n    if (!Array.isArray(sources) || sources.length === 0) {\n      throw new Error(BucketExceptionMessages.PROVIDE_SOURCE_FILE);\n    }\n    if (!destination) {\n      throw new Error(BucketExceptionMessages.DESTINATION_FILE_NOT_SPECIFIED);\n    }\n    let options = {};\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n    this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata,\n    // Not relevant but param is required\n    AvailableServiceObjectMethods.setMetadata,\n    // Same as above\n    options);\n    const convertToFile = file => {\n      if (file instanceof file_js_1.File) {\n        return file;\n      }\n      return this.file(file);\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    sources = sources.map(convertToFile);\n    const destinationFile = convertToFile(destination);\n    callback = callback || index_js_1.util.noop;\n    if (!destinationFile.metadata.contentType) {\n      const destinationContentType = mime_1.default.getType(destinationFile.name) || undefined;\n      if (destinationContentType) {\n        destinationFile.metadata.contentType = destinationContentType;\n      }\n    }\n    let maxRetries = this.storage.retryOptions.maxRetries;\n    if (((_a = destinationFile === null || destinationFile === void 0 ? void 0 : destinationFile.instancePreconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) === undefined && options.ifGenerationMatch === undefined && this.storage.retryOptions.idempotencyStrategy === storage_js_1.IdempotencyStrategy.RetryConditional || this.storage.retryOptions.idempotencyStrategy === storage_js_1.IdempotencyStrategy.RetryNever) {\n      maxRetries = 0;\n    }\n    if (options.ifGenerationMatch === undefined) {\n      Object.assign(options, destinationFile.instancePreconditionOpts, options);\n    }\n    // Make the request from the destination File object.\n    destinationFile.request({\n      method: 'POST',\n      uri: '/compose',\n      maxRetries,\n      json: {\n        destination: {\n          contentType: destinationFile.metadata.contentType,\n          contentEncoding: destinationFile.metadata.contentEncoding\n        },\n        sourceObjects: sources.map(source => {\n          const sourceObject = {\n            name: source.name\n          };\n          if (source.metadata && source.metadata.generation) {\n            sourceObject.generation = parseInt(source.metadata.generation.toString());\n          }\n          return sourceObject;\n        })\n      },\n      qs: options\n    }, (err, resp) => {\n      this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n      callback(null, destinationFile, resp);\n    });\n  }\n  /**\n   * See a {@link https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll| Objects: watchAll request body}.\n   *\n   * @typedef {object} CreateChannelConfig\n   * @property {string} address The address where notifications are\n   *     delivered for this channel.\n   * @property {string} [delimiter] Returns results in a directory-like mode.\n   * @property {number} [maxResults] Maximum number of `items` plus `prefixes`\n   *     to return in a single page of responses.\n   * @property {string} [pageToken] A previously-returned page token\n   *     representing part of the larger set of results to view.\n   * @property {string} [prefix] Filter results to objects whose names begin\n   *     with this prefix.\n   * @property {string} [projection=noAcl] Set of properties to return.\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   * @property {boolean} [versions=false] If `true`, lists all versions of an object\n   *     as distinct results.\n   */\n  /**\n   * @typedef {object} CreateChannelOptions\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   */\n  /**\n   * @typedef {array} CreateChannelResponse\n   * @property {Channel} 0 The new {@link Channel}.\n   * @property {object} 1 The full API response.\n   */\n  /**\n   * @callback CreateChannelCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Channel} channel The new {@link Channel}.\n   * @param {object} apiResponse The full API response.\n   */\n  /**\n   * Create a channel that will be notified when objects in this bucket changes.\n   *\n   * @throws {Error} If an ID is not provided.\n   * @throws {Error} If an address is not provided.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll| Objects: watchAll API Documentation}\n   *\n   * @param {string} id The ID of the channel to create.\n   * @param {CreateChannelConfig} config Configuration for creating channel.\n   * @param {string} config.address The address where notifications are\n   *     delivered for this channel.\n   * @param {string} [config.delimiter] Returns results in a directory-like mode.\n   * @param {number} [config.maxResults] Maximum number of `items` plus `prefixes`\n   *     to return in a single page of responses.\n   * @param {string} [config.pageToken] A previously-returned page token\n   *     representing part of the larger set of results to view.\n   * @param {string} [config.prefix] Filter results to objects whose names begin\n   *     with this prefix.\n   * @param {string} [config.projection=noAcl] Set of properties to return.\n   * @param {string} [config.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {boolean} [config.versions=false] If `true`, lists all versions of an object\n   *     as distinct results.\n   * @param {CreateChannelOptions} [options] Configuration options.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {CreateChannelCallback} [callback] Callback function.\n   * @returns {Promise<CreateChannelResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   * const id = 'new-channel-id';\n   *\n   * const config = {\n   *   address: 'https://...'\n   * };\n   *\n   * bucket.createChannel(id, config, function(err, channel, apiResponse) {\n   *   if (!err) {\n   *     // Channel created successfully.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.createChannel(id, config).then(function(data) {\n   *   const channel = data[0];\n   *   const apiResponse = data[1];\n   * });\n   * ```\n   */\n  createChannel(id, config, optionsOrCallback, callback) {\n    if (typeof id !== 'string') {\n      throw new Error(BucketExceptionMessages.CHANNEL_ID_REQUIRED);\n    }\n    let options = {};\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n    this.request({\n      method: 'POST',\n      uri: '/o/watch',\n      json: Object.assign({\n        id,\n        type: 'web_hook'\n      }, config),\n      qs: options\n    }, (err, apiResponse) => {\n      if (err) {\n        callback(err, null, apiResponse);\n        return;\n      }\n      const resourceId = apiResponse.resourceId;\n      const channel = this.storage.channel(id, resourceId);\n      channel.metadata = apiResponse;\n      callback(null, channel, apiResponse);\n    });\n  }\n  /**\n   * Metadata to set for the Notification.\n   *\n   * @typedef {object} CreateNotificationOptions\n   * @property {object} [customAttributes] An optional list of additional\n   *     attributes to attach to each Cloud PubSub message published for this\n   *     notification subscription.\n   * @property {string[]} [eventTypes] If present, only send notifications about\n   *     listed event types. If empty, sent notifications for all event types.\n   * @property {string} [objectNamePrefix] If present, only apply this\n   *     notification configuration to object names that begin with this prefix.\n   * @property {string} [payloadFormat] The desired content of the Payload.\n   * Defaults to `JSON_API_V1`.\n   *\n   * Acceptable values are:\n   * - `JSON_API_V1`\n   *\n   * - `NONE`\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   */\n  /**\n   * @callback CreateNotificationCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Notification} notification The new {@link Notification}.\n   * @param {object} apiResponse The full API response.\n   */\n  /**\n   * @typedef {array} CreateNotificationResponse\n   * @property {Notification} 0 The new {@link Notification}.\n   * @property {object} 1 The full API response.\n   */\n  /**\n   * Creates a notification subscription for the bucket.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert| Notifications: insert}\n   *\n   * @param {Topic|string} topic The Cloud PubSub topic to which this\n   * subscription publishes. If the project ID is omitted, the current\n   * project ID will be used.\n   *\n   * Acceptable formats are:\n   * - `projects/grape-spaceship-123/topics/my-topic`\n   *\n   * - `my-topic`\n   * @param {CreateNotificationOptions} [options] Metadata to set for the\n   *     notification.\n   * @param {object} [options.customAttributes] An optional list of additional\n   *     attributes to attach to each Cloud PubSub message published for this\n   *     notification subscription.\n   * @param {string[]} [options.eventTypes] If present, only send notifications about\n   *     listed event types. If empty, sent notifications for all event types.\n   * @param {string} [options.objectNamePrefix] If present, only apply this\n   *     notification configuration to object names that begin with this prefix.\n   * @param {string} [options.payloadFormat] The desired content of the Payload.\n   * Defaults to `JSON_API_V1`.\n   *\n   * Acceptable values are:\n   * - `JSON_API_V1`\n   *\n   * - `NONE`\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {CreateNotificationCallback} [callback] Callback function.\n   * @returns {Promise<CreateNotificationResponse>}\n   * @throws {Error} If a valid topic is not provided.\n   * @see Notification#create\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const myBucket = storage.bucket('my-bucket');\n   *\n   * const callback = function(err, notification, apiResponse) {\n   *   if (!err) {\n   *     // The notification was created successfully.\n   *   }\n   * };\n   *\n   * myBucket.createNotification('my-topic', callback);\n   *\n   * //-\n   * // Configure the nofiication by providing Notification metadata.\n   * //-\n   * const metadata = {\n   *   objectNamePrefix: 'prefix-'\n   * };\n   *\n   * myBucket.createNotification('my-topic', metadata, callback);\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * myBucket.createNotification('my-topic').then(function(data) {\n   *   const notification = data[0];\n   *   const apiResponse = data[1];\n   * });\n   *\n   * ```\n   * @example <caption>include:samples/createNotification.js</caption>\n   * region_tag:storage_create_bucket_notifications\n   * Another example:\n   */\n  createNotification(topic, optionsOrCallback, callback) {\n    let options = {};\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n    const topicIsObject = topic !== null && typeof topic === 'object';\n    if (topicIsObject && index_js_1.util.isCustomType(topic, 'pubsub/topic')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      topic = topic.name;\n    }\n    if (typeof topic !== 'string') {\n      throw new Error(BucketExceptionMessages.TOPIC_NAME_REQUIRED);\n    }\n    const body = Object.assign({\n      topic\n    }, options);\n    if (body.topic.indexOf('projects') !== 0) {\n      body.topic = 'projects/{{projectId}}/topics/' + body.topic;\n    }\n    body.topic = `//pubsub.${this.storage.universeDomain}/` + body.topic;\n    if (!body.payloadFormat) {\n      body.payloadFormat = 'JSON_API_V1';\n    }\n    const query = {};\n    if (body.userProject) {\n      query.userProject = body.userProject;\n      delete body.userProject;\n    }\n    this.request({\n      method: 'POST',\n      uri: '/notificationConfigs',\n      json: (0, util_js_1.convertObjKeysToSnakeCase)(body),\n      qs: query,\n      maxRetries: 0 //explicitly set this value since this is a non-idempotent function\n    }, (err, apiResponse) => {\n      if (err) {\n        callback(err, null, apiResponse);\n        return;\n      }\n      const notification = this.notification(apiResponse.id);\n      notification.metadata = apiResponse;\n      callback(null, notification, apiResponse);\n    });\n  }\n  /**\n   * @typedef {object} DeleteFilesOptions Query object. See {@link Bucket#getFiles}\n   *     for all of the supported properties.\n   * @property {boolean} [force] Suppress errors until all files have been\n   *     processed.\n   */\n  /**\n   * @callback DeleteFilesCallback\n   * @param {?Error|?Error[]} err Request error, if any, or array of errors from\n   *     files that were not able to be deleted.\n   * @param {object} [apiResponse] The full API response.\n   */\n  /**\n   * Iterate over the bucket's files, calling `file.delete()` on each.\n   *\n   * <strong>This is not an atomic request.</strong> A delete attempt will be\n   * made for each file individually. Any one can fail, in which case only a\n   * portion of the files you intended to be deleted would have.\n   *\n   * Operations are performed in parallel, up to 10 at once. The first error\n   * breaks the loop and will execute the provided callback with it. Specify\n   * `{ force: true }` to suppress the errors until all files have had a chance\n   * to be processed.\n   *\n   * File preconditions cannot be passed to this function. It will not retry unless\n   * the idempotency strategy is set to retry always.\n   *\n   * The `query` object passed as the first argument will also be passed to\n   * {@link Bucket#getFiles}.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/delete| Objects: delete API Documentation}\n   *\n   * @param {DeleteFilesOptions} [query] Query object. See {@link Bucket#getFiles}\n   * @param {boolean} [query.force] Suppress errors until all files have been\n   *     processed.\n   * @param {DeleteFilesCallback} [callback] Callback function.\n   * @returns {Promise}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * //-\n   * // Delete all of the files in the bucket.\n   * //-\n   * bucket.deleteFiles(function(err) {});\n   *\n   * //-\n   * // By default, if a file cannot be deleted, this method will stop deleting\n   * // files from your bucket. You can override this setting with `force:\n   * // true`.\n   * //-\n   * bucket.deleteFiles({\n   *   force: true\n   * }, function(errors) {\n   *   // `errors`:\n   *   //    Array of errors if any occurred, otherwise null.\n   * });\n   *\n   * //-\n   * // The first argument to this method acts as a query to\n   * // {@link Bucket#getFiles}. As an example, you can delete files\n   * // which match a prefix.\n   * //-\n   * bucket.deleteFiles({\n   *   prefix: 'images/'\n   * }, function(err) {\n   *   if (!err) {\n   *     // All files in the `images` directory have been deleted.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.deleteFiles().then(function() {});\n   * ```\n   */\n  deleteFiles(queryOrCallback, callback) {\n    let query = {};\n    if (typeof queryOrCallback === 'function') {\n      callback = queryOrCallback;\n    } else if (queryOrCallback) {\n      query = queryOrCallback;\n    }\n    const MAX_PARALLEL_LIMIT = 10;\n    const MAX_QUEUE_SIZE = 1000;\n    const errors = [];\n    const deleteFile = file => {\n      return file.delete(query).catch(err => {\n        if (!query.force) {\n          throw err;\n        }\n        errors.push(err);\n      });\n    };\n    (async () => {\n      try {\n        let promises = [];\n        const limit = (0, p_limit_1.default)(MAX_PARALLEL_LIMIT);\n        const filesStream = this.getFilesStream(query);\n        for await (const curFile of filesStream) {\n          if (promises.length >= MAX_QUEUE_SIZE) {\n            await Promise.all(promises);\n            promises = [];\n          }\n          promises.push(limit(() => deleteFile(curFile)).catch(e => {\n            filesStream.destroy();\n            throw e;\n          }));\n        }\n        await Promise.all(promises);\n        callback(errors.length > 0 ? errors : null);\n      } catch (e) {\n        callback(e);\n        return;\n      }\n    })();\n  }\n  /**\n   * @deprecated\n   * @typedef {array} DeleteLabelsResponse\n   * @property {object} 0 The full API response.\n   */\n  /**\n   * @deprecated\n   * @callback DeleteLabelsCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} metadata Bucket's metadata.\n   */\n  /**\n   * @deprecated Use setMetadata directly\n   * Delete one or more labels from this bucket.\n   *\n   * @param {string|string[]} [labels] The labels to delete. If no labels are\n   *     provided, all of the labels are removed.\n   * @param {DeleteLabelsCallback} [callback] Callback function.\n   * @param {DeleteLabelsOptions} [options] Options, including precondition options\n   * @returns {Promise<DeleteLabelsResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * //-\n   * // Delete all of the labels from this bucket.\n   * //-\n   * bucket.deleteLabels(function(err, apiResponse) {});\n   *\n   * //-\n   * // Delete a single label.\n   * //-\n   * bucket.deleteLabels('labelone', function(err, apiResponse) {});\n   *\n   * //-\n   * // Delete a specific set of labels.\n   * //-\n   * bucket.deleteLabels([\n   *   'labelone',\n   *   'labeltwo'\n   * ], function(err, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.deleteLabels().then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   * ```\n   */\n  deleteLabels(labelsOrCallbackOrOptions, optionsOrCallback, callback) {\n    let labels = new Array();\n    let options = {};\n    if (typeof labelsOrCallbackOrOptions === 'function') {\n      callback = labelsOrCallbackOrOptions;\n    } else if (typeof labelsOrCallbackOrOptions === 'string') {\n      labels = [labelsOrCallbackOrOptions];\n    } else if (Array.isArray(labelsOrCallbackOrOptions)) {\n      labels = labelsOrCallbackOrOptions;\n    } else if (labelsOrCallbackOrOptions) {\n      options = labelsOrCallbackOrOptions;\n    }\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n    const deleteLabels = labels => {\n      const nullLabelMap = labels.reduce((nullLabelMap, labelKey) => {\n        nullLabelMap[labelKey] = null;\n        return nullLabelMap;\n      }, {});\n      if ((options === null || options === void 0 ? void 0 : options.ifMetagenerationMatch) !== undefined) {\n        this.setLabels(nullLabelMap, options, callback);\n      } else {\n        this.setLabels(nullLabelMap, callback);\n      }\n    };\n    if (labels.length === 0) {\n      this.getLabels((err, labels) => {\n        if (err) {\n          callback(err);\n          return;\n        }\n        deleteLabels(Object.keys(labels));\n      });\n    } else {\n      deleteLabels(labels);\n    }\n  }\n  /**\n   * @typedef {array} DisableRequesterPaysResponse\n   * @property {object} 0 The full API response.\n   */\n  /**\n   * @callback DisableRequesterPaysCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} apiResponse The full API response.\n   */\n  /**\n   * <div class=\"notice\">\n   *   <strong>Early Access Testers Only</strong>\n   *   <p>\n   *     This feature is not yet widely-available.\n   *   </p>\n   * </div>\n   *\n   * Disable `requesterPays` functionality from this bucket.\n   *\n   * @param {DisableRequesterPaysCallback} [callback] Callback function.\n   * @param {DisableRequesterPaysOptions} [options] Options, including precondition options\n   * @returns {Promise<DisableRequesterPaysCallback>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * bucket.disableRequesterPays(function(err, apiResponse) {\n   *   if (!err) {\n   *     // requesterPays functionality disabled successfully.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.disableRequesterPays().then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   *\n   * ```\n   * @example <caption>include:samples/requesterPays.js</caption>\n   * region_tag:storage_disable_requester_pays\n   * Example of disabling requester pays:\n   */\n  disableRequesterPays(optionsOrCallback, callback) {\n    let options = {};\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n    this.setMetadata({\n      billing: {\n        requesterPays: false\n      }\n    }, options, callback);\n  }\n  /**\n   * Configuration object for enabling logging.\n   *\n   * @typedef {object} EnableLoggingOptions\n   * @property {string|Bucket} [bucket] The bucket for the log entries. By\n   *     default, the current bucket is used.\n   * @property {string} prefix A unique prefix for log object names.\n   */\n  /**\n   * Enable logging functionality for this bucket. This will make two API\n   * requests, first to grant Cloud Storage WRITE permission to the bucket, then\n   * to set the appropriate configuration on the Bucket's metadata.\n   *\n   * @param {EnableLoggingOptions} config Configuration options.\n   * @param {string|Bucket} [config.bucket] The bucket for the log entries. By\n   *     default, the current bucket is used.\n   * @param {string} config.prefix A unique prefix for log object names.\n   * @param {SetBucketMetadataCallback} [callback] Callback function.\n   * @returns {Promise<SetBucketMetadataResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * const config = {\n   *   prefix: 'log'\n   * };\n   *\n   * bucket.enableLogging(config, function(err, apiResponse) {\n   *   if (!err) {\n   *     // Logging functionality enabled successfully.\n   *   }\n   * });\n   *\n   * ```\n   * @example\n   * Optionally, provide a destination bucket.\n   * ```\n   * const config = {\n   *   prefix: 'log',\n   *   bucket: 'destination-bucket'\n   * };\n   *\n   * bucket.enableLogging(config, function(err, apiResponse) {});\n   * ```\n   *\n   * @example\n   * If the callback is omitted, we'll return a Promise.\n   * ```\n   * bucket.enableLogging(config).then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   * ```\n   */\n  enableLogging(config, callback) {\n    if (!config || typeof config === 'function' || typeof config.prefix === 'undefined') {\n      throw new Error(BucketExceptionMessages.CONFIGURATION_OBJECT_PREFIX_REQUIRED);\n    }\n    let logBucket = this.id;\n    if (config.bucket && config.bucket instanceof Bucket) {\n      logBucket = config.bucket.id;\n    } else if (config.bucket && typeof config.bucket === 'string') {\n      logBucket = config.bucket;\n    }\n    const options = {};\n    if (config === null || config === void 0 ? void 0 : config.ifMetagenerationMatch) {\n      options.ifMetagenerationMatch = config.ifMetagenerationMatch;\n    }\n    if (config === null || config === void 0 ? void 0 : config.ifMetagenerationNotMatch) {\n      options.ifMetagenerationNotMatch = config.ifMetagenerationNotMatch;\n    }\n    (async () => {\n      try {\n        const [policy] = await this.iam.getPolicy();\n        policy.bindings.push({\n          members: ['group:cloud-storage-analytics@google.com'],\n          role: 'roles/storage.objectCreator'\n        });\n        await this.iam.setPolicy(policy);\n        this.setMetadata({\n          logging: {\n            logBucket,\n            logObjectPrefix: config.prefix\n          }\n        }, options, callback);\n      } catch (e) {\n        callback(e);\n        return;\n      }\n    })();\n  }\n  /**\n   * @typedef {array} EnableRequesterPaysResponse\n   * @property {object} 0 The full API response.\n   */\n  /**\n   * @callback EnableRequesterPaysCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} apiResponse The full API response.\n   */\n  /**\n   * <div class=\"notice\">\n   *   <strong>Early Access Testers Only</strong>\n   *   <p>\n   *     This feature is not yet widely-available.\n   *   </p>\n   * </div>\n   *\n   * Enable `requesterPays` functionality for this bucket. This enables you, the\n   * bucket owner, to have the requesting user assume the charges for the access\n   * to your bucket and its contents.\n   *\n   * @param {EnableRequesterPaysCallback | EnableRequesterPaysOptions} [optionsOrCallback]\n   * Callback function or precondition options.\n   * @returns {Promise<EnableRequesterPaysResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * bucket.enableRequesterPays(function(err, apiResponse) {\n   *   if (!err) {\n   *     // requesterPays functionality enabled successfully.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.enableRequesterPays().then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   *\n   * ```\n   * @example <caption>include:samples/requesterPays.js</caption>\n   * region_tag:storage_enable_requester_pays\n   * Example of enabling requester pays:\n   */\n  enableRequesterPays(optionsOrCallback, cb) {\n    let options = {};\n    if (typeof optionsOrCallback === 'function') {\n      cb = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n    this.setMetadata({\n      billing: {\n        requesterPays: true\n      }\n    }, options, cb);\n  }\n  /**\n   * Create a {@link File} object. See {@link File} to see how to handle\n   * the different use cases you may have.\n   *\n   * @param {string} name The name of the file in this bucket.\n   * @param {FileOptions} [options] Configuration options.\n   * @param {string|number} [options.generation] Only use a specific revision of\n   *     this file.\n   * @param {string} [options.encryptionKey] A custom encryption key. See\n   *     {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}.\n   * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\n   *     be used to encrypt the object. Must be in the format:\n   *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n   *     KMS key ring must use the same location as the bucket.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for all requests made from File object.\n   * @returns {File}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   * const file = bucket.file('my-existing-file.png');\n   * ```\n   */\n  file(name, options) {\n    if (!name) {\n      throw Error(BucketExceptionMessages.SPECIFY_FILE_NAME);\n    }\n    return new file_js_1.File(this, name, options);\n  }\n  /**\n   * @typedef {array} GetFilesResponse\n   * @property {File[]} 0 Array of {@link File} instances.\n   * @param {object} nextQuery 1 A query object to receive more results.\n   * @param {object} apiResponse 2 The full API response.\n   */\n  /**\n   * @callback GetFilesCallback\n   * @param {?Error} err Request error, if any.\n   * @param {File[]} files Array of {@link File} instances.\n   * @param {object} nextQuery A query object to receive more results.\n   * @param {object} apiResponse The full API response.\n   */\n  /**\n   * Query object for listing files.\n   *\n   * @typedef {object} GetFilesOptions\n   * @property {boolean} [autoPaginate=true] Have pagination handled\n   *     automatically.\n   * @property {string} [delimiter] Results will contain only objects whose\n   *     names, aside from the prefix, do not contain delimiter. Objects whose\n   *     names, aside from the prefix, contain delimiter will have their name\n   *     truncated after the delimiter, returned in `apiResponse.prefixes`.\n   *     Duplicate prefixes are omitted.\n   * @property {string} [endOffset] Filter results to objects whose names are\n   * lexicographically before endOffset. If startOffset is also set, the objects\n   * listed have names between startOffset (inclusive) and endOffset (exclusive).\n   * @property {boolean} [includeFoldersAsPrefixes] If true, includes folders and\n   * managed folders in the set of prefixes returned by the query. Only applicable if\n   * delimiter is set to / and autoPaginate is set to false.\n   * See: https://cloud.google.com/storage/docs/managed-folders\n   * @property {boolean} [includeTrailingDelimiter] If true, objects that end in\n   * exactly one instance of delimiter have their metadata included in items[]\n   * in addition to the relevant part of the object name appearing in prefixes[].\n   * @property {string} [prefix] Filter results to objects whose names begin\n   *     with this prefix.\n   * @property {string} [matchGlob] A glob pattern used to filter results,\n   *     for example foo*bar\n   * @property {number} [maxApiCalls] Maximum number of API calls to make.\n   * @property {number} [maxResults] Maximum number of items plus prefixes to\n   *     return per call.\n   *     Note: By default will handle pagination automatically\n   *     if more than 1 page worth of results are requested per call.\n   *     When `autoPaginate` is set to `false` the smaller of `maxResults`\n   *     or 1 page of results will be returned per call.\n   * @property {string} [pageToken] A previously-returned page token\n   *     representing part of the larger set of results to view.\n   * @property {boolean} [softDeleted] If true, only soft-deleted object versions will be\n   *     listed as distinct results in order of generation number. Note `soft_deleted` and\n   *     `versions` cannot be set to true simultaneously.\n   * @property {string} [startOffset] Filter results to objects whose names are\n   * lexicographically equal to or after startOffset. If endOffset is also set,\n   * the objects listed have names between startOffset (inclusive) and endOffset (exclusive).\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   * @property {boolean} [versions] If true, returns File objects scoped to\n   *     their versions.\n   */\n  /**\n   * Get {@link File} objects for the files currently in the bucket.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/list| Objects: list API Documentation}\n   *\n   * @param {GetFilesOptions} [query] Query object for listing files.\n   * @param {boolean} [query.autoPaginate=true] Have pagination handled\n   *     automatically.\n   * @param {string} [query.delimiter] Results will contain only objects whose\n   *     names, aside from the prefix, do not contain delimiter. Objects whose\n   *     names, aside from the prefix, contain delimiter will have their name\n   *     truncated after the delimiter, returned in `apiResponse.prefixes`.\n   *     Duplicate prefixes are omitted.\n   * @param {string} [query.endOffset] Filter results to objects whose names are\n   * lexicographically before endOffset. If startOffset is also set, the objects\n   * listed have names between startOffset (inclusive) and endOffset (exclusive).\n   * @param {boolean} [query.includeFoldersAsPrefixes] If true, includes folders and\n   * managed folders in the set of prefixes returned by the query. Only applicable if\n   * delimiter is set to / and autoPaginate is set to false.\n   * See: https://cloud.google.com/storage/docs/managed-folders\n   * @param {boolean} [query.includeTrailingDelimiter] If true, objects that end in\n   * exactly one instance of delimiter have their metadata included in items[]\n   * in addition to the relevant part of the object name appearing in prefixes[].\n   * @param {string} [query.prefix] Filter results to objects whose names begin\n   *     with this prefix.\n   * @param {number} [query.maxApiCalls] Maximum number of API calls to make.\n   * @param {number} [query.maxResults] Maximum number of items plus prefixes to\n   *     return per call.\n   *     Note: By default will handle pagination automatically\n   *     if more than 1 page worth of results are requested per call.\n   *     When `autoPaginate` is set to `false` the smaller of `maxResults`\n   *     or 1 page of results will be returned per call.\n   * @param {string} [query.pageToken] A previously-returned page token\n   *     representing part of the larger set of results to view.\n   * @param {boolean} [query.softDeleted] If true, only soft-deleted object versions will be\n   *     listed as distinct results in order of generation number. Note `soft_deleted` and\n   *     `versions` cannot be set to true simultaneously.\n   * @param {string} [query.startOffset] Filter results to objects whose names are\n   * lexicographically equal to or after startOffset. If endOffset is also set,\n   * the objects listed have names between startOffset (inclusive) and endOffset (exclusive).\n   * @param {string} [query.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {boolean} [query.versions] If true, returns File objects scoped to\n   *     their versions.\n   * @param {GetFilesCallback} [callback] Callback function.\n   * @returns {Promise<GetFilesResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * bucket.getFiles(function(err, files) {\n   *   if (!err) {\n   *     // files is an array of File objects.\n   *   }\n   * });\n   *\n   * //-\n   * // If your bucket has versioning enabled, you can get all of your files\n   * // scoped to their generation.\n   * //-\n   * bucket.getFiles({\n   *   versions: true\n   * }, function(err, files) {\n   *   // Each file is scoped to its generation.\n   * });\n   *\n   * //-\n   * // To control how many API requests are made and page through the results\n   * // manually, set `autoPaginate` to `false`.\n   * //-\n   * const callback = function(err, files, nextQuery, apiResponse) {\n   *   if (nextQuery) {\n   *     // More results exist.\n   *     bucket.getFiles(nextQuery, callback);\n   *   }\n   *\n   *   // The `metadata` property is populated for you with the metadata at the\n   *   // time of fetching.\n   *   files[0].metadata;\n   *\n   *   // However, in cases where you are concerned the metadata could have\n   *   // changed, use the `getMetadata` method.\n   *   files[0].getMetadata(function(err, metadata) {});\n   * };\n   *\n   * bucket.getFiles({\n   *   autoPaginate: false\n   * }, callback);\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.getFiles().then(function(data) {\n   *   const files = data[0];\n   * });\n   *\n   * ```\n   * @example\n   * <h6>Simulating a File System</h6><p>With `autoPaginate: false`, it's possible to iterate over files which incorporate a common structure using a delimiter.</p><p>Consider the following remote objects:</p><ol><li>\"a\"</li><li>\"a/b/c/d\"</li><li>\"b/d/e\"</li></ol><p>Using a delimiter of `/` will return a single file, \"a\".</p><p>`apiResponse.prefixes` will return the \"sub-directories\" that were found:</p><ol><li>\"a/\"</li><li>\"b/\"</li></ol>\n   * ```\n   * bucket.getFiles({\n   *   autoPaginate: false,\n   *   delimiter: '/'\n   * }, function(err, files, nextQuery, apiResponse) {\n   *   // files = [\n   *   //   {File} // File object for file \"a\"\n   *   // ]\n   *\n   *   // apiResponse.prefixes = [\n   *   //   'a/',\n   *   //   'b/'\n   *   // ]\n   * });\n   * ```\n   *\n   * @example\n   * Using prefixes, it's now possible to simulate a file system with follow-up requests.\n   * ```\n   * bucket.getFiles({\n   *   autoPaginate: false,\n   *   delimiter: '/',\n   *   prefix: 'a/'\n   * }, function(err, files, nextQuery, apiResponse) {\n   *   // No files found within \"directory\" a.\n   *   // files = []\n   *\n   *   // However, a \"sub-directory\" was found.\n   *   // This prefix can be used to continue traversing the \"file system\".\n   *   // apiResponse.prefixes = [\n   *   //   'a/b/'\n   *   // ]\n   * });\n   * ```\n   *\n   * @example <caption>include:samples/files.js</caption>\n   * region_tag:storage_list_files\n   * Another example:\n   *\n   * @example <caption>include:samples/files.js</caption>\n   * region_tag:storage_list_files_with_prefix\n   * Example of listing files, filtered by a prefix:\n   */\n  getFiles(queryOrCallback, callback) {\n    let query = typeof queryOrCallback === 'object' ? queryOrCallback : {};\n    if (!callback) {\n      callback = queryOrCallback;\n    }\n    query = Object.assign({}, query);\n    this.request({\n      uri: '/o',\n      qs: query\n    }, (err, resp) => {\n      if (err) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        callback(err, null, null, resp);\n        return;\n      }\n      const itemsArray = resp.items ? resp.items : [];\n      const files = itemsArray.map(file => {\n        const options = {};\n        if (query.fields) {\n          const fileInstance = file;\n          return fileInstance;\n        }\n        if (query.versions) {\n          options.generation = file.generation;\n        }\n        if (file.kmsKeyName) {\n          options.kmsKeyName = file.kmsKeyName;\n        }\n        const fileInstance = this.file(file.name, options);\n        fileInstance.metadata = file;\n        return fileInstance;\n      });\n      let nextQuery = null;\n      if (resp.nextPageToken) {\n        nextQuery = Object.assign({}, query, {\n          pageToken: resp.nextPageToken\n        });\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      callback(null, files, nextQuery, resp);\n    });\n  }\n  /**\n   * @deprecated\n   * @typedef {object} GetLabelsOptions Configuration options for Bucket#getLabels().\n   * @param {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   */\n  /**\n   * @deprecated\n   * @typedef {array} GetLabelsResponse\n   * @property {object} 0 Object of labels currently set on this bucket.\n   */\n  /**\n   * @deprecated\n   * @callback GetLabelsCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} labels Object of labels currently set on this bucket.\n   */\n  /**\n   * @deprecated Use getMetadata directly.\n   * Get the labels currently set on this bucket.\n   *\n   * @param {object} [options] Configuration options.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {GetLabelsCallback} [callback] Callback function.\n   * @returns {Promise<GetLabelsCallback>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * bucket.getLabels(function(err, labels) {\n   *   if (err) {\n   *     // Error handling omitted.\n   *   }\n   *\n   *   // labels = {\n   *   //   label: 'labelValue',\n   *   //   ...\n   *   // }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.getLabels().then(function(data) {\n   *   const labels = data[0];\n   * });\n   * ```\n   */\n  getLabels(optionsOrCallback, callback) {\n    let options = {};\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n    this.getMetadata(options, (err, metadata) => {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n      callback(null, (metadata === null || metadata === void 0 ? void 0 : metadata.labels) || {});\n    });\n  }\n  /**\n   * @typedef {object} GetNotificationsOptions Configuration options for Bucket#getNotification().\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   */\n  /**\n   * @callback GetNotificationsCallback\n   * @param {?Error} err Request error, if any.\n   * @param {Notification[]} notifications Array of {@link Notification}\n   *     instances.\n   * @param {object} apiResponse The full API response.\n   */\n  /**\n   * @typedef {array} GetNotificationsResponse\n   * @property {Notification[]} 0 Array of {@link Notification} instances.\n   * @property {object} 1 The full API response.\n   */\n  /**\n   * Retrieves a list of notification subscriptions for a given bucket.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/list| Notifications: list}\n   *\n   * @param {GetNotificationsOptions} [options] Configuration options.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {GetNotificationsCallback} [callback] Callback function.\n   * @returns {Promise<GetNotificationsResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('my-bucket');\n   *\n   * bucket.getNotifications(function(err, notifications, apiResponse) {\n   *   if (!err) {\n   *     // notifications is an array of Notification objects.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.getNotifications().then(function(data) {\n   *   const notifications = data[0];\n   *   const apiResponse = data[1];\n   * });\n   *\n   * ```\n   * @example <caption>include:samples/listNotifications.js</caption>\n   * region_tag:storage_list_bucket_notifications\n   * Another example:\n   */\n  getNotifications(optionsOrCallback, callback) {\n    let options = {};\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else if (optionsOrCallback) {\n      options = optionsOrCallback;\n    }\n    this.request({\n      uri: '/notificationConfigs',\n      qs: options\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n      const itemsArray = resp.items ? resp.items : [];\n      const notifications = itemsArray.map(notification => {\n        const notificationInstance = this.notification(notification.id);\n        notificationInstance.metadata = notification;\n        return notificationInstance;\n      });\n      callback(null, notifications, resp);\n    });\n  }\n  /**\n   * @typedef {array} GetSignedUrlResponse\n   * @property {object} 0 The signed URL.\n   */\n  /**\n   * @callback GetSignedUrlCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} url The signed URL.\n   */\n  /**\n   * @typedef {object} GetBucketSignedUrlConfig\n   * @property {string} action Only listing objects within a bucket (HTTP: GET) is supported for bucket-level signed URLs.\n   * @property {*} expires A timestamp when this link will expire. Any value\n   *     given is passed to `new Date()`.\n   *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\n   * @property {string} [version='v2'] The signing version to use, either\n   *     'v2' or 'v4'.\n   * @property {boolean} [virtualHostedStyle=false] Use virtual hosted-style\n   *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\n   *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\n   *     should generally be preferred instaed of path-style URL.\n   *     Currently defaults to `false` for path-style, although this may change in a\n   *     future major-version release.\n   * @property {string} [cname] The cname for this bucket, i.e.,\n   *     \"https://cdn.example.com\".\n   *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\n   * @property {object} [extensionHeaders] If these headers are used, the\n   * server will check to make sure that the client provides matching\n   * values. See {@link https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers| Canonical extension headers}\n   * for the requirements of this feature, most notably:\n   * - The header name must be prefixed with `x-goog-`\n   * - The header name must be all lowercase\n   *\n   * Note: Multi-valued header passed as an array in the extensionHeaders\n   *       object is converted into a string, delimited by `,` with\n   *       no space. Requests made using the signed URL will need to\n   *       delimit multi-valued headers using a single `,` as well, or\n   *       else the server will report a mismatched signature.\n   * @property {object} [queryParams] Additional query parameters to include\n   *     in the signed URL.\n   */\n  /**\n   * Get a signed URL to allow limited time access to a bucket.\n   *\n   * In Google Cloud Platform environments, such as Cloud Functions and App\n   * Engine, you usually don't provide a `keyFilename` or `credentials` during\n   * instantiation. In those environments, we call the\n   * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob| signBlob API}\n   * to create a signed URL. That API requires either the\n   * `https://www.googleapis.com/auth/iam` or\n   * `https://www.googleapis.com/auth/cloud-platform` scope, so be sure they are\n   * enabled.\n   *\n   * See {@link https://cloud.google.com/storage/docs/access-control/signed-urls| Signed URLs Reference}\n   *\n   * @throws {Error} if an expiration timestamp from the past is given.\n   *\n   * @param {GetBucketSignedUrlConfig} config Configuration object.\n   * @param {string} config.action Currently only supports \"list\" (HTTP: GET).\n   * @param {*} config.expires A timestamp when this link will expire. Any value\n   *     given is passed to `new Date()`.\n   *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\n   * @param {string} [config.version='v2'] The signing version to use, either\n   *     'v2' or 'v4'.\n   * @param {boolean} [config.virtualHostedStyle=false] Use virtual hosted-style\n   *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\n   *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\n   *     should generally be preferred instaed of path-style URL.\n   *     Currently defaults to `false` for path-style, although this may change in a\n   *     future major-version release.\n   * @param {string} [config.cname] The cname for this bucket, i.e.,\n   *     \"https://cdn.example.com\".\n   *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\n   * @param {object} [config.extensionHeaders] If these headers are used, the\n   * server will check to make sure that the client provides matching\n   * values. See {@link https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers| Canonical extension headers}\n   * for the requirements of this feature, most notably:\n   * - The header name must be prefixed with `x-goog-`\n   * - The header name must be all lowercase\n   *\n   * Note: Multi-valued header passed as an array in the extensionHeaders\n   *       object is converted into a string, delimited by `,` with\n   *       no space. Requests made using the signed URL will need to\n   *       delimit multi-valued headers using a single `,` as well, or\n   *       else the server will report a mismatched signature.\n   * @property {object} [config.queryParams] Additional query parameters to include\n   *     in the signed URL.\n   * @param {GetSignedUrlCallback} [callback] Callback function.\n   * @returns {Promise<GetSignedUrlResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const myBucket = storage.bucket('my-bucket');\n   *\n   * //-\n   * // Generate a URL that allows temporary access to list files in a bucket.\n   * //-\n   * const request = require('request');\n   *\n   * const config = {\n   *   action: 'list',\n   *   expires: '03-17-2025'\n   * };\n   *\n   * bucket.getSignedUrl(config, function(err, url) {\n   *   if (err) {\n   *     console.error(err);\n   *     return;\n   *   }\n   *\n   *   // The bucket is now available to be listed from this URL.\n   *   request(url, function(err, resp) {\n   *     // resp.statusCode = 200\n   *   });\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.getSignedUrl(config).then(function(data) {\n   *   const url = data[0];\n   * });\n   * ```\n   */\n  getSignedUrl(cfg, callback) {\n    const method = BucketActionToHTTPMethod[cfg.action];\n    const signConfig = {\n      method,\n      expires: cfg.expires,\n      version: cfg.version,\n      cname: cfg.cname,\n      extensionHeaders: cfg.extensionHeaders || {},\n      queryParams: cfg.queryParams || {},\n      host: cfg.host,\n      signingEndpoint: cfg.signingEndpoint\n    };\n    if (!this.signer) {\n      this.signer = new signer_js_1.URLSigner(this.storage.authClient, this, undefined, this.storage);\n    }\n    this.signer.getSignedUrl(signConfig).then(signedUrl => callback(null, signedUrl), callback);\n  }\n  /**\n   * @callback BucketLockCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} apiResponse The full API response.\n   */\n  /**\n   * Lock a previously-defined retention policy. This will prevent changes to\n   * the policy.\n   *\n   * @throws {Error} if a metageneration is not provided.\n   *\n   * @param {number|string} metageneration The bucket's metageneration. This is\n   *     accesssible from calling {@link File#getMetadata}.\n   * @param {BucketLockCallback} [callback] Callback function.\n   * @returns {Promise<BucketLockResponse>}\n   *\n   * @example\n   * ```\n   * const storage = require('@google-cloud/storage')();\n   * const bucket = storage.bucket('albums');\n   *\n   * const metageneration = 2;\n   *\n   * bucket.lock(metageneration, function(err, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.lock(metageneration).then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   * ```\n   */\n  lock(metageneration, callback) {\n    const metatype = typeof metageneration;\n    if (metatype !== 'number' && metatype !== 'string') {\n      throw new Error(BucketExceptionMessages.METAGENERATION_NOT_PROVIDED);\n    }\n    this.request({\n      method: 'POST',\n      uri: '/lockRetentionPolicy',\n      qs: {\n        ifMetagenerationMatch: metageneration\n      }\n    }, callback);\n  }\n  /**\n   * @typedef {array} MakeBucketPrivateResponse\n   * @property {File[]} 0 List of files made private.\n   */\n  /**\n   * @callback MakeBucketPrivateCallback\n   * @param {?Error} err Request error, if any.\n   * @param {File[]} files List of files made private.\n   */\n  /**\n   * @typedef {object} MakeBucketPrivateOptions\n   * @property {boolean} [includeFiles=false] Make each file in the bucket\n   *     private.\n   * @property {Metadata} [metadata] Define custom metadata properties to define\n   *     along with the operation.\n   * @property {boolean} [force] Queue errors occurred while making files\n   *     private until all files have been processed.\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   */\n  /**\n   * Make the bucket listing private.\n   *\n   * You may also choose to make the contents of the bucket private by\n   * specifying `includeFiles: true`. This will automatically run\n   * {@link File#makePrivate} for every file in the bucket.\n   *\n   * When specifying `includeFiles: true`, use `force: true` to delay execution\n   * of your callback until all files have been processed. By default, the\n   * callback is executed after the first error. Use `force` to queue such\n   * errors until all files have been processed, after which they will be\n   * returned as an array as the first argument to your callback.\n   *\n   * NOTE: This may cause the process to be long-running and use a high number\n   * of requests. Use with caution.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n   *\n   * @param {MakeBucketPrivateOptions} [options] Configuration options.\n   * @param {boolean} [options.includeFiles=false] Make each file in the bucket\n   *     private.\n   * @param {Metadata} [options.metadata] Define custom metadata properties to define\n   *     along with the operation.\n   * @param {boolean} [options.force] Queue errors occurred while making files\n   *     private until all files have been processed.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {MakeBucketPrivateCallback} [callback] Callback function.\n   * @returns {Promise<MakeBucketPrivateResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * //-\n   * // Make the bucket private.\n   * //-\n   * bucket.makePrivate(function(err) {});\n   *\n   * //-\n   * // Make the bucket and its contents private.\n   * //-\n   * const opts = {\n   *   includeFiles: true\n   * };\n   *\n   * bucket.makePrivate(opts, function(err, files) {\n   *   // `err`:\n   *   //    The first error to occur, otherwise null.\n   *   //\n   *   // `files`:\n   *   //    Array of files successfully made private in the bucket.\n   * });\n   *\n   * //-\n   * // Make the bucket and its contents private, using force to suppress errors\n   * // until all files have been processed.\n   * //-\n   * const opts = {\n   *   includeFiles: true,\n   *   force: true\n   * };\n   *\n   * bucket.makePrivate(opts, function(errors, files) {\n   *   // `errors`:\n   *   //    Array of errors if any occurred, otherwise null.\n   *   //\n   *   // `files`:\n   *   //    Array of files successfully made private in the bucket.\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.makePrivate(opts).then(function(data) {\n   *   const files = data[0];\n   * });\n   * ```\n   */\n  makePrivate(optionsOrCallback, callback) {\n    var _a, _b, _c, _d;\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    options.private = true;\n    const query = {\n      predefinedAcl: 'projectPrivate'\n    };\n    if (options.userProject) {\n      query.userProject = options.userProject;\n    }\n    if ((_a = options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) {\n      query.ifGenerationMatch = options.preconditionOpts.ifGenerationMatch;\n    }\n    if ((_b = options.preconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationNotMatch) {\n      query.ifGenerationNotMatch = options.preconditionOpts.ifGenerationNotMatch;\n    }\n    if ((_c = options.preconditionOpts) === null || _c === void 0 ? void 0 : _c.ifMetagenerationMatch) {\n      query.ifMetagenerationMatch = options.preconditionOpts.ifMetagenerationMatch;\n    }\n    if ((_d = options.preconditionOpts) === null || _d === void 0 ? void 0 : _d.ifMetagenerationNotMatch) {\n      query.ifMetagenerationNotMatch = options.preconditionOpts.ifMetagenerationNotMatch;\n    }\n    // You aren't allowed to set both predefinedAcl & acl properties on a bucket\n    // so acl must explicitly be nullified.\n    const metadata = {\n      ...options.metadata,\n      acl: null\n    };\n    this.setMetadata(metadata, query, err => {\n      if (err) {\n        callback(err);\n      }\n      const internalCall = () => {\n        if (options.includeFiles) {\n          return (0, util_1.promisify)(this.makeAllFilesPublicPrivate_).call(this, options);\n        }\n        return Promise.resolve([]);\n      };\n      internalCall().then(files => callback(null, files)).catch(callback);\n    });\n  }\n  /**\n   * @typedef {object} MakeBucketPublicOptions\n   * @property {boolean} [includeFiles=false] Make each file in the bucket\n   *     private.\n   * @property {boolean} [force] Queue errors occurred while making files\n   *     private until all files have been processed.\n   */\n  /**\n   * @callback MakeBucketPublicCallback\n   * @param {?Error} err Request error, if any.\n   * @param {File[]} files List of files made public.\n   */\n  /**\n   * @typedef {array} MakeBucketPublicResponse\n   * @property {File[]} 0 List of files made public.\n   */\n  /**\n   * Make the bucket publicly readable.\n   *\n   * You may also choose to make the contents of the bucket publicly readable by\n   * specifying `includeFiles: true`. This will automatically run\n   * {@link File#makePublic} for every file in the bucket.\n   *\n   * When specifying `includeFiles: true`, use `force: true` to delay execution\n   * of your callback until all files have been processed. By default, the\n   * callback is executed after the first error. Use `force` to queue such\n   * errors until all files have been processed, after which they will be\n   * returned as an array as the first argument to your callback.\n   *\n   * NOTE: This may cause the process to be long-running and use a high number\n   * of requests. Use with caution.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n   *\n   * @param {MakeBucketPublicOptions} [options] Configuration options.\n   * @param {boolean} [options.includeFiles=false] Make each file in the bucket\n   *     private.\n   * @param {boolean} [options.force] Queue errors occurred while making files\n   *     private until all files have been processed.\n   * @param {MakeBucketPublicCallback} [callback] Callback function.\n   * @returns {Promise<MakeBucketPublicResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * //-\n   * // Make the bucket publicly readable.\n   * //-\n   * bucket.makePublic(function(err) {});\n   *\n   * //-\n   * // Make the bucket and its contents publicly readable.\n   * //-\n   * const opts = {\n   *   includeFiles: true\n   * };\n   *\n   * bucket.makePublic(opts, function(err, files) {\n   *   // `err`:\n   *   //    The first error to occur, otherwise null.\n   *   //\n   *   // `files`:\n   *   //    Array of files successfully made public in the bucket.\n   * });\n   *\n   * //-\n   * // Make the bucket and its contents publicly readable, using force to\n   * // suppress errors until all files have been processed.\n   * //-\n   * const opts = {\n   *   includeFiles: true,\n   *   force: true\n   * };\n   *\n   * bucket.makePublic(opts, function(errors, files) {\n   *   // `errors`:\n   *   //    Array of errors if any occurred, otherwise null.\n   *   //\n   *   // `files`:\n   *   //    Array of files successfully made public in the bucket.\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.makePublic(opts).then(function(data) {\n   *   const files = data[0];\n   * });\n   * ```\n   */\n  makePublic(optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    const req = {\n      public: true,\n      ...options\n    };\n    this.acl.add({\n      entity: 'allUsers',\n      role: 'READER'\n    }).then(() => {\n      return this.acl.default.add({\n        entity: 'allUsers',\n        role: 'READER'\n      });\n    }).then(() => {\n      if (req.includeFiles) {\n        return (0, util_1.promisify)(this.makeAllFilesPublicPrivate_).call(this, req);\n      }\n      return [];\n    }).then(files => callback(null, files), callback);\n  }\n  /**\n   * Get a reference to a Cloud Pub/Sub Notification.\n   *\n   * @param {string} id ID of notification.\n   * @returns {Notification}\n   * @see Notification\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('my-bucket');\n   * const notification = bucket.notification('1');\n   * ```\n   */\n  notification(id) {\n    if (!id) {\n      throw new Error(BucketExceptionMessages.SUPPLY_NOTIFICATION_ID);\n    }\n    return new notification_js_1.Notification(this, id);\n  }\n  /**\n   * Remove an already-existing retention policy from this bucket, if it is not\n   * locked.\n   *\n   * @param {SetBucketMetadataCallback} [callback] Callback function.\n   * @param {SetBucketMetadataOptions} [options] Options, including precondition options\n   * @returns {Promise<SetBucketMetadataResponse>}\n   *\n   * @example\n   * ```\n   * const storage = require('@google-cloud/storage')();\n   * const bucket = storage.bucket('albums');\n   *\n   * bucket.removeRetentionPeriod(function(err, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.removeRetentionPeriod().then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   * ```\n   */\n  removeRetentionPeriod(optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    this.setMetadata({\n      retentionPolicy: null\n    }, options, callback);\n  }\n  /**\n   * Makes request and applies userProject query parameter if necessary.\n   *\n   * @private\n   *\n   * @param {object} reqOpts - The request options.\n   * @param {function} callback - The callback function.\n   */\n  request(reqOpts, callback) {\n    if (this.userProject && (!reqOpts.qs || !reqOpts.qs.userProject)) {\n      reqOpts.qs = {\n        ...reqOpts.qs,\n        userProject: this.userProject\n      };\n    }\n    return super.request(reqOpts, callback);\n  }\n  /**\n   * @deprecated\n   * @typedef {array} SetLabelsResponse\n   * @property {object} 0 The bucket metadata.\n   */\n  /**\n   * @deprecated\n   * @callback SetLabelsCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} metadata The bucket metadata.\n   */\n  /**\n   * @deprecated\n   * @typedef {object} SetLabelsOptions Configuration options for Bucket#setLabels().\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   */\n  /**\n   * @deprecated Use setMetadata directly.\n   * Set labels on the bucket.\n   *\n   * This makes an underlying call to {@link Bucket#setMetadata}, which\n   * is a PATCH request. This means an individual label can be overwritten, but\n   * unmentioned labels will not be touched.\n   *\n   * @param {object<string, string>} labels Labels to set on the bucket.\n   * @param {SetLabelsOptions} [options] Configuration options.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {SetLabelsCallback} [callback] Callback function.\n   * @returns {Promise<SetLabelsResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * const labels = {\n   *   labelone: 'labelonevalue',\n   *   labeltwo: 'labeltwovalue'\n   * };\n   *\n   * bucket.setLabels(labels, function(err, metadata) {\n   *   if (!err) {\n   *     // Labels set successfully.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.setLabels(labels).then(function(data) {\n   *   const metadata = data[0];\n   * });\n   * ```\n   */\n  setLabels(labels, optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    callback = callback || index_js_1.util.noop;\n    this.setMetadata({\n      labels\n    }, options, callback);\n  }\n  setMetadata(metadata, optionsOrCallback, cb) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    cb = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n    this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata, options);\n    super.setMetadata(metadata, options).then(resp => cb(null, ...resp)).catch(cb).finally(() => {\n      this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n    });\n  }\n  /**\n   * Lock all objects contained in the bucket, based on their creation time. Any\n   * attempt to overwrite or delete objects younger than the retention period\n   * will result in a `PERMISSION_DENIED` error.\n   *\n   * An unlocked retention policy can be modified or removed from the bucket via\n   * {@link File#removeRetentionPeriod} and {@link File#setRetentionPeriod}. A\n   * locked retention policy cannot be removed or shortened in duration for the\n   * lifetime of the bucket. Attempting to remove or decrease period of a locked\n   * retention policy will result in a `PERMISSION_DENIED` error. You can still\n   * increase the policy.\n   *\n   * @param {*} duration In seconds, the minimum retention time for all objects\n   *     contained in this bucket.\n   * @param {SetBucketMetadataCallback} [callback] Callback function.\n   * @param {SetBucketMetadataCallback} [options] Options, including precondition options.\n   * @returns {Promise<SetBucketMetadataResponse>}\n   *\n   * @example\n   * ```\n   * const storage = require('@google-cloud/storage')();\n   * const bucket = storage.bucket('albums');\n   *\n   * const DURATION_SECONDS = 15780000; // 6 months.\n   *\n   * //-\n   * // Lock the objects in this bucket for 6 months.\n   * //-\n   * bucket.setRetentionPeriod(DURATION_SECONDS, function(err, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.setRetentionPeriod(DURATION_SECONDS).then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   * ```\n   */\n  setRetentionPeriod(duration, optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    this.setMetadata({\n      retentionPolicy: {\n        retentionPeriod: duration.toString()\n      }\n    }, options, callback);\n  }\n  /**\n   *\n   * @typedef {object} Cors\n   * @property {number} [maxAgeSeconds] The number of seconds the browser is\n   *     allowed to make requests before it must repeat the preflight request.\n   * @property {string[]} [method] HTTP method allowed for cross origin resource\n   *     sharing with this bucket.\n   * @property {string[]} [origin] an origin allowed for cross origin resource\n   *     sharing with this bucket.\n   * @property {string[]} [responseHeader] A header allowed for cross origin\n   *     resource sharing with this bucket.\n   */\n  /**\n   * This can be used to set the CORS configuration on the bucket.\n   *\n   * The configuration will be overwritten with the value passed into this.\n   *\n   * @param {Cors[]} corsConfiguration The new CORS configuration to set\n   * @param {number} [corsConfiguration.maxAgeSeconds] The number of seconds the browser is\n   *     allowed to make requests before it must repeat the preflight request.\n   * @param {string[]} [corsConfiguration.method] HTTP method allowed for cross origin resource\n   *     sharing with this bucket.\n   * @param {string[]} [corsConfiguration.origin] an origin allowed for cross origin resource\n   *     sharing with this bucket.\n   * @param {string[]} [corsConfiguration.responseHeader] A header allowed for cross origin\n   *     resource sharing with this bucket.\n   * @param {SetBucketMetadataCallback} [callback] Callback function.\n   * @param {SetBucketMetadataOptions} [options] Options, including precondition options.\n   * @returns {Promise<SetBucketMetadataResponse>}\n   *\n   * @example\n   * ```\n   * const storage = require('@google-cloud/storage')();\n   * const bucket = storage.bucket('albums');\n   *\n   * const corsConfiguration = [{maxAgeSeconds: 3600}]; // 1 hour\n   * bucket.setCorsConfiguration(corsConfiguration);\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.setCorsConfiguration(corsConfiguration).then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   * ```\n   */\n  setCorsConfiguration(corsConfiguration, optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    this.setMetadata({\n      cors: corsConfiguration\n    }, options, callback);\n  }\n  /**\n   * @typedef {object} SetBucketStorageClassOptions\n   * @property {string} [userProject] - The ID of the project which will be\n   *     billed for the request.\n   */\n  /**\n   * @callback SetBucketStorageClassCallback\n   * @param {?Error} err Request error, if any.\n   */\n  /**\n   * Set the default storage class for new files in this bucket.\n   *\n   * See {@link https://cloud.google.com/storage/docs/storage-classes| Storage Classes}\n   *\n   * @param {string} storageClass The new storage class. (`standard`,\n   *     `nearline`, `coldline`, or `archive`).\n   *     **Note:** The storage classes `multi_regional`, `regional`, and\n   *     `durable_reduced_availability` are now legacy and will be deprecated in\n   *     the future.\n   * @param {object} [options] Configuration options.\n   * @param {string} [options.userProject] - The ID of the project which will be\n   *     billed for the request.\n   * @param {SetStorageClassCallback} [callback] Callback function.\n   * @returns {Promise}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * bucket.setStorageClass('nearline', function(err, apiResponse) {\n   *   if (err) {\n   *     // Error handling omitted.\n   *   }\n   *\n   *   // The storage class was updated successfully.\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.setStorageClass('nearline').then(function() {});\n   * ```\n   */\n  setStorageClass(storageClass, optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    // In case we get input like `storageClass`, convert to `storage_class`.\n    storageClass = storageClass.replace(/-/g, '_').replace(/([a-z])([A-Z])/g, (_, low, up) => {\n      return low + '_' + up;\n    }).toUpperCase();\n    this.setMetadata({\n      storageClass\n    }, options, callback);\n  }\n  /**\n   * Set a user project to be billed for all requests made from this Bucket\n   * object and any files referenced from this Bucket object.\n   *\n   * @param {string} userProject The user project.\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * bucket.setUserProject('grape-spaceship-123');\n   * ```\n   */\n  setUserProject(userProject) {\n    this.userProject = userProject;\n    const methods = ['create', 'delete', 'exists', 'get', 'getMetadata', 'setMetadata'];\n    methods.forEach(method => {\n      const methodConfig = this.methods[method];\n      if (typeof methodConfig === 'object') {\n        if (typeof methodConfig.reqOpts === 'object') {\n          Object.assign(methodConfig.reqOpts.qs, {\n            userProject\n          });\n        } else {\n          methodConfig.reqOpts = {\n            qs: {\n              userProject\n            }\n          };\n        }\n      }\n    });\n  }\n  /**\n   * @typedef {object} UploadOptions Configuration options for Bucket#upload().\n   * @property {string|File} [destination] The place to save\n   *     your file. If given a string, the file will be uploaded to the bucket\n   *     using the string as a filename. When given a File object, your local\n   * file will be uploaded to the File object's bucket and under the File\n   * object's name. Lastly, when this argument is omitted, the file is uploaded\n   * to your bucket using the name of the local file.\n   * @property {string} [encryptionKey] A custom encryption key. See\n   *     {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}.\n   * @property {boolean} [gzip] Automatically gzip the file. This will set\n   *     `options.metadata.contentEncoding` to `gzip`.\n   * @property {string} [kmsKeyName] The name of the Cloud KMS key that will\n   *     be used to encrypt the object. Must be in the format:\n   *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n   * @property {object} [metadata] See an\n   *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON| Objects: insert request body}.\n   * @property {string} [offset] The starting byte of the upload stream, for\n   *     resuming an interrupted upload. Defaults to 0.\n   * @property {string} [predefinedAcl] Apply a predefined set of access\n   * controls to this object.\n   *\n   * Acceptable values are:\n   * - **`authenticatedRead`** - Object owner gets `OWNER` access, and\n   *       `allAuthenticatedUsers` get `READER` access.\n   *\n   * - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\n   *       project team owners get `OWNER` access.\n   *\n   * - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\n   *       team owners get `READER` access.\n   *\n   * - **`private`** - Object owner gets `OWNER` access.\n   *\n   * - **`projectPrivate`** - Object owner gets `OWNER` access, and project\n   *       team members get access according to their roles.\n   *\n   * - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\n   *       get `READER` access.\n   * @property {boolean} [private] Make the uploaded file private. (Alias for\n   *     `options.predefinedAcl = 'private'`)\n   * @property {boolean} [public] Make the uploaded file public. (Alias for\n   *     `options.predefinedAcl = 'publicRead'`)\n   * @property {boolean} [resumable=true] Resumable uploads are automatically\n   *     enabled and must be shut off explicitly by setting to false.\n   * @property {number} [timeout=60000] Set the HTTP request timeout in\n   *     milliseconds. This option is not available for resumable uploads.\n   *     Default: `60000`\n   * @property {string} [uri] The URI for an already-created resumable\n   *     upload. See {@link File#createResumableUpload}.\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   * @property {string|boolean} [validation] Possible values: `\"md5\"`,\n   *     `\"crc32c\"`, or `false`. By default, data integrity is validated with an\n   *     MD5 checksum for maximum reliability. CRC32c will provide better\n   *     performance with less reliability. You may also choose to skip\n   * validation completely, however this is **not recommended**.\n   */\n  /**\n   * @typedef {array} UploadResponse\n   * @property {object} 0 The uploaded {@link File}.\n   * @property {object} 1 The full API response.\n   */\n  /**\n   * @callback UploadCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} file The uploaded {@link File}.\n   * @param {object} apiResponse The full API response.\n   */\n  /**\n   * Upload a file to the bucket. This is a convenience method that wraps\n   * {@link File#createWriteStream}.\n   *\n   * Resumable uploads are enabled by default\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload#uploads| Upload Options (Simple or Resumable)}\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert| Objects: insert API Documentation}\n   *\n   * @param {string} pathString The fully qualified path to the file you\n   *     wish to upload to your bucket.\n   * @param {UploadOptions} [options] Configuration options.\n   * @param {string|File} [options.destination] The place to save\n   *     your file. If given a string, the file will be uploaded to the bucket\n   *     using the string as a filename. When given a File object, your local\n   * file will be uploaded to the File object's bucket and under the File\n   * object's name. Lastly, when this argument is omitted, the file is uploaded\n   * to your bucket using the name of the local file.\n   * @param {string} [options.encryptionKey] A custom encryption key. See\n   *     {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}.\n   * @param {boolean} [options.gzip] Automatically gzip the file. This will set\n   *     `options.metadata.contentEncoding` to `gzip`.\n   * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\n   *     be used to encrypt the object. Must be in the format:\n   *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n   * @param {object} [options.metadata] See an\n   *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON| Objects: insert request body}.\n   * @param {string} [options.offset] The starting byte of the upload stream, for\n   *     resuming an interrupted upload. Defaults to 0.\n   * @param {string} [options.predefinedAcl] Apply a predefined set of access\n   * controls to this object.\n   * Acceptable values are:\n   * - **`authenticatedRead`** - Object owner gets `OWNER` access, and\n   *   `allAuthenticatedUsers` get `READER` access.\n   *\n   * - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\n   *   project team owners get `OWNER` access.\n   *\n   * - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\n   *   team owners get `READER` access.\n   *\n   * - **`private`** - Object owner gets `OWNER` access.\n   *\n   * - **`projectPrivate`** - Object owner gets `OWNER` access, and project\n   *   team members get access according to their roles.\n   *\n   * - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\n   *   get `READER` access.\n   * @param {boolean} [options.private] Make the uploaded file private. (Alias for\n   *     `options.predefinedAcl = 'private'`)\n   * @param {boolean} [options.public] Make the uploaded file public. (Alias for\n   *     `options.predefinedAcl = 'publicRead'`)\n   * @param {boolean} [options.resumable=true] Resumable uploads are automatically\n   *     enabled and must be shut off explicitly by setting to false.\n   * @param {number} [options.timeout=60000] Set the HTTP request timeout in\n   *     milliseconds. This option is not available for resumable uploads.\n   *     Default: `60000`\n   * @param {string} [options.uri] The URI for an already-created resumable\n   *     upload. See {@link File#createResumableUpload}.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {string|boolean} [options.validation] Possible values: `\"md5\"`,\n   *     `\"crc32c\"`, or `false`. By default, data integrity is validated with an\n   *     MD5 checksum for maximum reliability. CRC32c will provide better\n   *     performance with less reliability. You may also choose to skip\n   * validation completely, however this is **not recommended**.\n   * @param {UploadCallback} [callback] Callback function.\n   * @returns {Promise<UploadResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('albums');\n   *\n   * //-\n   * // Upload a file from a local path.\n   * //-\n   * bucket.upload('/local/path/image.png', function(err, file, apiResponse) {\n   *   // Your bucket now contains:\n   *   // - \"image.png\" (with the contents of `/local/path/image.png')\n   *\n   *   // `file` is an instance of a File object that refers to your new file.\n   * });\n   *\n   *\n   * //-\n   * // It's not always that easy. You will likely want to specify the filename\n   * // used when your new file lands in your bucket.\n   * //\n   * // You may also want to set metadata or customize other options.\n   * //-\n   * const options = {\n   *   destination: 'new-image.png',\n   *   validation: 'crc32c',\n   *   metadata: {\n   *     metadata: {\n   *       event: 'Fall trip to the zoo'\n   *     }\n   *   }\n   * };\n   *\n   * bucket.upload('local-image.png', options, function(err, file) {\n   *   // Your bucket now contains:\n   *   // - \"new-image.png\" (with the contents of `local-image.png')\n   *\n   *   // `file` is an instance of a File object that refers to your new file.\n   * });\n   *\n   * //-\n   * // You can also have a file gzip'd on the fly.\n   * //-\n   * bucket.upload('index.html', { gzip: true }, function(err, file) {\n   *   // Your bucket now contains:\n   *   // - \"index.html\" (automatically compressed with gzip)\n   *\n   *   // Downloading the file with `file.download` will automatically decode\n   * the\n   *   // file.\n   * });\n   *\n   * //-\n   * // You may also re-use a File object, {File}, that references\n   * // the file you wish to create or overwrite.\n   * //-\n   * const options = {\n   *   destination: bucket.file('existing-file.png'),\n   *   resumable: false\n   * };\n   *\n   * bucket.upload('local-img.png', options, function(err, newFile) {\n   *   // Your bucket now contains:\n   *   // - \"existing-file.png\" (with the contents of `local-img.png')\n   *\n   *   // Note:\n   *   // The `newFile` parameter is equal to `file`.\n   * });\n   *\n   * //-\n   * // To use\n   * // <a\n   * href=\"https://cloud.google.com/storage/docs/encryption#customer-supplied\">\n   * // Customer-supplied Encryption Keys</a>, provide the `encryptionKey`\n   * option.\n   * //-\n   * const crypto = require('crypto');\n   * const encryptionKey = crypto.randomBytes(32);\n   *\n   * bucket.upload('img.png', {\n   *   encryptionKey: encryptionKey\n   * }, function(err, newFile) {\n   *   // `img.png` was uploaded with your custom encryption key.\n   *\n   *   // `newFile` is already configured to use the encryption key when making\n   *   // operations on the remote object.\n   *\n   *   // However, to use your encryption key later, you must create a `File`\n   *   // instance with the `key` supplied:\n   *   const file = bucket.file('img.png', {\n   *     encryptionKey: encryptionKey\n   *   });\n   *\n   *   // Or with `file#setEncryptionKey`:\n   *   const file = bucket.file('img.png');\n   *   file.setEncryptionKey(encryptionKey);\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.upload('local-image.png').then(function(data) {\n   *   const file = data[0];\n   * });\n   *\n   * To upload a file from a URL, use {@link File#createWriteStream}.\n   *\n   * ```\n   * @example <caption>include:samples/files.js</caption>\n   * region_tag:storage_upload_file\n   * Another example:\n   *\n   * @example <caption>include:samples/encryption.js</caption>\n   * region_tag:storage_upload_encrypted_file\n   * Example of uploading an encrypted file:\n   */\n  upload(pathString, optionsOrCallback, callback) {\n    var _a, _b;\n    const upload = numberOfRetries => {\n      const returnValue = (0, async_retry_1.default)(async bail => {\n        await new Promise((resolve, reject) => {\n          var _a, _b;\n          if (numberOfRetries === 0 && ((_b = (_a = newFile === null || newFile === void 0 ? void 0 : newFile.storage) === null || _a === void 0 ? void 0 : _a.retryOptions) === null || _b === void 0 ? void 0 : _b.autoRetry)) {\n            newFile.storage.retryOptions.autoRetry = false;\n          }\n          const writable = newFile.createWriteStream(options);\n          if (options.onUploadProgress) {\n            writable.on('progress', options.onUploadProgress);\n          }\n          fs.createReadStream(pathString).on('error', bail).pipe(writable).on('error', err => {\n            if (this.storage.retryOptions.autoRetry && this.storage.retryOptions.retryableErrorFn(err)) {\n              return reject(err);\n            } else {\n              return bail(err);\n            }\n          }).on('finish', () => {\n            return resolve();\n          });\n        });\n      }, {\n        retries: numberOfRetries,\n        factor: this.storage.retryOptions.retryDelayMultiplier,\n        maxTimeout: this.storage.retryOptions.maxRetryDelay * 1000,\n        //convert to milliseconds\n        maxRetryTime: this.storage.retryOptions.totalTimeout * 1000 //convert to milliseconds\n      });\n\n      if (!callback) {\n        return returnValue;\n      } else {\n        return returnValue.then(() => {\n          if (callback) {\n            return callback(null, newFile, newFile.metadata);\n          }\n        }).catch(callback);\n      }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (global['GCLOUD_SANDBOX_ENV']) {\n      return;\n    }\n    let options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    options = Object.assign({\n      metadata: {}\n    }, options);\n    // Do not retry if precondition option ifGenerationMatch is not set\n    // because this is a file operation\n    let maxRetries = this.storage.retryOptions.maxRetries;\n    if (((_a = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) === undefined && ((_b = this.instancePreconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationMatch) === undefined && this.storage.retryOptions.idempotencyStrategy === storage_js_1.IdempotencyStrategy.RetryConditional || this.storage.retryOptions.idempotencyStrategy === storage_js_1.IdempotencyStrategy.RetryNever) {\n      maxRetries = 0;\n    }\n    let newFile;\n    if (options.destination instanceof file_js_1.File) {\n      newFile = options.destination;\n    } else if (options.destination !== null && typeof options.destination === 'string') {\n      // Use the string as the name of the file.\n      newFile = this.file(options.destination, {\n        encryptionKey: options.encryptionKey,\n        kmsKeyName: options.kmsKeyName,\n        preconditionOpts: this.instancePreconditionOpts\n      });\n    } else {\n      // Resort to using the name of the incoming file.\n      const destination = path.basename(pathString);\n      newFile = this.file(destination, {\n        encryptionKey: options.encryptionKey,\n        kmsKeyName: options.kmsKeyName,\n        preconditionOpts: this.instancePreconditionOpts\n      });\n    }\n    upload(maxRetries);\n  }\n  /**\n   * @private\n   *\n   * @typedef {object} MakeAllFilesPublicPrivateOptions\n   * @property {boolean} [force] Suppress errors until all files have been\n   *     processed.\n   * @property {boolean} [private] Make files private.\n   * @property {boolean} [public] Make files public.\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   */\n  /**\n   * @private\n   *\n   * @callback SetBucketMetadataCallback\n   * @param {?Error} err Request error, if any.\n   * @param {File[]} files Files that were updated.\n   */\n  /**\n   * @typedef {array} MakeAllFilesPublicPrivateResponse\n   * @property {File[]} 0 List of files affected.\n   */\n  /**\n   * Iterate over all of a bucket's files, calling `file.makePublic()` (public)\n   * or `file.makePrivate()` (private) on each.\n   *\n   * Operations are performed in parallel, up to 10 at once. The first error\n   * breaks the loop, and will execute the provided callback with it. Specify\n   * `{ force: true }` to suppress the errors.\n   *\n   * @private\n   *\n   * @param {MakeAllFilesPublicPrivateOptions} [options] Configuration options.\n   * @param {boolean} [options.force] Suppress errors until all files have been\n   *     processed.\n   * @param {boolean} [options.private] Make files private.\n   * @param {boolean} [options.public] Make files public.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n      * @param {MakeAllFilesPublicPrivateCallback} callback Callback function.\n   *\n   * @return {Promise<MakeAllFilesPublicPrivateResponse>}\n   */\n  makeAllFilesPublicPrivate_(optionsOrCallback, callback) {\n    const MAX_PARALLEL_LIMIT = 10;\n    const errors = [];\n    const updatedFiles = [];\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    const processFile = async file => {\n      try {\n        await (options.public ? file.makePublic() : file.makePrivate(options));\n        updatedFiles.push(file);\n      } catch (e) {\n        if (!options.force) {\n          throw e;\n        }\n        errors.push(e);\n      }\n    };\n    this.getFiles(options).then(_ref => {\n      let [files] = _ref;\n      const limit = (0, p_limit_1.default)(MAX_PARALLEL_LIMIT);\n      const promises = files.map(file => {\n        return limit(() => processFile(file));\n      });\n      return Promise.all(promises);\n    }).then(() => callback(errors.length > 0 ? errors : null, updatedFiles), err => callback(err, updatedFiles));\n  }\n  getId() {\n    return this.id;\n  }\n  disableAutoRetryConditionallyIdempotent_(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  coreOpts,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  methodType, localPreconditionOptions) {\n    var _a, _b;\n    if (typeof coreOpts === 'object' && ((_b = (_a = coreOpts === null || coreOpts === void 0 ? void 0 : coreOpts.reqOpts) === null || _a === void 0 ? void 0 : _a.qs) === null || _b === void 0 ? void 0 : _b.ifMetagenerationMatch) === undefined && (localPreconditionOptions === null || localPreconditionOptions === void 0 ? void 0 : localPreconditionOptions.ifMetagenerationMatch) === undefined && (methodType === AvailableServiceObjectMethods.setMetadata || methodType === AvailableServiceObjectMethods.delete) && this.storage.retryOptions.idempotencyStrategy === storage_js_1.IdempotencyStrategy.RetryConditional) {\n      this.storage.retryOptions.autoRetry = false;\n    } else if (this.storage.retryOptions.idempotencyStrategy === storage_js_1.IdempotencyStrategy.RetryNever) {\n      this.storage.retryOptions.autoRetry = false;\n    }\n  }\n}\nexports.Bucket = Bucket;\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\npaginator_1.paginator.extend(Bucket, 'getFiles');\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0, promisify_1.promisifyAll)(Bucket, {\n  exclude: ['cloudStorageURI', 'request', 'file', 'notification']\n});","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","Bucket","BucketExceptionMessages","AvailableServiceObjectMethods","BucketActionToHTTPMethod","index_js_1","require","paginator_1","promisify_1","fs","mime_1","path","p_limit_1","util_1","async_retry_1","util_js_1","acl_js_1","file_js_1","iam_js_1","notification_js_1","storage_js_1","signer_js_1","stream_1","url_1","ServiceObject","getFilesStream","query","Readable","constructor","storage","name","options","_a","_b","_c","_d","replace","requestQueryObject","preconditionOpts","ifGenerationMatch","ifGenerationNotMatch","ifMetagenerationMatch","ifMetagenerationNotMatch","userProject","methods","reqOpts","qs","delete","exists","getMetadata","setMetadata","parent","baseUrl","id","createMethod","createBucket","bind","acl","Acl","request","pathPrefix","default","crc32cGenerator","iam","Iam","paginator","streamify","instanceRetryValue","retryOptions","autoRetry","instancePreconditionOpts","cloudStorageURI","uri","URL","host","addLifecycleRule","rule","optionsOrCallback","callback","rules","Array","isArray","curRule","condition","createdBefore","Date","toISOString","customTimeBefore","noncurrentTimeBefore","append","lifecycle","err","metadata","currentLifecycleRules","concat","combine","sources","destination","length","Error","PROVIDE_SOURCE_FILE","DESTINATION_FILE_NOT_SPECIFIED","disableAutoRetryConditionallyIdempotent_","convertToFile","file","File","map","destinationFile","util","noop","contentType","destinationContentType","getType","maxRetries","idempotencyStrategy","IdempotencyStrategy","RetryConditional","RetryNever","assign","method","json","contentEncoding","sourceObjects","source","sourceObject","generation","parseInt","toString","resp","createChannel","config","CHANNEL_ID_REQUIRED","type","apiResponse","resourceId","channel","createNotification","topic","topicIsObject","isCustomType","TOPIC_NAME_REQUIRED","body","indexOf","universeDomain","payloadFormat","convertObjKeysToSnakeCase","notification","deleteFiles","queryOrCallback","MAX_PARALLEL_LIMIT","MAX_QUEUE_SIZE","errors","deleteFile","catch","force","push","promises","limit","filesStream","curFile","Promise","all","e","destroy","deleteLabels","labelsOrCallbackOrOptions","labels","nullLabelMap","reduce","labelKey","setLabels","getLabels","keys","disableRequesterPays","billing","requesterPays","enableLogging","prefix","CONFIGURATION_OBJECT_PREFIX_REQUIRED","logBucket","bucket","policy","getPolicy","bindings","members","role","setPolicy","logging","logObjectPrefix","enableRequesterPays","cb","SPECIFY_FILE_NAME","getFiles","itemsArray","items","files","fields","fileInstance","versions","kmsKeyName","nextQuery","nextPageToken","pageToken","getNotifications","notifications","notificationInstance","getSignedUrl","cfg","action","signConfig","expires","version","cname","extensionHeaders","queryParams","signingEndpoint","signer","URLSigner","authClient","then","signedUrl","lock","metageneration","metatype","METAGENERATION_NOT_PROVIDED","makePrivate","private","predefinedAcl","internalCall","includeFiles","promisify","makeAllFilesPublicPrivate_","resolve","makePublic","req","public","add","entity","SUPPLY_NOTIFICATION_ID","Notification","removeRetentionPeriod","retentionPolicy","finally","setRetentionPeriod","duration","retentionPeriod","setCorsConfiguration","corsConfiguration","cors","setStorageClass","storageClass","_","low","up","toUpperCase","setUserProject","forEach","methodConfig","upload","pathString","numberOfRetries","returnValue","bail","reject","newFile","createWriteStream","onUploadProgress","on","createReadStream","pipe","retryableErrorFn","retries","factor","retryDelayMultiplier","maxTimeout","maxRetryDelay","maxRetryTime","totalTimeout","global","encryptionKey","basename","updatedFiles","processFile","getId","coreOpts","methodType","localPreconditionOptions","extend","promisifyAll","exclude"],"sources":["/home/yadu/Music/Gifty/node_modules/@google-cloud/storage/build/cjs/src/bucket.js"],"sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Bucket = exports.BucketExceptionMessages = exports.AvailableServiceObjectMethods = exports.BucketActionToHTTPMethod = void 0;\nconst index_js_1 = require(\"./nodejs-common/index.js\");\nconst paginator_1 = require(\"@google-cloud/paginator\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst fs = __importStar(require(\"fs\"));\nconst mime_1 = __importDefault(require(\"mime\"));\nconst path = __importStar(require(\"path\"));\nconst p_limit_1 = __importDefault(require(\"p-limit\"));\nconst util_1 = require(\"util\");\nconst async_retry_1 = __importDefault(require(\"async-retry\"));\nconst util_js_1 = require(\"./util.js\");\nconst acl_js_1 = require(\"./acl.js\");\nconst file_js_1 = require(\"./file.js\");\nconst iam_js_1 = require(\"./iam.js\");\nconst notification_js_1 = require(\"./notification.js\");\nconst storage_js_1 = require(\"./storage.js\");\nconst signer_js_1 = require(\"./signer.js\");\nconst stream_1 = require(\"stream\");\nconst url_1 = require(\"url\");\nvar BucketActionToHTTPMethod;\n(function (BucketActionToHTTPMethod) {\n    BucketActionToHTTPMethod[\"list\"] = \"GET\";\n})(BucketActionToHTTPMethod || (exports.BucketActionToHTTPMethod = BucketActionToHTTPMethod = {}));\nvar AvailableServiceObjectMethods;\n(function (AvailableServiceObjectMethods) {\n    AvailableServiceObjectMethods[AvailableServiceObjectMethods[\"setMetadata\"] = 0] = \"setMetadata\";\n    AvailableServiceObjectMethods[AvailableServiceObjectMethods[\"delete\"] = 1] = \"delete\";\n})(AvailableServiceObjectMethods || (exports.AvailableServiceObjectMethods = AvailableServiceObjectMethods = {}));\nvar BucketExceptionMessages;\n(function (BucketExceptionMessages) {\n    BucketExceptionMessages[\"PROVIDE_SOURCE_FILE\"] = \"You must provide at least one source file.\";\n    BucketExceptionMessages[\"DESTINATION_FILE_NOT_SPECIFIED\"] = \"A destination file must be specified.\";\n    BucketExceptionMessages[\"CHANNEL_ID_REQUIRED\"] = \"An ID is required to create a channel.\";\n    BucketExceptionMessages[\"TOPIC_NAME_REQUIRED\"] = \"A valid topic name is required.\";\n    BucketExceptionMessages[\"CONFIGURATION_OBJECT_PREFIX_REQUIRED\"] = \"A configuration object with a prefix is required.\";\n    BucketExceptionMessages[\"SPECIFY_FILE_NAME\"] = \"A file name must be specified.\";\n    BucketExceptionMessages[\"METAGENERATION_NOT_PROVIDED\"] = \"A metageneration must be provided.\";\n    BucketExceptionMessages[\"SUPPLY_NOTIFICATION_ID\"] = \"You must supply a notification ID.\";\n})(BucketExceptionMessages || (exports.BucketExceptionMessages = BucketExceptionMessages = {}));\n/**\n * @callback Crc32cGeneratorToStringCallback\n * A method returning the CRC32C as a base64-encoded string.\n *\n * @returns {string}\n *\n * @example\n * Hashing the string 'data' should return 'rth90Q=='\n *\n * ```js\n * const buffer = Buffer.from('data');\n * crc32c.update(buffer);\n * crc32c.toString(); // 'rth90Q=='\n * ```\n **/\n/**\n * @callback Crc32cGeneratorValidateCallback\n * A method validating a base64-encoded CRC32C string.\n *\n * @param {string} [value] base64-encoded CRC32C string to validate\n * @returns {boolean}\n *\n * @example\n * Should return `true` if the value matches, `false` otherwise\n *\n * ```js\n * const buffer = Buffer.from('data');\n * crc32c.update(buffer);\n * crc32c.validate('DkjKuA=='); // false\n * crc32c.validate('rth90Q=='); // true\n * ```\n **/\n/**\n * @callback Crc32cGeneratorUpdateCallback\n * A method for passing `Buffer`s for CRC32C generation.\n *\n * @param {Buffer} [data] data to update CRC32C value with\n * @returns {undefined}\n *\n * @example\n * Hashing buffers from 'some ' and 'text\\n'\n *\n * ```js\n * const buffer1 = Buffer.from('some ');\n * crc32c.update(buffer1);\n *\n * const buffer2 = Buffer.from('text\\n');\n * crc32c.update(buffer2);\n *\n * crc32c.toString(); // 'DkjKuA=='\n * ```\n **/\n/**\n * @typedef {object} CRC32CValidator\n * @property {Crc32cGeneratorToStringCallback}\n * @property {Crc32cGeneratorValidateCallback}\n * @property {Crc32cGeneratorUpdateCallback}\n */\n/**\n * A function that generates a CRC32C Validator. Defaults to {@link CRC32C}\n *\n * @name Bucket#crc32cGenerator\n * @type {CRC32CValidator}\n */\n/**\n * Get and set IAM policies for your bucket.\n *\n * @name Bucket#iam\n * @mixes Iam\n *\n * See {@link https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management| Cloud Storage IAM Management}\n * See {@link https://cloud.google.com/iam/docs/granting-changing-revoking-access| Granting, Changing, and Revoking Access}\n * See {@link https://cloud.google.com/iam/docs/understanding-roles| IAM Roles}\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n *\n * //-\n * // Get the IAM policy for your bucket.\n * //-\n * bucket.iam.getPolicy(function(err, policy) {\n *   console.log(policy);\n * });\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * bucket.iam.getPolicy().then(function(data) {\n *   const policy = data[0];\n *   const apiResponse = data[1];\n * });\n *\n * ```\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_view_bucket_iam_members\n * Example of retrieving a bucket's IAM policy:\n *\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_add_bucket_iam_member\n * Example of adding to a bucket's IAM policy:\n *\n * @example <caption>include:samples/iam.js</caption>\n * region_tag:storage_remove_bucket_iam_member\n * Example of removing from a bucket's IAM policy:\n */\n/**\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share objects with other\n * users and allow other users to access your buckets and objects.\n *\n * An ACL consists of one or more entries, where each entry grants permissions\n * to an entity. Permissions define the actions that can be performed against\n * an object or bucket (for example, `READ` or `WRITE`); the entity defines\n * who the permission applies to (for example, a specific user or group of\n * users).\n *\n * The `acl` object on a Bucket instance provides methods to get you a list of\n * the ACLs defined on your bucket, as well as set, update, and delete them.\n *\n * Buckets also have\n * {@link https://cloud.google.com/storage/docs/access-control/lists#default| default ACLs}\n * for all created files. Default ACLs specify permissions that all new\n * objects added to the bucket will inherit by default. You can add, delete,\n * get, and update entities and permissions for these as well with\n * {@link Bucket#acl.default}.\n *\n * See {@link http://goo.gl/6qBBPO| About Access Control Lists}\n * See {@link https://cloud.google.com/storage/docs/access-control/lists#default| Default ACLs}\n *\n * @name Bucket#acl\n * @mixes Acl\n * @property {Acl} default Cloud Storage Buckets have\n * {@link https://cloud.google.com/storage/docs/access-control/lists#default| default ACLs}\n * for all created files. You can add, delete, get, and update entities and\n * permissions for these as well. The method signatures and examples are all\n * the same, after only prefixing the method call with `default`.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n *\n * //-\n * // Make a bucket's contents publicly readable.\n * //-\n * const myBucket = storage.bucket('my-bucket');\n *\n * const options = {\n *   entity: 'allUsers',\n *   role: storage.acl.READER_ROLE\n * };\n *\n * myBucket.acl.add(options, function(err, aclObject) {});\n *\n * //-\n * // If the callback is omitted, we'll return a Promise.\n * //-\n * myBucket.acl.add(options).then(function(data) {\n *   const aclObject = data[0];\n *   const apiResponse = data[1];\n * });\n *\n * ```\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_print_bucket_acl\n * Example of printing a bucket's ACL:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_print_bucket_acl_for_user\n * Example of printing a bucket's ACL for a specific user:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_add_bucket_owner\n * Example of adding an owner to a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_remove_bucket_owner\n * Example of removing an owner from a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_add_bucket_default_owner\n * Example of adding a default owner to a bucket:\n *\n * @example <caption>include:samples/acl.js</caption>\n * region_tag:storage_remove_bucket_default_owner\n * Example of removing a default owner from a bucket:\n */\n/**\n * The API-formatted resource description of the bucket.\n *\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\n * latest record, call the `getMetadata()` method.\n *\n * @name Bucket#metadata\n * @type {object}\n */\n/**\n * The bucket's name.\n * @name Bucket#name\n * @type {string}\n */\n/**\n * Get {@link File} objects for the files currently in the bucket as a\n * readable object stream.\n *\n * @method Bucket#getFilesStream\n * @param {GetFilesOptions} [query] Query object for listing files.\n * @returns {ReadableStream} A readable stream that emits {@link File} instances.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n *\n * bucket.getFilesStream()\n *   .on('error', console.error)\n *   .on('data', function(file) {\n *     // file is a File object.\n *   })\n *   .on('end', function() {\n *     // All files retrieved.\n *   });\n *\n * //-\n * // If you anticipate many results, you can end a stream early to prevent\n * // unnecessary processing and API requests.\n * //-\n * bucket.getFilesStream()\n *   .on('data', function(file) {\n *     this.end();\n *   });\n *\n * //-\n * // If you're filtering files with a delimiter, you should use\n * // {@link Bucket#getFiles} and set `autoPaginate: false` in order to\n * // preserve the `apiResponse` argument.\n * //-\n * const prefixes = [];\n *\n * function callback(err, files, nextQuery, apiResponse) {\n *   prefixes = prefixes.concat(apiResponse.prefixes);\n *\n *   if (nextQuery) {\n *     bucket.getFiles(nextQuery, callback);\n *   } else {\n *     // prefixes = The finished array of prefixes.\n *   }\n * }\n *\n * bucket.getFiles({\n *   autoPaginate: false,\n *   delimiter: '/'\n * }, callback);\n * ```\n */\n/**\n * Create a Bucket object to interact with a Cloud Storage bucket.\n *\n * @class\n * @hideconstructor\n *\n * @param {Storage} storage A {@link Storage} instance.\n * @param {string} name The name of the bucket.\n * @param {object} [options] Configuration object.\n * @param {string} [options.userProject] User project.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('albums');\n * ```\n */\nclass Bucket extends index_js_1.ServiceObject {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getFilesStream(query) {\n        // placeholder body, overwritten in constructor\n        return new stream_1.Readable();\n    }\n    constructor(storage, name, options) {\n        var _a, _b, _c, _d;\n        options = options || {};\n        // Allow for \"gs://\"-style input, and strip any trailing slashes.\n        name = name.replace(/^gs:\\/\\//, '').replace(/\\/+$/, '');\n        const requestQueryObject = {};\n        if ((_a = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) {\n            requestQueryObject.ifGenerationMatch =\n                options.preconditionOpts.ifGenerationMatch;\n        }\n        if ((_b = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationNotMatch) {\n            requestQueryObject.ifGenerationNotMatch =\n                options.preconditionOpts.ifGenerationNotMatch;\n        }\n        if ((_c = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _c === void 0 ? void 0 : _c.ifMetagenerationMatch) {\n            requestQueryObject.ifMetagenerationMatch =\n                options.preconditionOpts.ifMetagenerationMatch;\n        }\n        if ((_d = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _d === void 0 ? void 0 : _d.ifMetagenerationNotMatch) {\n            requestQueryObject.ifMetagenerationNotMatch =\n                options.preconditionOpts.ifMetagenerationNotMatch;\n        }\n        const userProject = options.userProject;\n        if (typeof userProject === 'string') {\n            requestQueryObject.userProject = userProject;\n        }\n        const methods = {\n            /**\n             * Create a bucket.\n             *\n             * @method Bucket#create\n             * @param {CreateBucketRequest} [metadata] Metadata to set for the bucket.\n             * @param {CreateBucketCallback} [callback] Callback function.\n             * @returns {Promise<CreateBucketResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             * bucket.create(function(err, bucket, apiResponse) {\n             *   if (!err) {\n             *     // The bucket was created successfully.\n             *   }\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.create().then(function(data) {\n             *   const bucket = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            create: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * IamDeleteBucketOptions Configuration options.\n             * @property {boolean} [ignoreNotFound = false] Ignore an error if\n             *     the bucket does not exist.\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} DeleteBucketResponse\n             * @property {object} 0 The full API response.\n             */\n            /**\n             * @callback DeleteBucketCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Delete the bucket.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/delete| Buckets: delete API Documentation}\n             *\n             * @method Bucket#delete\n             * @param {DeleteBucketOptions} [options] Configuration options.\n             * @param {boolean} [options.ignoreNotFound = false] Ignore an error if\n             *     the bucket does not exist.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {DeleteBucketCallback} [callback] Callback function.\n             * @returns {Promise<DeleteBucketResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             * bucket.delete(function(err, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.delete().then(function(data) {\n             *   const apiResponse = data[0];\n             * });\n             *\n             * ```\n             * @example <caption>include:samples/buckets.js</caption>\n             * region_tag:storage_delete_bucket\n             * Another example:\n             */\n            delete: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {object} BucketExistsOptions Configuration options for Bucket#exists().\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} BucketExistsResponse\n             * @property {boolean} 0 Whether the {@link Bucket} exists.\n             */\n            /**\n             * @callback BucketExistsCallback\n             * @param {?Error} err Request error, if any.\n             * @param {boolean} exists Whether the {@link Bucket} exists.\n             */\n            /**\n             * Check if the bucket exists.\n             *\n             * @method Bucket#exists\n             * @param {BucketExistsOptions} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {BucketExistsCallback} [callback] Callback function.\n             * @returns {Promise<BucketExistsResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * bucket.exists(function(err, exists) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.exists().then(function(data) {\n             *   const exists = data[0];\n             * });\n             * ```\n             */\n            exists: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {object} [GetBucketOptions] Configuration options for Bucket#get()\n             * @property {boolean} [autoCreate] Automatically create the object if\n             *     it does not exist. Default: `false`\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} GetBucketResponse\n             * @property {Bucket} 0 The {@link Bucket}.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * @callback GetBucketCallback\n             * @param {?Error} err Request error, if any.\n             * @param {Bucket} bucket The {@link Bucket}.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * Get a bucket if it exists.\n             *\n             * You may optionally use this to \"get or create\" an object by providing\n             * an object with `autoCreate` set to `true`. Any extra configuration that\n             * is normally required for the `create` method must be contained within\n             * this object as well.\n             *\n             * @method Bucket#get\n             * @param {GetBucketOptions} [options] Configuration options.\n             * @param {boolean} [options.autoCreate] Automatically create the object if\n             *     it does not exist. Default: `false`\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {GetBucketCallback} [callback] Callback function.\n             * @returns {Promise<GetBucketResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * bucket.get(function(err, bucket, apiResponse) {\n             *   // `bucket.metadata` has been populated.\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.get().then(function(data) {\n             *   const bucket = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            get: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {array} GetBucketMetadataResponse\n             * @property {object} 0 The bucket metadata.\n             * @property {object} 1 The full API response.\n             */\n            /**\n             * @callback GetBucketMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} metadata The bucket metadata.\n             * @param {object} apiResponse The full API response.\n             */\n            /**\n             * @typedef {object} GetBucketMetadataOptions Configuration options for Bucket#getMetadata().\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * Get the bucket's metadata.\n             *\n             * To set metadata, see {@link Bucket#setMetadata}.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/get| Buckets: get API Documentation}\n             *\n             * @method Bucket#getMetadata\n             * @param {GetBucketMetadataOptions} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {GetBucketMetadataCallback} [callback] Callback function.\n             * @returns {Promise<GetBucketMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * bucket.getMetadata(function(err, metadata, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.getMetadata().then(function(data) {\n             *   const metadata = data[0];\n             *   const apiResponse = data[1];\n             * });\n             *\n             * ```\n             * @example <caption>include:samples/requesterPays.js</caption>\n             * region_tag:storage_get_requester_pays_status\n             * Example of retrieving the requester pays status of a bucket:\n             */\n            getMetadata: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n            /**\n             * @typedef {object} SetBucketMetadataOptions Configuration options for Bucket#setMetadata().\n             * @property {string} [userProject] The ID of the project which will be\n             *     billed for the request.\n             */\n            /**\n             * @typedef {array} SetBucketMetadataResponse\n             * @property {object} apiResponse The full API response.\n             */\n            /**\n             * @callback SetBucketMetadataCallback\n             * @param {?Error} err Request error, if any.\n             * @param {object} metadata The bucket metadata.\n             */\n            /**\n             * Set the bucket's metadata.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n             *\n             * @method Bucket#setMetadata\n             * @param {object<string, *>} metadata The metadata you wish to set.\n             * @param {SetBucketMetadataOptions} [options] Configuration options.\n             * @param {string} [options.userProject] The ID of the project which will be\n             *     billed for the request.\n             * @param {SetBucketMetadataCallback} [callback] Callback function.\n             * @returns {Promise<SetBucketMetadataResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const bucket = storage.bucket('albums');\n             *\n             * //-\n             * // Set website metadata field on the bucket.\n             * //-\n             * const metadata = {\n             *   website: {\n             *     mainPageSuffix: 'http://example.com',\n             *     notFoundPage: 'http://example.com/404.html'\n             *   }\n             * };\n             *\n             * bucket.setMetadata(metadata, function(err, apiResponse) {});\n             *\n             * //-\n             * // Enable versioning for your bucket.\n             * //-\n             * bucket.setMetadata({\n             *   versioning: {\n             *     enabled: true\n             *   }\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // Enable KMS encryption for objects within this bucket.\n             * //-\n             * bucket.setMetadata({\n             *   encryption: {\n             *     defaultKmsKeyName: 'projects/grape-spaceship-123/...'\n             *   }\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // Set the default event-based hold value for new objects in this\n             * // bucket.\n             * //-\n             * bucket.setMetadata({\n             *   defaultEventBasedHold: true\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // Remove object lifecycle rules.\n             * //-\n             * bucket.setMetadata({\n             *   lifecycle: null\n             * }, function(err, apiResponse) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * bucket.setMetadata(metadata).then(function(data) {\n             *   const apiResponse = data[0];\n             * });\n             * ```\n             */\n            setMetadata: {\n                reqOpts: {\n                    qs: requestQueryObject,\n                },\n            },\n        };\n        super({\n            parent: storage,\n            baseUrl: '/b',\n            id: name,\n            createMethod: storage.createBucket.bind(storage),\n            methods,\n        });\n        this.name = name;\n        this.storage = storage;\n        this.userProject = options.userProject;\n        this.acl = new acl_js_1.Acl({\n            request: this.request.bind(this),\n            pathPrefix: '/acl',\n        });\n        this.acl.default = new acl_js_1.Acl({\n            request: this.request.bind(this),\n            pathPrefix: '/defaultObjectAcl',\n        });\n        this.crc32cGenerator =\n            options.crc32cGenerator || this.storage.crc32cGenerator;\n        this.iam = new iam_js_1.Iam(this);\n        this.getFilesStream = paginator_1.paginator.streamify('getFiles');\n        this.instanceRetryValue = storage.retryOptions.autoRetry;\n        this.instancePreconditionOpts = options === null || options === void 0 ? void 0 : options.preconditionOpts;\n    }\n    /**\n     * The bucket's Cloud Storage URI (`gs://`)\n     *\n     * @example\n     * ```ts\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * // `gs://my-bucket`\n     * const href = bucket.cloudStorageURI.href;\n     * ```\n     */\n    get cloudStorageURI() {\n        const uri = new url_1.URL('gs://');\n        uri.host = this.name;\n        return uri;\n    }\n    /**\n     * @typedef {object} AddLifecycleRuleOptions Configuration options for Bucket#addLifecycleRule().\n     * @property {boolean} [append=true] The new rules will be appended to any\n     *     pre-existing rules.\n     */\n    /**\n     *\n     * @typedef {object} LifecycleRule The new lifecycle rule to be added to objects\n     *     in this bucket.\n     * @property {string|object} action The action to be taken upon matching of\n     *     all the conditions 'delete', 'setStorageClass', or 'AbortIncompleteMultipartUpload'.\n     *     **Note**: For configuring a raw-formatted rule object to be passed as `action`\n     *               please refer to the [examples]{@link https://cloud.google.com/storage/docs/managing-lifecycles#configexamples}.\n     * @property {object} condition Condition a bucket must meet before the\n     *     action occurs on the bucket. Refer to following supported [conditions]{@link https://cloud.google.com/storage/docs/lifecycle#conditions}.\n     * @property {string} [storageClass] When using the `setStorageClass`\n     *     action, provide this option to dictate which storage class the object\n     *     should update to. Please see\n     *     [SetStorageClass option documentation]{@link https://cloud.google.com/storage/docs/lifecycle#setstorageclass} for supported transitions.\n     */\n    /**\n     * Add an object lifecycle management rule to the bucket.\n     *\n     * By default, an Object Lifecycle Management rule provided to this method\n     * will be included to the existing policy. To replace all existing rules,\n     * supply the `options` argument, setting `append` to `false`.\n     *\n     * To add multiple rules, pass a list to the `rule` parameter. Calling this\n     * function multiple times asynchronously does not guarantee that all rules\n     * are added correctly.\n     *\n     * See {@link https://cloud.google.com/storage/docs/lifecycle| Object Lifecycle Management}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n     *\n     * @param {LifecycleRule|LifecycleRule[]} rule The new lifecycle rule or rules to be added to objects\n     *     in this bucket.\n     * @param {string|object} rule.action The action to be taken upon matching of\n     *     all the conditions 'delete', 'setStorageClass', or 'AbortIncompleteMultipartUpload'.\n     *     **Note**: For configuring a raw-formatted rule object to be passed as `action`\n     *               please refer to the [examples]{@link https://cloud.google.com/storage/docs/managing-lifecycles#configexamples}.\n     * @param {object} rule.condition Condition a bucket must meet before the\n     *     action occurson the bucket. Refer to followitn supported [conditions]{@link https://cloud.google.com/storage/docs/lifecycle#conditions}.\n     * @param {string} [rule.storageClass] When using the `setStorageClass`\n     *     action, provide this option to dictate which storage class the object\n     *     should update to.\n     * @param {AddLifecycleRuleOptions} [options] Configuration object.\n     * @param {boolean} [options.append=true] Append the new rule to the existing\n     *     policy.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Automatically have an object deleted from this bucket once it is 3 years\n     * // of age.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     age: 365 * 3 // Specified in days.\n     *   }\n     * }, function(err, apiResponse) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   const lifecycleRules = bucket.metadata.lifecycle.rule;\n     *\n     *   // Iterate over the Object Lifecycle Management rules on this bucket.\n     *   lifecycleRules.forEach(lifecycleRule => {});\n     * });\n     *\n     * //-\n     * // By default, the rule you provide will be added to the existing policy.\n     * // Optionally, you can disable this behavior to replace all of the\n     * // pre-existing rules.\n     * //-\n     * const options = {\n     *   append: false\n     * };\n     *\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     age: 365 * 3 // Specified in days.\n     *   }\n     * }, options, function(err, apiResponse) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   // All rules have been replaced with the new \"delete\" rule.\n     *\n     *   // Iterate over the Object Lifecycle Management rules on this bucket.\n     *   lifecycleRules.forEach(lifecycleRule => {});\n     * });\n     *\n     * //-\n     * // For objects created before 2018, \"downgrade\" the storage class.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'setStorageClass',\n     *   storageClass: 'COLDLINE',\n     *   condition: {\n     *     createdBefore: new Date('2018')\n     *   }\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete objects created before 2016 which have the Coldline storage\n     * // class.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     matchesStorageClass: [\n     *       'COLDLINE'\n     *     ],\n     *     createdBefore: new Date('2016')\n     *   }\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete object that has a noncurrent timestamp that is at least 100 days.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     daysSinceNoncurrentTime: 100\n     *   }\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete object that has a noncurrent timestamp before 2020-01-01.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     noncurrentTimeBefore: new Date('2020-01-01')\n     *   }\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete object that has a customTime that is at least 100 days.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     daysSinceCustomTime: 100\n     *   }\n     * }, function(err, apiResponse) ());\n     *\n     * //-\n     * // Delete object that has a customTime before 2020-01-01.\n     * //-\n     * bucket.addLifecycleRule({\n     *   action: 'delete',\n     *   condition: {\n     *     customTimeBefore: new Date('2020-01-01')\n     *   }\n     * }, function(err, apiResponse) {});\n     * ```\n     */\n    addLifecycleRule(rule, optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        const rules = Array.isArray(rule) ? rule : [rule];\n        for (const curRule of rules) {\n            if (curRule.condition.createdBefore instanceof Date) {\n                curRule.condition.createdBefore = curRule.condition.createdBefore\n                    .toISOString()\n                    .replace(/T.+$/, '');\n            }\n            if (curRule.condition.customTimeBefore instanceof Date) {\n                curRule.condition.customTimeBefore = curRule.condition.customTimeBefore\n                    .toISOString()\n                    .replace(/T.+$/, '');\n            }\n            if (curRule.condition.noncurrentTimeBefore instanceof Date) {\n                curRule.condition.noncurrentTimeBefore =\n                    curRule.condition.noncurrentTimeBefore\n                        .toISOString()\n                        .replace(/T.+$/, '');\n            }\n        }\n        if (options.append === false) {\n            this.setMetadata({ lifecycle: { rule: rules } }, options, callback);\n            return;\n        }\n        // The default behavior appends the previously-defined lifecycle rules with\n        // the new ones just passed in by the user.\n        this.getMetadata((err, metadata) => {\n            var _a, _b;\n            if (err) {\n                callback(err);\n                return;\n            }\n            const currentLifecycleRules = Array.isArray((_a = metadata.lifecycle) === null || _a === void 0 ? void 0 : _a.rule)\n                ? (_b = metadata.lifecycle) === null || _b === void 0 ? void 0 : _b.rule\n                : [];\n            this.setMetadata({\n                lifecycle: { rule: currentLifecycleRules.concat(rules) },\n            }, options, callback);\n        });\n    }\n    /**\n     * @typedef {object} CombineOptions\n     * @property {string} [kmsKeyName] Resource name of the Cloud KMS key, of\n     *     the form\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\n     *     that will be used to encrypt the object. Overwrites the object\n     * metadata's `kms_key_name` value, if any.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback CombineCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File} newFile The new {@link File}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {array} CombineResponse\n     * @property {File} 0 The new {@link File}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * Combine multiple files into one new file.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/compose| Objects: compose API Documentation}\n     *\n     * @throws {Error} if a non-array is provided as sources argument.\n     * @throws {Error} if no sources are provided.\n     * @throws {Error} if no destination is provided.\n     *\n     * @param {string[]|File[]} sources The source files that will be\n     *     combined.\n     * @param {string|File} destination The file you would like the\n     *     source files combined into.\n     * @param {CombineOptions} [options] Configuration options.\n     * @param {string} [options.kmsKeyName] Resource name of the Cloud KMS key, of\n     *     the form\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`,\n     *     that will be used to encrypt the object. Overwrites the object\n     * metadata's `kms_key_name` value, if any.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n  \n     * @param {CombineCallback} [callback] Callback function.\n     * @returns {Promise<CombineResponse>}\n     *\n     * @example\n     * ```\n     * const logBucket = storage.bucket('log-bucket');\n     *\n     * const sources = [\n     *   logBucket.file('2013-logs.txt'),\n     *   logBucket.file('2014-logs.txt')\n     * ];\n     *\n     * const allLogs = logBucket.file('all-logs.txt');\n     *\n     * logBucket.combine(sources, allLogs, function(err, newFile, apiResponse) {\n     *   // newFile === allLogs\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * logBucket.combine(sources, allLogs).then(function(data) {\n     *   const newFile = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    combine(sources, destination, optionsOrCallback, callback) {\n        var _a;\n        if (!Array.isArray(sources) || sources.length === 0) {\n            throw new Error(BucketExceptionMessages.PROVIDE_SOURCE_FILE);\n        }\n        if (!destination) {\n            throw new Error(BucketExceptionMessages.DESTINATION_FILE_NOT_SPECIFIED);\n        }\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, // Not relevant but param is required\n        AvailableServiceObjectMethods.setMetadata, // Same as above\n        options);\n        const convertToFile = (file) => {\n            if (file instanceof file_js_1.File) {\n                return file;\n            }\n            return this.file(file);\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        sources = sources.map(convertToFile);\n        const destinationFile = convertToFile(destination);\n        callback = callback || index_js_1.util.noop;\n        if (!destinationFile.metadata.contentType) {\n            const destinationContentType = mime_1.default.getType(destinationFile.name) || undefined;\n            if (destinationContentType) {\n                destinationFile.metadata.contentType = destinationContentType;\n            }\n        }\n        let maxRetries = this.storage.retryOptions.maxRetries;\n        if ((((_a = destinationFile === null || destinationFile === void 0 ? void 0 : destinationFile.instancePreconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) ===\n            undefined &&\n            options.ifGenerationMatch === undefined &&\n            this.storage.retryOptions.idempotencyStrategy ===\n                storage_js_1.IdempotencyStrategy.RetryConditional) ||\n            this.storage.retryOptions.idempotencyStrategy ===\n                storage_js_1.IdempotencyStrategy.RetryNever) {\n            maxRetries = 0;\n        }\n        if (options.ifGenerationMatch === undefined) {\n            Object.assign(options, destinationFile.instancePreconditionOpts, options);\n        }\n        // Make the request from the destination File object.\n        destinationFile.request({\n            method: 'POST',\n            uri: '/compose',\n            maxRetries,\n            json: {\n                destination: {\n                    contentType: destinationFile.metadata.contentType,\n                    contentEncoding: destinationFile.metadata.contentEncoding,\n                },\n                sourceObjects: sources.map(source => {\n                    const sourceObject = {\n                        name: source.name,\n                    };\n                    if (source.metadata && source.metadata.generation) {\n                        sourceObject.generation = parseInt(source.metadata.generation.toString());\n                    }\n                    return sourceObject;\n                }),\n            },\n            qs: options,\n        }, (err, resp) => {\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            callback(null, destinationFile, resp);\n        });\n    }\n    /**\n     * See a {@link https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll| Objects: watchAll request body}.\n     *\n     * @typedef {object} CreateChannelConfig\n     * @property {string} address The address where notifications are\n     *     delivered for this channel.\n     * @property {string} [delimiter] Returns results in a directory-like mode.\n     * @property {number} [maxResults] Maximum number of `items` plus `prefixes`\n     *     to return in a single page of responses.\n     * @property {string} [pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @property {string} [prefix] Filter results to objects whose names begin\n     *     with this prefix.\n     * @property {string} [projection=noAcl] Set of properties to return.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {boolean} [versions=false] If `true`, lists all versions of an object\n     *     as distinct results.\n     */\n    /**\n     * @typedef {object} CreateChannelOptions\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @typedef {array} CreateChannelResponse\n     * @property {Channel} 0 The new {@link Channel}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback CreateChannelCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Channel} channel The new {@link Channel}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Create a channel that will be notified when objects in this bucket changes.\n     *\n     * @throws {Error} If an ID is not provided.\n     * @throws {Error} If an address is not provided.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/watchAll| Objects: watchAll API Documentation}\n     *\n     * @param {string} id The ID of the channel to create.\n     * @param {CreateChannelConfig} config Configuration for creating channel.\n     * @param {string} config.address The address where notifications are\n     *     delivered for this channel.\n     * @param {string} [config.delimiter] Returns results in a directory-like mode.\n     * @param {number} [config.maxResults] Maximum number of `items` plus `prefixes`\n     *     to return in a single page of responses.\n     * @param {string} [config.pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @param {string} [config.prefix] Filter results to objects whose names begin\n     *     with this prefix.\n     * @param {string} [config.projection=noAcl] Set of properties to return.\n     * @param {string} [config.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {boolean} [config.versions=false] If `true`, lists all versions of an object\n     *     as distinct results.\n     * @param {CreateChannelOptions} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {CreateChannelCallback} [callback] Callback function.\n     * @returns {Promise<CreateChannelResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     * const id = 'new-channel-id';\n     *\n     * const config = {\n     *   address: 'https://...'\n     * };\n     *\n     * bucket.createChannel(id, config, function(err, channel, apiResponse) {\n     *   if (!err) {\n     *     // Channel created successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.createChannel(id, config).then(function(data) {\n     *   const channel = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    createChannel(id, config, optionsOrCallback, callback) {\n        if (typeof id !== 'string') {\n            throw new Error(BucketExceptionMessages.CHANNEL_ID_REQUIRED);\n        }\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.request({\n            method: 'POST',\n            uri: '/o/watch',\n            json: Object.assign({\n                id,\n                type: 'web_hook',\n            }, config),\n            qs: options,\n        }, (err, apiResponse) => {\n            if (err) {\n                callback(err, null, apiResponse);\n                return;\n            }\n            const resourceId = apiResponse.resourceId;\n            const channel = this.storage.channel(id, resourceId);\n            channel.metadata = apiResponse;\n            callback(null, channel, apiResponse);\n        });\n    }\n    /**\n     * Metadata to set for the Notification.\n     *\n     * @typedef {object} CreateNotificationOptions\n     * @property {object} [customAttributes] An optional list of additional\n     *     attributes to attach to each Cloud PubSub message published for this\n     *     notification subscription.\n     * @property {string[]} [eventTypes] If present, only send notifications about\n     *     listed event types. If empty, sent notifications for all event types.\n     * @property {string} [objectNamePrefix] If present, only apply this\n     *     notification configuration to object names that begin with this prefix.\n     * @property {string} [payloadFormat] The desired content of the Payload.\n     * Defaults to `JSON_API_V1`.\n     *\n     * Acceptable values are:\n     * - `JSON_API_V1`\n     *\n     * - `NONE`\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback CreateNotificationCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Notification} notification The new {@link Notification}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {array} CreateNotificationResponse\n     * @property {Notification} 0 The new {@link Notification}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * Creates a notification subscription for the bucket.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert| Notifications: insert}\n     *\n     * @param {Topic|string} topic The Cloud PubSub topic to which this\n     * subscription publishes. If the project ID is omitted, the current\n     * project ID will be used.\n     *\n     * Acceptable formats are:\n     * - `projects/grape-spaceship-123/topics/my-topic`\n     *\n     * - `my-topic`\n     * @param {CreateNotificationOptions} [options] Metadata to set for the\n     *     notification.\n     * @param {object} [options.customAttributes] An optional list of additional\n     *     attributes to attach to each Cloud PubSub message published for this\n     *     notification subscription.\n     * @param {string[]} [options.eventTypes] If present, only send notifications about\n     *     listed event types. If empty, sent notifications for all event types.\n     * @param {string} [options.objectNamePrefix] If present, only apply this\n     *     notification configuration to object names that begin with this prefix.\n     * @param {string} [options.payloadFormat] The desired content of the Payload.\n     * Defaults to `JSON_API_V1`.\n     *\n     * Acceptable values are:\n     * - `JSON_API_V1`\n     *\n     * - `NONE`\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {CreateNotificationCallback} [callback] Callback function.\n     * @returns {Promise<CreateNotificationResponse>}\n     * @throws {Error} If a valid topic is not provided.\n     * @see Notification#create\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * const callback = function(err, notification, apiResponse) {\n     *   if (!err) {\n     *     // The notification was created successfully.\n     *   }\n     * };\n     *\n     * myBucket.createNotification('my-topic', callback);\n     *\n     * //-\n     * // Configure the nofiication by providing Notification metadata.\n     * //-\n     * const metadata = {\n     *   objectNamePrefix: 'prefix-'\n     * };\n     *\n     * myBucket.createNotification('my-topic', metadata, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myBucket.createNotification('my-topic').then(function(data) {\n     *   const notification = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/createNotification.js</caption>\n     * region_tag:storage_create_bucket_notifications\n     * Another example:\n     */\n    createNotification(topic, optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        const topicIsObject = topic !== null && typeof topic === 'object';\n        if (topicIsObject && index_js_1.util.isCustomType(topic, 'pubsub/topic')) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            topic = topic.name;\n        }\n        if (typeof topic !== 'string') {\n            throw new Error(BucketExceptionMessages.TOPIC_NAME_REQUIRED);\n        }\n        const body = Object.assign({ topic }, options);\n        if (body.topic.indexOf('projects') !== 0) {\n            body.topic = 'projects/{{projectId}}/topics/' + body.topic;\n        }\n        body.topic = `//pubsub.${this.storage.universeDomain}/` + body.topic;\n        if (!body.payloadFormat) {\n            body.payloadFormat = 'JSON_API_V1';\n        }\n        const query = {};\n        if (body.userProject) {\n            query.userProject = body.userProject;\n            delete body.userProject;\n        }\n        this.request({\n            method: 'POST',\n            uri: '/notificationConfigs',\n            json: (0, util_js_1.convertObjKeysToSnakeCase)(body),\n            qs: query,\n            maxRetries: 0, //explicitly set this value since this is a non-idempotent function\n        }, (err, apiResponse) => {\n            if (err) {\n                callback(err, null, apiResponse);\n                return;\n            }\n            const notification = this.notification(apiResponse.id);\n            notification.metadata = apiResponse;\n            callback(null, notification, apiResponse);\n        });\n    }\n    /**\n     * @typedef {object} DeleteFilesOptions Query object. See {@link Bucket#getFiles}\n     *     for all of the supported properties.\n     * @property {boolean} [force] Suppress errors until all files have been\n     *     processed.\n     */\n    /**\n     * @callback DeleteFilesCallback\n     * @param {?Error|?Error[]} err Request error, if any, or array of errors from\n     *     files that were not able to be deleted.\n     * @param {object} [apiResponse] The full API response.\n     */\n    /**\n     * Iterate over the bucket's files, calling `file.delete()` on each.\n     *\n     * <strong>This is not an atomic request.</strong> A delete attempt will be\n     * made for each file individually. Any one can fail, in which case only a\n     * portion of the files you intended to be deleted would have.\n     *\n     * Operations are performed in parallel, up to 10 at once. The first error\n     * breaks the loop and will execute the provided callback with it. Specify\n     * `{ force: true }` to suppress the errors until all files have had a chance\n     * to be processed.\n     *\n     * File preconditions cannot be passed to this function. It will not retry unless\n     * the idempotency strategy is set to retry always.\n     *\n     * The `query` object passed as the first argument will also be passed to\n     * {@link Bucket#getFiles}.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/delete| Objects: delete API Documentation}\n     *\n     * @param {DeleteFilesOptions} [query] Query object. See {@link Bucket#getFiles}\n     * @param {boolean} [query.force] Suppress errors until all files have been\n     *     processed.\n     * @param {DeleteFilesCallback} [callback] Callback function.\n     * @returns {Promise}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Delete all of the files in the bucket.\n     * //-\n     * bucket.deleteFiles(function(err) {});\n     *\n     * //-\n     * // By default, if a file cannot be deleted, this method will stop deleting\n     * // files from your bucket. You can override this setting with `force:\n     * // true`.\n     * //-\n     * bucket.deleteFiles({\n     *   force: true\n     * }, function(errors) {\n     *   // `errors`:\n     *   //    Array of errors if any occurred, otherwise null.\n     * });\n     *\n     * //-\n     * // The first argument to this method acts as a query to\n     * // {@link Bucket#getFiles}. As an example, you can delete files\n     * // which match a prefix.\n     * //-\n     * bucket.deleteFiles({\n     *   prefix: 'images/'\n     * }, function(err) {\n     *   if (!err) {\n     *     // All files in the `images` directory have been deleted.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.deleteFiles().then(function() {});\n     * ```\n     */\n    deleteFiles(queryOrCallback, callback) {\n        let query = {};\n        if (typeof queryOrCallback === 'function') {\n            callback = queryOrCallback;\n        }\n        else if (queryOrCallback) {\n            query = queryOrCallback;\n        }\n        const MAX_PARALLEL_LIMIT = 10;\n        const MAX_QUEUE_SIZE = 1000;\n        const errors = [];\n        const deleteFile = (file) => {\n            return file.delete(query).catch(err => {\n                if (!query.force) {\n                    throw err;\n                }\n                errors.push(err);\n            });\n        };\n        (async () => {\n            try {\n                let promises = [];\n                const limit = (0, p_limit_1.default)(MAX_PARALLEL_LIMIT);\n                const filesStream = this.getFilesStream(query);\n                for await (const curFile of filesStream) {\n                    if (promises.length >= MAX_QUEUE_SIZE) {\n                        await Promise.all(promises);\n                        promises = [];\n                    }\n                    promises.push(limit(() => deleteFile(curFile)).catch(e => {\n                        filesStream.destroy();\n                        throw e;\n                    }));\n                }\n                await Promise.all(promises);\n                callback(errors.length > 0 ? errors : null);\n            }\n            catch (e) {\n                callback(e);\n                return;\n            }\n        })();\n    }\n    /**\n     * @deprecated\n     * @typedef {array} DeleteLabelsResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @deprecated\n     * @callback DeleteLabelsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} metadata Bucket's metadata.\n     */\n    /**\n     * @deprecated Use setMetadata directly\n     * Delete one or more labels from this bucket.\n     *\n     * @param {string|string[]} [labels] The labels to delete. If no labels are\n     *     provided, all of the labels are removed.\n     * @param {DeleteLabelsCallback} [callback] Callback function.\n     * @param {DeleteLabelsOptions} [options] Options, including precondition options\n     * @returns {Promise<DeleteLabelsResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Delete all of the labels from this bucket.\n     * //-\n     * bucket.deleteLabels(function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete a single label.\n     * //-\n     * bucket.deleteLabels('labelone', function(err, apiResponse) {});\n     *\n     * //-\n     * // Delete a specific set of labels.\n     * //-\n     * bucket.deleteLabels([\n     *   'labelone',\n     *   'labeltwo'\n     * ], function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.deleteLabels().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    deleteLabels(labelsOrCallbackOrOptions, optionsOrCallback, callback) {\n        let labels = new Array();\n        let options = {};\n        if (typeof labelsOrCallbackOrOptions === 'function') {\n            callback = labelsOrCallbackOrOptions;\n        }\n        else if (typeof labelsOrCallbackOrOptions === 'string') {\n            labels = [labelsOrCallbackOrOptions];\n        }\n        else if (Array.isArray(labelsOrCallbackOrOptions)) {\n            labels = labelsOrCallbackOrOptions;\n        }\n        else if (labelsOrCallbackOrOptions) {\n            options = labelsOrCallbackOrOptions;\n        }\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        const deleteLabels = (labels) => {\n            const nullLabelMap = labels.reduce((nullLabelMap, labelKey) => {\n                nullLabelMap[labelKey] = null;\n                return nullLabelMap;\n            }, {});\n            if ((options === null || options === void 0 ? void 0 : options.ifMetagenerationMatch) !== undefined) {\n                this.setLabels(nullLabelMap, options, callback);\n            }\n            else {\n                this.setLabels(nullLabelMap, callback);\n            }\n        };\n        if (labels.length === 0) {\n            this.getLabels((err, labels) => {\n                if (err) {\n                    callback(err);\n                    return;\n                }\n                deleteLabels(Object.keys(labels));\n            });\n        }\n        else {\n            deleteLabels(labels);\n        }\n    }\n    /**\n     * @typedef {array} DisableRequesterPaysResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback DisableRequesterPaysCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * <div class=\"notice\">\n     *   <strong>Early Access Testers Only</strong>\n     *   <p>\n     *     This feature is not yet widely-available.\n     *   </p>\n     * </div>\n     *\n     * Disable `requesterPays` functionality from this bucket.\n     *\n     * @param {DisableRequesterPaysCallback} [callback] Callback function.\n     * @param {DisableRequesterPaysOptions} [options] Options, including precondition options\n     * @returns {Promise<DisableRequesterPaysCallback>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.disableRequesterPays(function(err, apiResponse) {\n     *   if (!err) {\n     *     // requesterPays functionality disabled successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.disableRequesterPays().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/requesterPays.js</caption>\n     * region_tag:storage_disable_requester_pays\n     * Example of disabling requester pays:\n     */\n    disableRequesterPays(optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.setMetadata({\n            billing: {\n                requesterPays: false,\n            },\n        }, options, callback);\n    }\n    /**\n     * Configuration object for enabling logging.\n     *\n     * @typedef {object} EnableLoggingOptions\n     * @property {string|Bucket} [bucket] The bucket for the log entries. By\n     *     default, the current bucket is used.\n     * @property {string} prefix A unique prefix for log object names.\n     */\n    /**\n     * Enable logging functionality for this bucket. This will make two API\n     * requests, first to grant Cloud Storage WRITE permission to the bucket, then\n     * to set the appropriate configuration on the Bucket's metadata.\n     *\n     * @param {EnableLoggingOptions} config Configuration options.\n     * @param {string|Bucket} [config.bucket] The bucket for the log entries. By\n     *     default, the current bucket is used.\n     * @param {string} config.prefix A unique prefix for log object names.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * const config = {\n     *   prefix: 'log'\n     * };\n     *\n     * bucket.enableLogging(config, function(err, apiResponse) {\n     *   if (!err) {\n     *     // Logging functionality enabled successfully.\n     *   }\n     * });\n     *\n     * ```\n     * @example\n     * Optionally, provide a destination bucket.\n     * ```\n     * const config = {\n     *   prefix: 'log',\n     *   bucket: 'destination-bucket'\n     * };\n     *\n     * bucket.enableLogging(config, function(err, apiResponse) {});\n     * ```\n     *\n     * @example\n     * If the callback is omitted, we'll return a Promise.\n     * ```\n     * bucket.enableLogging(config).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    enableLogging(config, callback) {\n        if (!config ||\n            typeof config === 'function' ||\n            typeof config.prefix === 'undefined') {\n            throw new Error(BucketExceptionMessages.CONFIGURATION_OBJECT_PREFIX_REQUIRED);\n        }\n        let logBucket = this.id;\n        if (config.bucket && config.bucket instanceof Bucket) {\n            logBucket = config.bucket.id;\n        }\n        else if (config.bucket && typeof config.bucket === 'string') {\n            logBucket = config.bucket;\n        }\n        const options = {};\n        if (config === null || config === void 0 ? void 0 : config.ifMetagenerationMatch) {\n            options.ifMetagenerationMatch = config.ifMetagenerationMatch;\n        }\n        if (config === null || config === void 0 ? void 0 : config.ifMetagenerationNotMatch) {\n            options.ifMetagenerationNotMatch = config.ifMetagenerationNotMatch;\n        }\n        (async () => {\n            try {\n                const [policy] = await this.iam.getPolicy();\n                policy.bindings.push({\n                    members: ['group:cloud-storage-analytics@google.com'],\n                    role: 'roles/storage.objectCreator',\n                });\n                await this.iam.setPolicy(policy);\n                this.setMetadata({\n                    logging: {\n                        logBucket,\n                        logObjectPrefix: config.prefix,\n                    },\n                }, options, callback);\n            }\n            catch (e) {\n                callback(e);\n                return;\n            }\n        })();\n    }\n    /**\n     * @typedef {array} EnableRequesterPaysResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback EnableRequesterPaysCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * <div class=\"notice\">\n     *   <strong>Early Access Testers Only</strong>\n     *   <p>\n     *     This feature is not yet widely-available.\n     *   </p>\n     * </div>\n     *\n     * Enable `requesterPays` functionality for this bucket. This enables you, the\n     * bucket owner, to have the requesting user assume the charges for the access\n     * to your bucket and its contents.\n     *\n     * @param {EnableRequesterPaysCallback | EnableRequesterPaysOptions} [optionsOrCallback]\n     * Callback function or precondition options.\n     * @returns {Promise<EnableRequesterPaysResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.enableRequesterPays(function(err, apiResponse) {\n     *   if (!err) {\n     *     // requesterPays functionality enabled successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.enableRequesterPays().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/requesterPays.js</caption>\n     * region_tag:storage_enable_requester_pays\n     * Example of enabling requester pays:\n     */\n    enableRequesterPays(optionsOrCallback, cb) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            cb = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.setMetadata({\n            billing: {\n                requesterPays: true,\n            },\n        }, options, cb);\n    }\n    /**\n     * Create a {@link File} object. See {@link File} to see how to handle\n     * the different use cases you may have.\n     *\n     * @param {string} name The name of the file in this bucket.\n     * @param {FileOptions} [options] Configuration options.\n     * @param {string|number} [options.generation] Only use a specific revision of\n     *     this file.\n     * @param {string} [options.encryptionKey] A custom encryption key. See\n     *     {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}.\n     * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\n     *     be used to encrypt the object. Must be in the format:\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n     *     KMS key ring must use the same location as the bucket.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for all requests made from File object.\n     * @returns {File}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     * const file = bucket.file('my-existing-file.png');\n     * ```\n     */\n    file(name, options) {\n        if (!name) {\n            throw Error(BucketExceptionMessages.SPECIFY_FILE_NAME);\n        }\n        return new file_js_1.File(this, name, options);\n    }\n    /**\n     * @typedef {array} GetFilesResponse\n     * @property {File[]} 0 Array of {@link File} instances.\n     * @param {object} nextQuery 1 A query object to receive more results.\n     * @param {object} apiResponse 2 The full API response.\n     */\n    /**\n     * @callback GetFilesCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files Array of {@link File} instances.\n     * @param {object} nextQuery A query object to receive more results.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Query object for listing files.\n     *\n     * @typedef {object} GetFilesOptions\n     * @property {boolean} [autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @property {string} [delimiter] Results will contain only objects whose\n     *     names, aside from the prefix, do not contain delimiter. Objects whose\n     *     names, aside from the prefix, contain delimiter will have their name\n     *     truncated after the delimiter, returned in `apiResponse.prefixes`.\n     *     Duplicate prefixes are omitted.\n     * @property {string} [endOffset] Filter results to objects whose names are\n     * lexicographically before endOffset. If startOffset is also set, the objects\n     * listed have names between startOffset (inclusive) and endOffset (exclusive).\n     * @property {boolean} [includeFoldersAsPrefixes] If true, includes folders and\n     * managed folders in the set of prefixes returned by the query. Only applicable if\n     * delimiter is set to / and autoPaginate is set to false.\n     * See: https://cloud.google.com/storage/docs/managed-folders\n     * @property {boolean} [includeTrailingDelimiter] If true, objects that end in\n     * exactly one instance of delimiter have their metadata included in items[]\n     * in addition to the relevant part of the object name appearing in prefixes[].\n     * @property {string} [prefix] Filter results to objects whose names begin\n     *     with this prefix.\n     * @property {string} [matchGlob] A glob pattern used to filter results,\n     *     for example foo*bar\n     * @property {number} [maxApiCalls] Maximum number of API calls to make.\n     * @property {number} [maxResults] Maximum number of items plus prefixes to\n     *     return per call.\n     *     Note: By default will handle pagination automatically\n     *     if more than 1 page worth of results are requested per call.\n     *     When `autoPaginate` is set to `false` the smaller of `maxResults`\n     *     or 1 page of results will be returned per call.\n     * @property {string} [pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @property {boolean} [softDeleted] If true, only soft-deleted object versions will be\n     *     listed as distinct results in order of generation number. Note `soft_deleted` and\n     *     `versions` cannot be set to true simultaneously.\n     * @property {string} [startOffset] Filter results to objects whose names are\n     * lexicographically equal to or after startOffset. If endOffset is also set,\n     * the objects listed have names between startOffset (inclusive) and endOffset (exclusive).\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {boolean} [versions] If true, returns File objects scoped to\n     *     their versions.\n     */\n    /**\n     * Get {@link File} objects for the files currently in the bucket.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/list| Objects: list API Documentation}\n     *\n     * @param {GetFilesOptions} [query] Query object for listing files.\n     * @param {boolean} [query.autoPaginate=true] Have pagination handled\n     *     automatically.\n     * @param {string} [query.delimiter] Results will contain only objects whose\n     *     names, aside from the prefix, do not contain delimiter. Objects whose\n     *     names, aside from the prefix, contain delimiter will have their name\n     *     truncated after the delimiter, returned in `apiResponse.prefixes`.\n     *     Duplicate prefixes are omitted.\n     * @param {string} [query.endOffset] Filter results to objects whose names are\n     * lexicographically before endOffset. If startOffset is also set, the objects\n     * listed have names between startOffset (inclusive) and endOffset (exclusive).\n     * @param {boolean} [query.includeFoldersAsPrefixes] If true, includes folders and\n     * managed folders in the set of prefixes returned by the query. Only applicable if\n     * delimiter is set to / and autoPaginate is set to false.\n     * See: https://cloud.google.com/storage/docs/managed-folders\n     * @param {boolean} [query.includeTrailingDelimiter] If true, objects that end in\n     * exactly one instance of delimiter have their metadata included in items[]\n     * in addition to the relevant part of the object name appearing in prefixes[].\n     * @param {string} [query.prefix] Filter results to objects whose names begin\n     *     with this prefix.\n     * @param {number} [query.maxApiCalls] Maximum number of API calls to make.\n     * @param {number} [query.maxResults] Maximum number of items plus prefixes to\n     *     return per call.\n     *     Note: By default will handle pagination automatically\n     *     if more than 1 page worth of results are requested per call.\n     *     When `autoPaginate` is set to `false` the smaller of `maxResults`\n     *     or 1 page of results will be returned per call.\n     * @param {string} [query.pageToken] A previously-returned page token\n     *     representing part of the larger set of results to view.\n     * @param {boolean} [query.softDeleted] If true, only soft-deleted object versions will be\n     *     listed as distinct results in order of generation number. Note `soft_deleted` and\n     *     `versions` cannot be set to true simultaneously.\n     * @param {string} [query.startOffset] Filter results to objects whose names are\n     * lexicographically equal to or after startOffset. If endOffset is also set,\n     * the objects listed have names between startOffset (inclusive) and endOffset (exclusive).\n     * @param {string} [query.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {boolean} [query.versions] If true, returns File objects scoped to\n     *     their versions.\n     * @param {GetFilesCallback} [callback] Callback function.\n     * @returns {Promise<GetFilesResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.getFiles(function(err, files) {\n     *   if (!err) {\n     *     // files is an array of File objects.\n     *   }\n     * });\n     *\n     * //-\n     * // If your bucket has versioning enabled, you can get all of your files\n     * // scoped to their generation.\n     * //-\n     * bucket.getFiles({\n     *   versions: true\n     * }, function(err, files) {\n     *   // Each file is scoped to its generation.\n     * });\n     *\n     * //-\n     * // To control how many API requests are made and page through the results\n     * // manually, set `autoPaginate` to `false`.\n     * //-\n     * const callback = function(err, files, nextQuery, apiResponse) {\n     *   if (nextQuery) {\n     *     // More results exist.\n     *     bucket.getFiles(nextQuery, callback);\n     *   }\n     *\n     *   // The `metadata` property is populated for you with the metadata at the\n     *   // time of fetching.\n     *   files[0].metadata;\n     *\n     *   // However, in cases where you are concerned the metadata could have\n     *   // changed, use the `getMetadata` method.\n     *   files[0].getMetadata(function(err, metadata) {});\n     * };\n     *\n     * bucket.getFiles({\n     *   autoPaginate: false\n     * }, callback);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getFiles().then(function(data) {\n     *   const files = data[0];\n     * });\n     *\n     * ```\n     * @example\n     * <h6>Simulating a File System</h6><p>With `autoPaginate: false`, it's possible to iterate over files which incorporate a common structure using a delimiter.</p><p>Consider the following remote objects:</p><ol><li>\"a\"</li><li>\"a/b/c/d\"</li><li>\"b/d/e\"</li></ol><p>Using a delimiter of `/` will return a single file, \"a\".</p><p>`apiResponse.prefixes` will return the \"sub-directories\" that were found:</p><ol><li>\"a/\"</li><li>\"b/\"</li></ol>\n     * ```\n     * bucket.getFiles({\n     *   autoPaginate: false,\n     *   delimiter: '/'\n     * }, function(err, files, nextQuery, apiResponse) {\n     *   // files = [\n     *   //   {File} // File object for file \"a\"\n     *   // ]\n     *\n     *   // apiResponse.prefixes = [\n     *   //   'a/',\n     *   //   'b/'\n     *   // ]\n     * });\n     * ```\n     *\n     * @example\n     * Using prefixes, it's now possible to simulate a file system with follow-up requests.\n     * ```\n     * bucket.getFiles({\n     *   autoPaginate: false,\n     *   delimiter: '/',\n     *   prefix: 'a/'\n     * }, function(err, files, nextQuery, apiResponse) {\n     *   // No files found within \"directory\" a.\n     *   // files = []\n     *\n     *   // However, a \"sub-directory\" was found.\n     *   // This prefix can be used to continue traversing the \"file system\".\n     *   // apiResponse.prefixes = [\n     *   //   'a/b/'\n     *   // ]\n     * });\n     * ```\n     *\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_list_files\n     * Another example:\n     *\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_list_files_with_prefix\n     * Example of listing files, filtered by a prefix:\n     */\n    getFiles(queryOrCallback, callback) {\n        let query = typeof queryOrCallback === 'object' ? queryOrCallback : {};\n        if (!callback) {\n            callback = queryOrCallback;\n        }\n        query = Object.assign({}, query);\n        this.request({\n            uri: '/o',\n            qs: query,\n        }, (err, resp) => {\n            if (err) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                callback(err, null, null, resp);\n                return;\n            }\n            const itemsArray = resp.items ? resp.items : [];\n            const files = itemsArray.map((file) => {\n                const options = {};\n                if (query.fields) {\n                    const fileInstance = file;\n                    return fileInstance;\n                }\n                if (query.versions) {\n                    options.generation = file.generation;\n                }\n                if (file.kmsKeyName) {\n                    options.kmsKeyName = file.kmsKeyName;\n                }\n                const fileInstance = this.file(file.name, options);\n                fileInstance.metadata = file;\n                return fileInstance;\n            });\n            let nextQuery = null;\n            if (resp.nextPageToken) {\n                nextQuery = Object.assign({}, query, {\n                    pageToken: resp.nextPageToken,\n                });\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            callback(null, files, nextQuery, resp);\n        });\n    }\n    /**\n     * @deprecated\n     * @typedef {object} GetLabelsOptions Configuration options for Bucket#getLabels().\n     * @param {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @deprecated\n     * @typedef {array} GetLabelsResponse\n     * @property {object} 0 Object of labels currently set on this bucket.\n     */\n    /**\n     * @deprecated\n     * @callback GetLabelsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} labels Object of labels currently set on this bucket.\n     */\n    /**\n     * @deprecated Use getMetadata directly.\n     * Get the labels currently set on this bucket.\n     *\n     * @param {object} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {GetLabelsCallback} [callback] Callback function.\n     * @returns {Promise<GetLabelsCallback>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.getLabels(function(err, labels) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   // labels = {\n     *   //   label: 'labelValue',\n     *   //   ...\n     *   // }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getLabels().then(function(data) {\n     *   const labels = data[0];\n     * });\n     * ```\n     */\n    getLabels(optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.getMetadata(options, (err, metadata) => {\n            if (err) {\n                callback(err, null);\n                return;\n            }\n            callback(null, (metadata === null || metadata === void 0 ? void 0 : metadata.labels) || {});\n        });\n    }\n    /**\n     * @typedef {object} GetNotificationsOptions Configuration options for Bucket#getNotification().\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback GetNotificationsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {Notification[]} notifications Array of {@link Notification}\n     *     instances.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * @typedef {array} GetNotificationsResponse\n     * @property {Notification[]} 0 Array of {@link Notification} instances.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * Retrieves a list of notification subscriptions for a given bucket.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/list| Notifications: list}\n     *\n     * @param {GetNotificationsOptions} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {GetNotificationsCallback} [callback] Callback function.\n     * @returns {Promise<GetNotificationsResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * bucket.getNotifications(function(err, notifications, apiResponse) {\n     *   if (!err) {\n     *     // notifications is an array of Notification objects.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getNotifications().then(function(data) {\n     *   const notifications = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/listNotifications.js</caption>\n     * region_tag:storage_list_bucket_notifications\n     * Another example:\n     */\n    getNotifications(optionsOrCallback, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else if (optionsOrCallback) {\n            options = optionsOrCallback;\n        }\n        this.request({\n            uri: '/notificationConfigs',\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const itemsArray = resp.items ? resp.items : [];\n            const notifications = itemsArray.map((notification) => {\n                const notificationInstance = this.notification(notification.id);\n                notificationInstance.metadata = notification;\n                return notificationInstance;\n            });\n            callback(null, notifications, resp);\n        });\n    }\n    /**\n     * @typedef {array} GetSignedUrlResponse\n     * @property {object} 0 The signed URL.\n     */\n    /**\n     * @callback GetSignedUrlCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} url The signed URL.\n     */\n    /**\n     * @typedef {object} GetBucketSignedUrlConfig\n     * @property {string} action Only listing objects within a bucket (HTTP: GET) is supported for bucket-level signed URLs.\n     * @property {*} expires A timestamp when this link will expire. Any value\n     *     given is passed to `new Date()`.\n     *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\n     * @property {string} [version='v2'] The signing version to use, either\n     *     'v2' or 'v4'.\n     * @property {boolean} [virtualHostedStyle=false] Use virtual hosted-style\n     *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\n     *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\n     *     should generally be preferred instaed of path-style URL.\n     *     Currently defaults to `false` for path-style, although this may change in a\n     *     future major-version release.\n     * @property {string} [cname] The cname for this bucket, i.e.,\n     *     \"https://cdn.example.com\".\n     *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\n     * @property {object} [extensionHeaders] If these headers are used, the\n     * server will check to make sure that the client provides matching\n     * values. See {@link https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers| Canonical extension headers}\n     * for the requirements of this feature, most notably:\n     * - The header name must be prefixed with `x-goog-`\n     * - The header name must be all lowercase\n     *\n     * Note: Multi-valued header passed as an array in the extensionHeaders\n     *       object is converted into a string, delimited by `,` with\n     *       no space. Requests made using the signed URL will need to\n     *       delimit multi-valued headers using a single `,` as well, or\n     *       else the server will report a mismatched signature.\n     * @property {object} [queryParams] Additional query parameters to include\n     *     in the signed URL.\n     */\n    /**\n     * Get a signed URL to allow limited time access to a bucket.\n     *\n     * In Google Cloud Platform environments, such as Cloud Functions and App\n     * Engine, you usually don't provide a `keyFilename` or `credentials` during\n     * instantiation. In those environments, we call the\n     * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/signBlob| signBlob API}\n     * to create a signed URL. That API requires either the\n     * `https://www.googleapis.com/auth/iam` or\n     * `https://www.googleapis.com/auth/cloud-platform` scope, so be sure they are\n     * enabled.\n     *\n     * See {@link https://cloud.google.com/storage/docs/access-control/signed-urls| Signed URLs Reference}\n     *\n     * @throws {Error} if an expiration timestamp from the past is given.\n     *\n     * @param {GetBucketSignedUrlConfig} config Configuration object.\n     * @param {string} config.action Currently only supports \"list\" (HTTP: GET).\n     * @param {*} config.expires A timestamp when this link will expire. Any value\n     *     given is passed to `new Date()`.\n     *     Note: 'v4' supports maximum duration of 7 days (604800 seconds) from now.\n     * @param {string} [config.version='v2'] The signing version to use, either\n     *     'v2' or 'v4'.\n     * @param {boolean} [config.virtualHostedStyle=false] Use virtual hosted-style\n     *     URLs ('https://mybucket.storage.googleapis.com/...') instead of path-style\n     *     ('https://storage.googleapis.com/mybucket/...'). Virtual hosted-style URLs\n     *     should generally be preferred instaed of path-style URL.\n     *     Currently defaults to `false` for path-style, although this may change in a\n     *     future major-version release.\n     * @param {string} [config.cname] The cname for this bucket, i.e.,\n     *     \"https://cdn.example.com\".\n     *     See [reference]{@link https://cloud.google.com/storage/docs/access-control/signed-urls#example}\n     * @param {object} [config.extensionHeaders] If these headers are used, the\n     * server will check to make sure that the client provides matching\n     * values. See {@link https://cloud.google.com/storage/docs/access-control/signed-urls#about-canonical-extension-headers| Canonical extension headers}\n     * for the requirements of this feature, most notably:\n     * - The header name must be prefixed with `x-goog-`\n     * - The header name must be all lowercase\n     *\n     * Note: Multi-valued header passed as an array in the extensionHeaders\n     *       object is converted into a string, delimited by `,` with\n     *       no space. Requests made using the signed URL will need to\n     *       delimit multi-valued headers using a single `,` as well, or\n     *       else the server will report a mismatched signature.\n     * @property {object} [config.queryParams] Additional query parameters to include\n     *     in the signed URL.\n     * @param {GetSignedUrlCallback} [callback] Callback function.\n     * @returns {Promise<GetSignedUrlResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     *\n     * //-\n     * // Generate a URL that allows temporary access to list files in a bucket.\n     * //-\n     * const request = require('request');\n     *\n     * const config = {\n     *   action: 'list',\n     *   expires: '03-17-2025'\n     * };\n     *\n     * bucket.getSignedUrl(config, function(err, url) {\n     *   if (err) {\n     *     console.error(err);\n     *     return;\n     *   }\n     *\n     *   // The bucket is now available to be listed from this URL.\n     *   request(url, function(err, resp) {\n     *     // resp.statusCode = 200\n     *   });\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.getSignedUrl(config).then(function(data) {\n     *   const url = data[0];\n     * });\n     * ```\n     */\n    getSignedUrl(cfg, callback) {\n        const method = BucketActionToHTTPMethod[cfg.action];\n        const signConfig = {\n            method,\n            expires: cfg.expires,\n            version: cfg.version,\n            cname: cfg.cname,\n            extensionHeaders: cfg.extensionHeaders || {},\n            queryParams: cfg.queryParams || {},\n            host: cfg.host,\n            signingEndpoint: cfg.signingEndpoint,\n        };\n        if (!this.signer) {\n            this.signer = new signer_js_1.URLSigner(this.storage.authClient, this, undefined, this.storage);\n        }\n        this.signer\n            .getSignedUrl(signConfig)\n            .then(signedUrl => callback(null, signedUrl), callback);\n    }\n    /**\n     * @callback BucketLockCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Lock a previously-defined retention policy. This will prevent changes to\n     * the policy.\n     *\n     * @throws {Error} if a metageneration is not provided.\n     *\n     * @param {number|string} metageneration The bucket's metageneration. This is\n     *     accesssible from calling {@link File#getMetadata}.\n     * @param {BucketLockCallback} [callback] Callback function.\n     * @returns {Promise<BucketLockResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * const metageneration = 2;\n     *\n     * bucket.lock(metageneration, function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.lock(metageneration).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    lock(metageneration, callback) {\n        const metatype = typeof metageneration;\n        if (metatype !== 'number' && metatype !== 'string') {\n            throw new Error(BucketExceptionMessages.METAGENERATION_NOT_PROVIDED);\n        }\n        this.request({\n            method: 'POST',\n            uri: '/lockRetentionPolicy',\n            qs: {\n                ifMetagenerationMatch: metageneration,\n            },\n        }, callback);\n    }\n    /**\n     * @typedef {array} MakeBucketPrivateResponse\n     * @property {File[]} 0 List of files made private.\n     */\n    /**\n     * @callback MakeBucketPrivateCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files List of files made private.\n     */\n    /**\n     * @typedef {object} MakeBucketPrivateOptions\n     * @property {boolean} [includeFiles=false] Make each file in the bucket\n     *     private.\n     * @property {Metadata} [metadata] Define custom metadata properties to define\n     *     along with the operation.\n     * @property {boolean} [force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * Make the bucket listing private.\n     *\n     * You may also choose to make the contents of the bucket private by\n     * specifying `includeFiles: true`. This will automatically run\n     * {@link File#makePrivate} for every file in the bucket.\n     *\n     * When specifying `includeFiles: true`, use `force: true` to delay execution\n     * of your callback until all files have been processed. By default, the\n     * callback is executed after the first error. Use `force` to queue such\n     * errors until all files have been processed, after which they will be\n     * returned as an array as the first argument to your callback.\n     *\n     * NOTE: This may cause the process to be long-running and use a high number\n     * of requests. Use with caution.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n     *\n     * @param {MakeBucketPrivateOptions} [options] Configuration options.\n     * @param {boolean} [options.includeFiles=false] Make each file in the bucket\n     *     private.\n     * @param {Metadata} [options.metadata] Define custom metadata properties to define\n     *     along with the operation.\n     * @param {boolean} [options.force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {MakeBucketPrivateCallback} [callback] Callback function.\n     * @returns {Promise<MakeBucketPrivateResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Make the bucket private.\n     * //-\n     * bucket.makePrivate(function(err) {});\n     *\n     * //-\n     * // Make the bucket and its contents private.\n     * //-\n     * const opts = {\n     *   includeFiles: true\n     * };\n     *\n     * bucket.makePrivate(opts, function(err, files) {\n     *   // `err`:\n     *   //    The first error to occur, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made private in the bucket.\n     * });\n     *\n     * //-\n     * // Make the bucket and its contents private, using force to suppress errors\n     * // until all files have been processed.\n     * //-\n     * const opts = {\n     *   includeFiles: true,\n     *   force: true\n     * };\n     *\n     * bucket.makePrivate(opts, function(errors, files) {\n     *   // `errors`:\n     *   //    Array of errors if any occurred, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made private in the bucket.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.makePrivate(opts).then(function(data) {\n     *   const files = data[0];\n     * });\n     * ```\n     */\n    makePrivate(optionsOrCallback, callback) {\n        var _a, _b, _c, _d;\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        options.private = true;\n        const query = {\n            predefinedAcl: 'projectPrivate',\n        };\n        if (options.userProject) {\n            query.userProject = options.userProject;\n        }\n        if ((_a = options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) {\n            query.ifGenerationMatch = options.preconditionOpts.ifGenerationMatch;\n        }\n        if ((_b = options.preconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationNotMatch) {\n            query.ifGenerationNotMatch =\n                options.preconditionOpts.ifGenerationNotMatch;\n        }\n        if ((_c = options.preconditionOpts) === null || _c === void 0 ? void 0 : _c.ifMetagenerationMatch) {\n            query.ifMetagenerationMatch =\n                options.preconditionOpts.ifMetagenerationMatch;\n        }\n        if ((_d = options.preconditionOpts) === null || _d === void 0 ? void 0 : _d.ifMetagenerationNotMatch) {\n            query.ifMetagenerationNotMatch =\n                options.preconditionOpts.ifMetagenerationNotMatch;\n        }\n        // You aren't allowed to set both predefinedAcl & acl properties on a bucket\n        // so acl must explicitly be nullified.\n        const metadata = { ...options.metadata, acl: null };\n        this.setMetadata(metadata, query, (err) => {\n            if (err) {\n                callback(err);\n            }\n            const internalCall = () => {\n                if (options.includeFiles) {\n                    return (0, util_1.promisify)(this.makeAllFilesPublicPrivate_).call(this, options);\n                }\n                return Promise.resolve([]);\n            };\n            internalCall()\n                .then(files => callback(null, files))\n                .catch(callback);\n        });\n    }\n    /**\n     * @typedef {object} MakeBucketPublicOptions\n     * @property {boolean} [includeFiles=false] Make each file in the bucket\n     *     private.\n     * @property {boolean} [force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     */\n    /**\n     * @callback MakeBucketPublicCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files List of files made public.\n     */\n    /**\n     * @typedef {array} MakeBucketPublicResponse\n     * @property {File[]} 0 List of files made public.\n     */\n    /**\n     * Make the bucket publicly readable.\n     *\n     * You may also choose to make the contents of the bucket publicly readable by\n     * specifying `includeFiles: true`. This will automatically run\n     * {@link File#makePublic} for every file in the bucket.\n     *\n     * When specifying `includeFiles: true`, use `force: true` to delay execution\n     * of your callback until all files have been processed. By default, the\n     * callback is executed after the first error. Use `force` to queue such\n     * errors until all files have been processed, after which they will be\n     * returned as an array as the first argument to your callback.\n     *\n     * NOTE: This may cause the process to be long-running and use a high number\n     * of requests. Use with caution.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/buckets/patch| Buckets: patch API Documentation}\n     *\n     * @param {MakeBucketPublicOptions} [options] Configuration options.\n     * @param {boolean} [options.includeFiles=false] Make each file in the bucket\n     *     private.\n     * @param {boolean} [options.force] Queue errors occurred while making files\n     *     private until all files have been processed.\n     * @param {MakeBucketPublicCallback} [callback] Callback function.\n     * @returns {Promise<MakeBucketPublicResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Make the bucket publicly readable.\n     * //-\n     * bucket.makePublic(function(err) {});\n     *\n     * //-\n     * // Make the bucket and its contents publicly readable.\n     * //-\n     * const opts = {\n     *   includeFiles: true\n     * };\n     *\n     * bucket.makePublic(opts, function(err, files) {\n     *   // `err`:\n     *   //    The first error to occur, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made public in the bucket.\n     * });\n     *\n     * //-\n     * // Make the bucket and its contents publicly readable, using force to\n     * // suppress errors until all files have been processed.\n     * //-\n     * const opts = {\n     *   includeFiles: true,\n     *   force: true\n     * };\n     *\n     * bucket.makePublic(opts, function(errors, files) {\n     *   // `errors`:\n     *   //    Array of errors if any occurred, otherwise null.\n     *   //\n     *   // `files`:\n     *   //    Array of files successfully made public in the bucket.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.makePublic(opts).then(function(data) {\n     *   const files = data[0];\n     * });\n     * ```\n     */\n    makePublic(optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const req = { public: true, ...options };\n        this.acl\n            .add({\n            entity: 'allUsers',\n            role: 'READER',\n        })\n            .then(() => {\n            return this.acl.default.add({\n                entity: 'allUsers',\n                role: 'READER',\n            });\n        })\n            .then(() => {\n            if (req.includeFiles) {\n                return (0, util_1.promisify)(this.makeAllFilesPublicPrivate_).call(this, req);\n            }\n            return [];\n        })\n            .then(files => callback(null, files), callback);\n    }\n    /**\n     * Get a reference to a Cloud Pub/Sub Notification.\n     *\n     * @param {string} id ID of notification.\n     * @returns {Notification}\n     * @see Notification\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     * const notification = bucket.notification('1');\n     * ```\n     */\n    notification(id) {\n        if (!id) {\n            throw new Error(BucketExceptionMessages.SUPPLY_NOTIFICATION_ID);\n        }\n        return new notification_js_1.Notification(this, id);\n    }\n    /**\n     * Remove an already-existing retention policy from this bucket, if it is not\n     * locked.\n     *\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @param {SetBucketMetadataOptions} [options] Options, including precondition options\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.removeRetentionPeriod(function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.removeRetentionPeriod().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    removeRetentionPeriod(optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        this.setMetadata({\n            retentionPolicy: null,\n        }, options, callback);\n    }\n    /**\n     * Makes request and applies userProject query parameter if necessary.\n     *\n     * @private\n     *\n     * @param {object} reqOpts - The request options.\n     * @param {function} callback - The callback function.\n     */\n    request(reqOpts, callback) {\n        if (this.userProject && (!reqOpts.qs || !reqOpts.qs.userProject)) {\n            reqOpts.qs = { ...reqOpts.qs, userProject: this.userProject };\n        }\n        return super.request(reqOpts, callback);\n    }\n    /**\n     * @deprecated\n     * @typedef {array} SetLabelsResponse\n     * @property {object} 0 The bucket metadata.\n     */\n    /**\n     * @deprecated\n     * @callback SetLabelsCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} metadata The bucket metadata.\n     */\n    /**\n     * @deprecated\n     * @typedef {object} SetLabelsOptions Configuration options for Bucket#setLabels().\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @deprecated Use setMetadata directly.\n     * Set labels on the bucket.\n     *\n     * This makes an underlying call to {@link Bucket#setMetadata}, which\n     * is a PATCH request. This means an individual label can be overwritten, but\n     * unmentioned labels will not be touched.\n     *\n     * @param {object<string, string>} labels Labels to set on the bucket.\n     * @param {SetLabelsOptions} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {SetLabelsCallback} [callback] Callback function.\n     * @returns {Promise<SetLabelsResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * const labels = {\n     *   labelone: 'labelonevalue',\n     *   labeltwo: 'labeltwovalue'\n     * };\n     *\n     * bucket.setLabels(labels, function(err, metadata) {\n     *   if (!err) {\n     *     // Labels set successfully.\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setLabels(labels).then(function(data) {\n     *   const metadata = data[0];\n     * });\n     * ```\n     */\n    setLabels(labels, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        callback = callback || index_js_1.util.noop;\n        this.setMetadata({ labels }, options, callback);\n    }\n    setMetadata(metadata, optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        cb =\n            typeof optionsOrCallback === 'function'\n                ? optionsOrCallback\n                : cb;\n        this.disableAutoRetryConditionallyIdempotent_(this.methods.setMetadata, AvailableServiceObjectMethods.setMetadata, options);\n        super\n            .setMetadata(metadata, options)\n            .then(resp => cb(null, ...resp))\n            .catch(cb)\n            .finally(() => {\n            this.storage.retryOptions.autoRetry = this.instanceRetryValue;\n        });\n    }\n    /**\n     * Lock all objects contained in the bucket, based on their creation time. Any\n     * attempt to overwrite or delete objects younger than the retention period\n     * will result in a `PERMISSION_DENIED` error.\n     *\n     * An unlocked retention policy can be modified or removed from the bucket via\n     * {@link File#removeRetentionPeriod} and {@link File#setRetentionPeriod}. A\n     * locked retention policy cannot be removed or shortened in duration for the\n     * lifetime of the bucket. Attempting to remove or decrease period of a locked\n     * retention policy will result in a `PERMISSION_DENIED` error. You can still\n     * increase the policy.\n     *\n     * @param {*} duration In seconds, the minimum retention time for all objects\n     *     contained in this bucket.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @param {SetBucketMetadataCallback} [options] Options, including precondition options.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * const DURATION_SECONDS = 15780000; // 6 months.\n     *\n     * //-\n     * // Lock the objects in this bucket for 6 months.\n     * //-\n     * bucket.setRetentionPeriod(DURATION_SECONDS, function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setRetentionPeriod(DURATION_SECONDS).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    setRetentionPeriod(duration, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        this.setMetadata({\n            retentionPolicy: {\n                retentionPeriod: duration.toString(),\n            },\n        }, options, callback);\n    }\n    /**\n     *\n     * @typedef {object} Cors\n     * @property {number} [maxAgeSeconds] The number of seconds the browser is\n     *     allowed to make requests before it must repeat the preflight request.\n     * @property {string[]} [method] HTTP method allowed for cross origin resource\n     *     sharing with this bucket.\n     * @property {string[]} [origin] an origin allowed for cross origin resource\n     *     sharing with this bucket.\n     * @property {string[]} [responseHeader] A header allowed for cross origin\n     *     resource sharing with this bucket.\n     */\n    /**\n     * This can be used to set the CORS configuration on the bucket.\n     *\n     * The configuration will be overwritten with the value passed into this.\n     *\n     * @param {Cors[]} corsConfiguration The new CORS configuration to set\n     * @param {number} [corsConfiguration.maxAgeSeconds] The number of seconds the browser is\n     *     allowed to make requests before it must repeat the preflight request.\n     * @param {string[]} [corsConfiguration.method] HTTP method allowed for cross origin resource\n     *     sharing with this bucket.\n     * @param {string[]} [corsConfiguration.origin] an origin allowed for cross origin resource\n     *     sharing with this bucket.\n     * @param {string[]} [corsConfiguration.responseHeader] A header allowed for cross origin\n     *     resource sharing with this bucket.\n     * @param {SetBucketMetadataCallback} [callback] Callback function.\n     * @param {SetBucketMetadataOptions} [options] Options, including precondition options.\n     * @returns {Promise<SetBucketMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const bucket = storage.bucket('albums');\n     *\n     * const corsConfiguration = [{maxAgeSeconds: 3600}]; // 1 hour\n     * bucket.setCorsConfiguration(corsConfiguration);\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setCorsConfiguration(corsConfiguration).then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     * ```\n     */\n    setCorsConfiguration(corsConfiguration, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        this.setMetadata({\n            cors: corsConfiguration,\n        }, options, callback);\n    }\n    /**\n     * @typedef {object} SetBucketStorageClassOptions\n     * @property {string} [userProject] - The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @callback SetBucketStorageClassCallback\n     * @param {?Error} err Request error, if any.\n     */\n    /**\n     * Set the default storage class for new files in this bucket.\n     *\n     * See {@link https://cloud.google.com/storage/docs/storage-classes| Storage Classes}\n     *\n     * @param {string} storageClass The new storage class. (`standard`,\n     *     `nearline`, `coldline`, or `archive`).\n     *     **Note:** The storage classes `multi_regional`, `regional`, and\n     *     `durable_reduced_availability` are now legacy and will be deprecated in\n     *     the future.\n     * @param {object} [options] Configuration options.\n     * @param {string} [options.userProject] - The ID of the project which will be\n     *     billed for the request.\n     * @param {SetStorageClassCallback} [callback] Callback function.\n     * @returns {Promise}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.setStorageClass('nearline', function(err, apiResponse) {\n     *   if (err) {\n     *     // Error handling omitted.\n     *   }\n     *\n     *   // The storage class was updated successfully.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.setStorageClass('nearline').then(function() {});\n     * ```\n     */\n    setStorageClass(storageClass, optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        // In case we get input like `storageClass`, convert to `storage_class`.\n        storageClass = storageClass\n            .replace(/-/g, '_')\n            .replace(/([a-z])([A-Z])/g, (_, low, up) => {\n            return low + '_' + up;\n        })\n            .toUpperCase();\n        this.setMetadata({ storageClass }, options, callback);\n    }\n    /**\n     * Set a user project to be billed for all requests made from this Bucket\n     * object and any files referenced from this Bucket object.\n     *\n     * @param {string} userProject The user project.\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * bucket.setUserProject('grape-spaceship-123');\n     * ```\n     */\n    setUserProject(userProject) {\n        this.userProject = userProject;\n        const methods = [\n            'create',\n            'delete',\n            'exists',\n            'get',\n            'getMetadata',\n            'setMetadata',\n        ];\n        methods.forEach(method => {\n            const methodConfig = this.methods[method];\n            if (typeof methodConfig === 'object') {\n                if (typeof methodConfig.reqOpts === 'object') {\n                    Object.assign(methodConfig.reqOpts.qs, { userProject });\n                }\n                else {\n                    methodConfig.reqOpts = {\n                        qs: { userProject },\n                    };\n                }\n            }\n        });\n    }\n    /**\n     * @typedef {object} UploadOptions Configuration options for Bucket#upload().\n     * @property {string|File} [destination] The place to save\n     *     your file. If given a string, the file will be uploaded to the bucket\n     *     using the string as a filename. When given a File object, your local\n     * file will be uploaded to the File object's bucket and under the File\n     * object's name. Lastly, when this argument is omitted, the file is uploaded\n     * to your bucket using the name of the local file.\n     * @property {string} [encryptionKey] A custom encryption key. See\n     *     {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}.\n     * @property {boolean} [gzip] Automatically gzip the file. This will set\n     *     `options.metadata.contentEncoding` to `gzip`.\n     * @property {string} [kmsKeyName] The name of the Cloud KMS key that will\n     *     be used to encrypt the object. Must be in the format:\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n     * @property {object} [metadata] See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON| Objects: insert request body}.\n     * @property {string} [offset] The starting byte of the upload stream, for\n     *     resuming an interrupted upload. Defaults to 0.\n     * @property {string} [predefinedAcl] Apply a predefined set of access\n     * controls to this object.\n     *\n     * Acceptable values are:\n     * - **`authenticatedRead`** - Object owner gets `OWNER` access, and\n     *       `allAuthenticatedUsers` get `READER` access.\n     *\n     * - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\n     *       project team owners get `OWNER` access.\n     *\n     * - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\n     *       team owners get `READER` access.\n     *\n     * - **`private`** - Object owner gets `OWNER` access.\n     *\n     * - **`projectPrivate`** - Object owner gets `OWNER` access, and project\n     *       team members get access according to their roles.\n     *\n     * - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\n     *       get `READER` access.\n     * @property {boolean} [private] Make the uploaded file private. (Alias for\n     *     `options.predefinedAcl = 'private'`)\n     * @property {boolean} [public] Make the uploaded file public. (Alias for\n     *     `options.predefinedAcl = 'publicRead'`)\n     * @property {boolean} [resumable=true] Resumable uploads are automatically\n     *     enabled and must be shut off explicitly by setting to false.\n     * @property {number} [timeout=60000] Set the HTTP request timeout in\n     *     milliseconds. This option is not available for resumable uploads.\n     *     Default: `60000`\n     * @property {string} [uri] The URI for an already-created resumable\n     *     upload. See {@link File#createResumableUpload}.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     * @property {string|boolean} [validation] Possible values: `\"md5\"`,\n     *     `\"crc32c\"`, or `false`. By default, data integrity is validated with an\n     *     MD5 checksum for maximum reliability. CRC32c will provide better\n     *     performance with less reliability. You may also choose to skip\n     * validation completely, however this is **not recommended**.\n     */\n    /**\n     * @typedef {array} UploadResponse\n     * @property {object} 0 The uploaded {@link File}.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback UploadCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} file The uploaded {@link File}.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Upload a file to the bucket. This is a convenience method that wraps\n     * {@link File#createWriteStream}.\n     *\n     * Resumable uploads are enabled by default\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/how-tos/upload#uploads| Upload Options (Simple or Resumable)}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert| Objects: insert API Documentation}\n     *\n     * @param {string} pathString The fully qualified path to the file you\n     *     wish to upload to your bucket.\n     * @param {UploadOptions} [options] Configuration options.\n     * @param {string|File} [options.destination] The place to save\n     *     your file. If given a string, the file will be uploaded to the bucket\n     *     using the string as a filename. When given a File object, your local\n     * file will be uploaded to the File object's bucket and under the File\n     * object's name. Lastly, when this argument is omitted, the file is uploaded\n     * to your bucket using the name of the local file.\n     * @param {string} [options.encryptionKey] A custom encryption key. See\n     *     {@link https://cloud.google.com/storage/docs/encryption#customer-supplied| Customer-supplied Encryption Keys}.\n     * @param {boolean} [options.gzip] Automatically gzip the file. This will set\n     *     `options.metadata.contentEncoding` to `gzip`.\n     * @param {string} [options.kmsKeyName] The name of the Cloud KMS key that will\n     *     be used to encrypt the object. Must be in the format:\n     *     `projects/my-project/locations/location/keyRings/my-kr/cryptoKeys/my-key`.\n     * @param {object} [options.metadata] See an\n     *     {@link https://cloud.google.com/storage/docs/json_api/v1/objects/insert#request_properties_JSON| Objects: insert request body}.\n     * @param {string} [options.offset] The starting byte of the upload stream, for\n     *     resuming an interrupted upload. Defaults to 0.\n     * @param {string} [options.predefinedAcl] Apply a predefined set of access\n     * controls to this object.\n     * Acceptable values are:\n     * - **`authenticatedRead`** - Object owner gets `OWNER` access, and\n     *   `allAuthenticatedUsers` get `READER` access.\n     *\n     * - **`bucketOwnerFullControl`** - Object owner gets `OWNER` access, and\n     *   project team owners get `OWNER` access.\n     *\n     * - **`bucketOwnerRead`** - Object owner gets `OWNER` access, and project\n     *   team owners get `READER` access.\n     *\n     * - **`private`** - Object owner gets `OWNER` access.\n     *\n     * - **`projectPrivate`** - Object owner gets `OWNER` access, and project\n     *   team members get access according to their roles.\n     *\n     * - **`publicRead`** - Object owner gets `OWNER` access, and `allUsers`\n     *   get `READER` access.\n     * @param {boolean} [options.private] Make the uploaded file private. (Alias for\n     *     `options.predefinedAcl = 'private'`)\n     * @param {boolean} [options.public] Make the uploaded file public. (Alias for\n     *     `options.predefinedAcl = 'publicRead'`)\n     * @param {boolean} [options.resumable=true] Resumable uploads are automatically\n     *     enabled and must be shut off explicitly by setting to false.\n     * @param {number} [options.timeout=60000] Set the HTTP request timeout in\n     *     milliseconds. This option is not available for resumable uploads.\n     *     Default: `60000`\n     * @param {string} [options.uri] The URI for an already-created resumable\n     *     upload. See {@link File#createResumableUpload}.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {string|boolean} [options.validation] Possible values: `\"md5\"`,\n     *     `\"crc32c\"`, or `false`. By default, data integrity is validated with an\n     *     MD5 checksum for maximum reliability. CRC32c will provide better\n     *     performance with less reliability. You may also choose to skip\n     * validation completely, however this is **not recommended**.\n     * @param {UploadCallback} [callback] Callback function.\n     * @returns {Promise<UploadResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('albums');\n     *\n     * //-\n     * // Upload a file from a local path.\n     * //-\n     * bucket.upload('/local/path/image.png', function(err, file, apiResponse) {\n     *   // Your bucket now contains:\n     *   // - \"image.png\" (with the contents of `/local/path/image.png')\n     *\n     *   // `file` is an instance of a File object that refers to your new file.\n     * });\n     *\n     *\n     * //-\n     * // It's not always that easy. You will likely want to specify the filename\n     * // used when your new file lands in your bucket.\n     * //\n     * // You may also want to set metadata or customize other options.\n     * //-\n     * const options = {\n     *   destination: 'new-image.png',\n     *   validation: 'crc32c',\n     *   metadata: {\n     *     metadata: {\n     *       event: 'Fall trip to the zoo'\n     *     }\n     *   }\n     * };\n     *\n     * bucket.upload('local-image.png', options, function(err, file) {\n     *   // Your bucket now contains:\n     *   // - \"new-image.png\" (with the contents of `local-image.png')\n     *\n     *   // `file` is an instance of a File object that refers to your new file.\n     * });\n     *\n     * //-\n     * // You can also have a file gzip'd on the fly.\n     * //-\n     * bucket.upload('index.html', { gzip: true }, function(err, file) {\n     *   // Your bucket now contains:\n     *   // - \"index.html\" (automatically compressed with gzip)\n     *\n     *   // Downloading the file with `file.download` will automatically decode\n     * the\n     *   // file.\n     * });\n     *\n     * //-\n     * // You may also re-use a File object, {File}, that references\n     * // the file you wish to create or overwrite.\n     * //-\n     * const options = {\n     *   destination: bucket.file('existing-file.png'),\n     *   resumable: false\n     * };\n     *\n     * bucket.upload('local-img.png', options, function(err, newFile) {\n     *   // Your bucket now contains:\n     *   // - \"existing-file.png\" (with the contents of `local-img.png')\n     *\n     *   // Note:\n     *   // The `newFile` parameter is equal to `file`.\n     * });\n     *\n     * //-\n     * // To use\n     * // <a\n     * href=\"https://cloud.google.com/storage/docs/encryption#customer-supplied\">\n     * // Customer-supplied Encryption Keys</a>, provide the `encryptionKey`\n     * option.\n     * //-\n     * const crypto = require('crypto');\n     * const encryptionKey = crypto.randomBytes(32);\n     *\n     * bucket.upload('img.png', {\n     *   encryptionKey: encryptionKey\n     * }, function(err, newFile) {\n     *   // `img.png` was uploaded with your custom encryption key.\n     *\n     *   // `newFile` is already configured to use the encryption key when making\n     *   // operations on the remote object.\n     *\n     *   // However, to use your encryption key later, you must create a `File`\n     *   // instance with the `key` supplied:\n     *   const file = bucket.file('img.png', {\n     *     encryptionKey: encryptionKey\n     *   });\n     *\n     *   // Or with `file#setEncryptionKey`:\n     *   const file = bucket.file('img.png');\n     *   file.setEncryptionKey(encryptionKey);\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.upload('local-image.png').then(function(data) {\n     *   const file = data[0];\n     * });\n     *\n     * To upload a file from a URL, use {@link File#createWriteStream}.\n     *\n     * ```\n     * @example <caption>include:samples/files.js</caption>\n     * region_tag:storage_upload_file\n     * Another example:\n     *\n     * @example <caption>include:samples/encryption.js</caption>\n     * region_tag:storage_upload_encrypted_file\n     * Example of uploading an encrypted file:\n     */\n    upload(pathString, optionsOrCallback, callback) {\n        var _a, _b;\n        const upload = (numberOfRetries) => {\n            const returnValue = (0, async_retry_1.default)(async (bail) => {\n                await new Promise((resolve, reject) => {\n                    var _a, _b;\n                    if (numberOfRetries === 0 &&\n                        ((_b = (_a = newFile === null || newFile === void 0 ? void 0 : newFile.storage) === null || _a === void 0 ? void 0 : _a.retryOptions) === null || _b === void 0 ? void 0 : _b.autoRetry)) {\n                        newFile.storage.retryOptions.autoRetry = false;\n                    }\n                    const writable = newFile.createWriteStream(options);\n                    if (options.onUploadProgress) {\n                        writable.on('progress', options.onUploadProgress);\n                    }\n                    fs.createReadStream(pathString)\n                        .on('error', bail)\n                        .pipe(writable)\n                        .on('error', err => {\n                        if (this.storage.retryOptions.autoRetry &&\n                            this.storage.retryOptions.retryableErrorFn(err)) {\n                            return reject(err);\n                        }\n                        else {\n                            return bail(err);\n                        }\n                    })\n                        .on('finish', () => {\n                        return resolve();\n                    });\n                });\n            }, {\n                retries: numberOfRetries,\n                factor: this.storage.retryOptions.retryDelayMultiplier,\n                maxTimeout: this.storage.retryOptions.maxRetryDelay * 1000, //convert to milliseconds\n                maxRetryTime: this.storage.retryOptions.totalTimeout * 1000, //convert to milliseconds\n            });\n            if (!callback) {\n                return returnValue;\n            }\n            else {\n                return returnValue\n                    .then(() => {\n                    if (callback) {\n                        return callback(null, newFile, newFile.metadata);\n                    }\n                })\n                    .catch(callback);\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (global['GCLOUD_SANDBOX_ENV']) {\n            return;\n        }\n        let options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        options = Object.assign({\n            metadata: {},\n        }, options);\n        // Do not retry if precondition option ifGenerationMatch is not set\n        // because this is a file operation\n        let maxRetries = this.storage.retryOptions.maxRetries;\n        if ((((_a = options === null || options === void 0 ? void 0 : options.preconditionOpts) === null || _a === void 0 ? void 0 : _a.ifGenerationMatch) === undefined &&\n            ((_b = this.instancePreconditionOpts) === null || _b === void 0 ? void 0 : _b.ifGenerationMatch) === undefined &&\n            this.storage.retryOptions.idempotencyStrategy ===\n                storage_js_1.IdempotencyStrategy.RetryConditional) ||\n            this.storage.retryOptions.idempotencyStrategy ===\n                storage_js_1.IdempotencyStrategy.RetryNever) {\n            maxRetries = 0;\n        }\n        let newFile;\n        if (options.destination instanceof file_js_1.File) {\n            newFile = options.destination;\n        }\n        else if (options.destination !== null &&\n            typeof options.destination === 'string') {\n            // Use the string as the name of the file.\n            newFile = this.file(options.destination, {\n                encryptionKey: options.encryptionKey,\n                kmsKeyName: options.kmsKeyName,\n                preconditionOpts: this.instancePreconditionOpts,\n            });\n        }\n        else {\n            // Resort to using the name of the incoming file.\n            const destination = path.basename(pathString);\n            newFile = this.file(destination, {\n                encryptionKey: options.encryptionKey,\n                kmsKeyName: options.kmsKeyName,\n                preconditionOpts: this.instancePreconditionOpts,\n            });\n        }\n        upload(maxRetries);\n    }\n    /**\n     * @private\n     *\n     * @typedef {object} MakeAllFilesPublicPrivateOptions\n     * @property {boolean} [force] Suppress errors until all files have been\n     *     processed.\n     * @property {boolean} [private] Make files private.\n     * @property {boolean} [public] Make files public.\n     * @property {string} [userProject] The ID of the project which will be\n     *     billed for the request.\n     */\n    /**\n     * @private\n     *\n     * @callback SetBucketMetadataCallback\n     * @param {?Error} err Request error, if any.\n     * @param {File[]} files Files that were updated.\n     */\n    /**\n     * @typedef {array} MakeAllFilesPublicPrivateResponse\n     * @property {File[]} 0 List of files affected.\n     */\n    /**\n     * Iterate over all of a bucket's files, calling `file.makePublic()` (public)\n     * or `file.makePrivate()` (private) on each.\n     *\n     * Operations are performed in parallel, up to 10 at once. The first error\n     * breaks the loop, and will execute the provided callback with it. Specify\n     * `{ force: true }` to suppress the errors.\n     *\n     * @private\n     *\n     * @param {MakeAllFilesPublicPrivateOptions} [options] Configuration options.\n     * @param {boolean} [options.force] Suppress errors until all files have been\n     *     processed.\n     * @param {boolean} [options.private] Make files private.\n     * @param {boolean} [options.public] Make files public.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n  \n     * @param {MakeAllFilesPublicPrivateCallback} callback Callback function.\n     *\n     * @return {Promise<MakeAllFilesPublicPrivateResponse>}\n     */\n    makeAllFilesPublicPrivate_(optionsOrCallback, callback) {\n        const MAX_PARALLEL_LIMIT = 10;\n        const errors = [];\n        const updatedFiles = [];\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const processFile = async (file) => {\n            try {\n                await (options.public ? file.makePublic() : file.makePrivate(options));\n                updatedFiles.push(file);\n            }\n            catch (e) {\n                if (!options.force) {\n                    throw e;\n                }\n                errors.push(e);\n            }\n        };\n        this.getFiles(options)\n            .then(([files]) => {\n            const limit = (0, p_limit_1.default)(MAX_PARALLEL_LIMIT);\n            const promises = files.map(file => {\n                return limit(() => processFile(file));\n            });\n            return Promise.all(promises);\n        })\n            .then(() => callback(errors.length > 0 ? errors : null, updatedFiles), err => callback(err, updatedFiles));\n    }\n    getId() {\n        return this.id;\n    }\n    disableAutoRetryConditionallyIdempotent_(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    coreOpts, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    methodType, localPreconditionOptions) {\n        var _a, _b;\n        if (typeof coreOpts === 'object' &&\n            ((_b = (_a = coreOpts === null || coreOpts === void 0 ? void 0 : coreOpts.reqOpts) === null || _a === void 0 ? void 0 : _a.qs) === null || _b === void 0 ? void 0 : _b.ifMetagenerationMatch) === undefined &&\n            (localPreconditionOptions === null || localPreconditionOptions === void 0 ? void 0 : localPreconditionOptions.ifMetagenerationMatch) === undefined &&\n            (methodType === AvailableServiceObjectMethods.setMetadata ||\n                methodType === AvailableServiceObjectMethods.delete) &&\n            this.storage.retryOptions.idempotencyStrategy ===\n                storage_js_1.IdempotencyStrategy.RetryConditional) {\n            this.storage.retryOptions.autoRetry = false;\n        }\n        else if (this.storage.retryOptions.idempotencyStrategy ===\n            storage_js_1.IdempotencyStrategy.RetryNever) {\n            this.storage.retryOptions.autoRetry = false;\n        }\n    }\n}\nexports.Bucket = Bucket;\n/*! Developer Documentation\n *\n * These methods can be auto-paginated.\n */\npaginator_1.paginator.extend(Bucket, 'getFiles');\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0, promisify_1.promisifyAll)(Bucket, {\n    exclude: ['cloudStorageURI', 'request', 'file', 'notification'],\n});\n"],"mappings":"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CL,MAAM,CAAC;QAChC,IAAI,CAACnI,WAAW,CAAC;UACbyI,OAAO,EAAE;YACLR,SAAS;YACTS,eAAe,EAAE1D,MAAM,CAAC+C;UAC5B;QACJ,CAAC,EAAElJ,OAAO,EAAE+C,QAAQ,CAAC;MACzB,CAAC,CACD,OAAOoF,CAAC,EAAE;QACNpF,QAAQ,CAACoF,CAAC,CAAC;QACX;MACJ;IACJ,CAAC,GAAG;EACR;EACA;AACJ;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI2B,mBAAmB,CAAChH,iBAAiB,EAAEiH,EAAE,EAAE;IACvC,IAAI/J,OAAO,GAAG,CAAC,CAAC;IAChB,IAAI,OAAO8C,iBAAiB,KAAK,UAAU,EAAE;MACzCiH,EAAE,GAAGjH,iBAAiB;IAC1B,CAAC,MACI,IAAIA,iBAAiB,EAAE;MACxB9C,OAAO,GAAG8C,iBAAiB;IAC/B;IACA,IAAI,CAAC3B,WAAW,CAAC;MACb4H,OAAO,EAAE;QACLC,aAAa,EAAE;MACnB;IACJ,CAAC,EAAEhJ,OAAO,EAAE+J,EAAE,CAAC;EACnB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACItF,IAAI,CAAC1E,IAAI,EAAEC,OAAO,EAAE;IAChB,IAAI,CAACD,IAAI,EAAE;MACP,MAAMqE,KAAK,CAACjG,uBAAuB,CAAC6L,iBAAiB,CAAC;IAC1D;IACA,OAAO,IAAI9K,SAAS,CAACwF,IAAI,CAAC,IAAI,EAAE3E,IAAI,EAAEC,OAAO,CAAC;EAClD;EACA;AACJ;AACA;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIiK,QAAQ,CAAC5C,eAAe,EAAEtE,QAAQ,EAAE;IAChC,IAAIpD,KAAK,GAAG,OAAO0H,eAAe,KAAK,QAAQ,GAAGA,eAAe,GAAG,CAAC,CAAC;IACtE,IAAI,CAACtE,QAAQ,EAAE;MACXA,QAAQ,GAAGsE,eAAe;IAC9B;IACA1H,KAAK,GAAGnD,MAAM,CAAC+I,MAAM,CAAC,CAAC,CAAC,EAAE5F,KAAK,CAAC;IAChC,IAAI,CA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C,WAAW,EAAE;IAClB,IAAI,CAAC5M,WAAW,CAAC;MAAEwM;IAAa,CAAC,EAAE3N,OAAO,EAAE+C,QAAQ,CAAC;EACzD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIiL,cAAc,CAACpN,WAAW,EAAE;IACxB,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,MAAMC,OAAO,GAAG,CACZ,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,KAAK,EACL,aAAa,EACb,aAAa,CAChB;IACDA,OAAO,CAACoN,OAAO,CAACzI,MAAM,IAAI;MACtB,MAAM0I,YAAY,GAAG,IAAI,CAACrN,OAAO,CAAC2E,MAAM,CAAC;MACzC,IAAI,OAAO0I,YAAY,KAAK,QAAQ,EAAE;QAClC,IAAI,OAAOA,YAAY,CAACpN,OAAO,KAAK,QAAQ,EAAE;UAC1CtE,MAAM,CAAC+I,MAAM,CAAC2I,YAAY,CAACpN,OAAO,CAACC,EAAE,EAAE;YAAEH;UAAY,CAAC,CAAC;QAC3D,CAAC,MACI;UACDsN,YAAY,CAACpN,OAAO,GAAG;YACnBC,EAAE,EAAE;cAAEH;YAAY;UACtB,CAAC;QACL;MACJ;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIuN,MAAM,CAACC,UAAU,EAAEtL,iBAAiB,EAAEC,QAAQ,EAAE;IAC5C,IAAI9C,EAAE,EAAEC,EAAE;IACV,MAAMiO,MAAM,GAAIE,eAAe,IAAK;MAChC,MAAMC,WAAW,GAAG,CAAC,CAAC,EAAEvP,aAAa,CAAC+C,OAAO,EAAE,MAAOyM,IAAI,IAAK;QAC3D,MAAM,IAAItG,OAAO,CAAC,CAACwE,OAAO,EAAE+B,MAAM,KAAK;UACnC,IAAIvO,EAAE,EAAEC,EAAE;UACV,IAAImO,eAAe,KAAK,CAAC,KACpB,CAACnO,EAAE,GAAG,CAACD,EAAE,GAAGwO,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAAC3O,OAAO,MAA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"},"metadata":{},"sourceType":"script","externalDependencies":[]}