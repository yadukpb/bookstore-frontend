{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GSSAPI = exports.GSSAPICanonicalizationValue = void 0;\nexports.performGSSAPICanonicalizeHostName = performGSSAPICanonicalizeHostName;\nexports.resolveCname = resolveCname;\nconst dns = require(\"dns\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\n/** @public */\nexports.GSSAPICanonicalizationValue = Object.freeze({\n  on: true,\n  off: false,\n  none: 'none',\n  forward: 'forward',\n  forwardAndReverse: 'forwardAndReverse'\n});\nasync function externalCommand(connection, command) {\n  const response = await connection.command((0, utils_1.ns)('$external.$cmd'), command);\n  return response;\n}\nlet krb;\nclass GSSAPI extends auth_provider_1.AuthProvider {\n  async auth(authContext) {\n    const {\n      connection,\n      credentials\n    } = authContext;\n    if (credentials == null) {\n      throw new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication');\n    }\n    const {\n      username\n    } = credentials;\n    const client = await makeKerberosClient(authContext);\n    const payload = await client.step('');\n    const saslStartResponse = await externalCommand(connection, saslStart(payload));\n    const negotiatedPayload = await negotiate(client, 10, saslStartResponse.payload);\n    const saslContinueResponse = await externalCommand(connection, saslContinue(negotiatedPayload, saslStartResponse.conversationId));\n    const finalizePayload = await finalize(client, username, saslContinueResponse.payload);\n    await externalCommand(connection, {\n      saslContinue: 1,\n      conversationId: saslContinueResponse.conversationId,\n      payload: finalizePayload\n    });\n  }\n}\nexports.GSSAPI = GSSAPI;\nasync function makeKerberosClient(authContext) {\n  const {\n    hostAddress\n  } = authContext.options;\n  const {\n    credentials\n  } = authContext;\n  if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n    throw new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.');\n  }\n  loadKrb();\n  if ('kModuleError' in krb) {\n    throw krb['kModuleError'];\n  }\n  const {\n    initializeClient\n  } = krb;\n  const {\n    username,\n    password\n  } = credentials;\n  const mechanismProperties = credentials.mechanismProperties;\n  const serviceName = mechanismProperties.SERVICE_NAME ?? 'mongodb';\n  const host = await performGSSAPICanonicalizeHostName(hostAddress.host, mechanismProperties);\n  const initOptions = {};\n  if (password != null) {\n    // TODO(NODE-5139): These do not match the typescript options in initializeClient\n    Object.assign(initOptions, {\n      user: username,\n      password: password\n    });\n  }\n  const spnHost = mechanismProperties.SERVICE_HOST ?? host;\n  let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${spnHost}`;\n  if ('SERVICE_REALM' in mechanismProperties) {\n    spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n  }\n  return await initializeClient(spn, initOptions);\n}\nfunction saslStart(payload) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload,\n    autoAuthorize: 1\n  };\n}\nfunction saslContinue(payload, conversationId) {\n  return {\n    saslContinue: 1,\n    conversationId,\n    payload\n  };\n}\nasync function negotiate(client, retries, payload) {\n  try {\n    const response = await client.step(payload);\n    return response || '';\n  } catch (error) {\n    if (retries === 0) {\n      // Retries exhausted, raise error\n      throw error;\n    }\n    // Adjust number of retries and call step again\n    return await negotiate(client, retries - 1, payload);\n  }\n}\nasync function finalize(client, user, payload) {\n  // GSS Client Unwrap\n  const response = await client.unwrap(payload);\n  return await client.wrap(response || '', {\n    user\n  });\n}\nasync function performGSSAPICanonicalizeHostName(host, mechanismProperties) {\n  const mode = mechanismProperties.CANONICALIZE_HOST_NAME;\n  if (!mode || mode === exports.GSSAPICanonicalizationValue.none) {\n    return host;\n  }\n  // If forward and reverse or true\n  if (mode === exports.GSSAPICanonicalizationValue.on || mode === exports.GSSAPICanonicalizationValue.forwardAndReverse) {\n    // Perform the lookup of the ip address.\n    const {\n      address\n    } = await dns.promises.lookup(host);\n    try {\n      // Perform a reverse ptr lookup on the ip address.\n      const results = await dns.promises.resolvePtr(address);\n      // If the ptr did not error but had no results, return the host.\n      return results.length > 0 ? results[0] : host;\n    } catch {\n      // This can error as ptr records may not exist for all ips. In this case\n      // fallback to a cname lookup as dns.lookup() does not return the\n      // cname.\n      return await resolveCname(host);\n    }\n  } else {\n    // The case for forward is just to resolve the cname as dns.lookup()\n    // will not return it.\n    return await resolveCname(host);\n  }\n}\nasync function resolveCname(host) {\n  // Attempt to resolve the host name\n  try {\n    const results = await dns.promises.resolveCname(host);\n    // Get the first resolved host id\n    return results.length > 0 ? results[0] : host;\n  } catch {\n    return host;\n  }\n}\n/**\n * Load the Kerberos library.\n */\nfunction loadKrb() {\n  if (!krb) {\n    krb = (0, deps_1.getKerberos)();\n  }\n}","map":{"version":3,"mappings":"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","names":["exports","Object","freeze","on","off","none","forward","forwardAndReverse","externalCommand","connection","command","response","krb","GSSAPI","auth_provider_1","auth","authContext","credentials","error_1","username","client","makeKerberosClient","payload","step","saslStartResponse","saslStart","negotiatedPayload","negotiate","saslContinueResponse","saslContinue","conversationId","finalizePayload","finalize","hostAddress","options","host","loadKrb","initializeClient","password","mechanismProperties","serviceName","SERVICE_NAME","performGSSAPICanonicalizeHostName","initOptions","assign","user","spnHost","SERVICE_HOST","spn","process","platform","SERVICE_REALM","mechanism","autoAuthorize","retries","error","unwrap","wrap","mode","CANONICALIZE_HOST_NAME","address","dns","promises","lookup","results","resolvePtr","length","resolveCname"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/cmap/auth/gssapi.ts"],"sourcesContent":["import * as dns from 'dns';\n\nimport { getKerberos, type Kerberos, type KerberosClient } from '../../deps';\nimport { MongoInvalidArgumentError, MongoMissingCredentialsError } from '../../error';\nimport { ns } from '../../utils';\nimport type { Connection } from '../connection';\nimport { type AuthContext, AuthProvider } from './auth_provider';\n\n/** @public */\nexport const GSSAPICanonicalizationValue = Object.freeze({\n  on: true,\n  off: false,\n  none: 'none',\n  forward: 'forward',\n  forwardAndReverse: 'forwardAndReverse'\n} as const);\n\n/** @public */\nexport type GSSAPICanonicalizationValue =\n  (typeof GSSAPICanonicalizationValue)[keyof typeof GSSAPICanonicalizationValue];\n\ntype MechanismProperties = {\n  CANONICALIZE_HOST_NAME?: GSSAPICanonicalizationValue;\n  SERVICE_HOST?: string;\n  SERVICE_NAME?: string;\n  SERVICE_REALM?: string;\n};\n\nasync function externalCommand(\n  connection: Connection,\n  command: ReturnType<typeof saslStart> | ReturnType<typeof saslContinue>\n): Promise<{ payload: string; conversationId: number }> {\n  const response = await connection.command(ns('$external.$cmd'), command);\n  return response as { payload: string; conversationId: number };\n}\n\nlet krb: Kerberos;\n\nexport class GSSAPI extends AuthProvider {\n  override async auth(authContext: AuthContext): Promise<void> {\n    const { connection, credentials } = authContext;\n    if (credentials == null) {\n      throw new MongoMissingCredentialsError('Credentials required for GSSAPI authentication');\n    }\n\n    const { username } = credentials;\n\n    const client = await makeKerberosClient(authContext);\n\n    const payload = await client.step('');\n\n    const saslStartResponse = await externalCommand(connection, saslStart(payload));\n\n    const negotiatedPayload = await negotiate(client, 10, saslStartResponse.payload);\n\n    const saslContinueResponse = await externalCommand(\n      connection,\n      saslContinue(negotiatedPayload, saslStartResponse.conversationId)\n    );\n\n    const finalizePayload = await finalize(client, username, saslContinueResponse.payload);\n\n    await externalCommand(connection, {\n      saslContinue: 1,\n      conversationId: saslContinueResponse.conversationId,\n      payload: finalizePayload\n    });\n  }\n}\n\nasync function makeKerberosClient(authContext: AuthContext): Promise<KerberosClient> {\n  const { hostAddress } = authContext.options;\n  const { credentials } = authContext;\n  if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n    throw new MongoInvalidArgumentError(\n      'Connection must have host and port and credentials defined.'\n    );\n  }\n\n  loadKrb();\n  if ('kModuleError' in krb) {\n    throw krb['kModuleError'];\n  }\n  const { initializeClient } = krb;\n\n  const { username, password } = credentials;\n  const mechanismProperties = credentials.mechanismProperties as MechanismProperties;\n\n  const serviceName = mechanismProperties.SERVICE_NAME ?? 'mongodb';\n\n  const host = await performGSSAPICanonicalizeHostName(hostAddress.host, mechanismProperties);\n\n  const initOptions = {};\n  if (password != null) {\n    // TODO(NODE-5139): These do not match the typescript options in initializeClient\n    Object.assign(initOptions, { user: username, password: password });\n  }\n\n  const spnHost = mechanismProperties.SERVICE_HOST ?? host;\n  let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${spnHost}`;\n  if ('SERVICE_REALM' in mechanismProperties) {\n    spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n  }\n\n  return await initializeClient(spn, initOptions);\n}\n\nfunction saslStart(payload: string) {\n  return {\n    saslStart: 1,\n    mechanism: 'GSSAPI',\n    payload,\n    autoAuthorize: 1\n  } as const;\n}\n\nfunction saslContinue(payload: string, conversationId: number) {\n  return {\n    saslContinue: 1,\n    conversationId,\n    payload\n  } as const;\n}\n\nasync function negotiate(\n  client: KerberosClient,\n  retries: number,\n  payload: string\n): Promise<string> {\n  try {\n    const response = await client.step(payload);\n    return response || '';\n  } catch (error) {\n    if (retries === 0) {\n      // Retries exhausted, raise error\n      throw error;\n    }\n    // Adjust number of retries and call step again\n    return await negotiate(client, retries - 1, payload);\n  }\n}\n\nasync function finalize(client: KerberosClient, user: string, payload: string): Promise<string> {\n  // GSS Client Unwrap\n  const response = await client.unwrap(payload);\n  return await client.wrap(response || '', { user });\n}\n\nexport async function performGSSAPICanonicalizeHostName(\n  host: string,\n  mechanismProperties: MechanismProperties\n): Promise<string> {\n  const mode = mechanismProperties.CANONICALIZE_HOST_NAME;\n  if (!mode || mode === GSSAPICanonicalizationValue.none) {\n    return host;\n  }\n\n  // If forward and reverse or true\n  if (\n    mode === GSSAPICanonicalizationValue.on ||\n    mode === GSSAPICanonicalizationValue.forwardAndReverse\n  ) {\n    // Perform the lookup of the ip address.\n    const { address } = await dns.promises.lookup(host);\n\n    try {\n      // Perform a reverse ptr lookup on the ip address.\n      const results = await dns.promises.resolvePtr(address);\n      // If the ptr did not error but had no results, return the host.\n      return results.length > 0 ? results[0] : host;\n    } catch {\n      // This can error as ptr records may not exist for all ips. In this case\n      // fallback to a cname lookup as dns.lookup() does not return the\n      // cname.\n      return await resolveCname(host);\n    }\n  } else {\n    // The case for forward is just to resolve the cname as dns.lookup()\n    // will not return it.\n    return await resolveCname(host);\n  }\n}\n\nexport async function resolveCname(host: string): Promise<string> {\n  // Attempt to resolve the host name\n  try {\n    const results = await dns.promises.resolveCname(host);\n    // Get the first resolved host id\n    return results.length > 0 ? results[0] : host;\n  } catch {\n    return host;\n  }\n}\n\n/**\n * Load the Kerberos library.\n */\nfunction loadKrb() {\n  if (!krb) {\n    krb = getKerberos();\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}