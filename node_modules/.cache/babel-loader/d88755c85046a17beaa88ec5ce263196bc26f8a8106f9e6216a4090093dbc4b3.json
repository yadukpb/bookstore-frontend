{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RunAdminCommandOperation = exports.RunCommandOperation = void 0;\nconst utils_1 = require(\"../utils\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass RunCommandOperation extends operation_1.AbstractOperation {\n  constructor(parent, command, options) {\n    super(options);\n    this.command = command;\n    this.options = options;\n    this.ns = parent.s.namespace.withCollection('$cmd');\n  }\n  get commandName() {\n    return 'runCommand';\n  }\n  async execute(server, session) {\n    this.server = server;\n    const res = await server.command(this.ns, this.command, {\n      ...this.options,\n      readPreference: this.readPreference,\n      session\n    }, this.options.responseType);\n    return res;\n  }\n}\nexports.RunCommandOperation = RunCommandOperation;\nclass RunAdminCommandOperation extends operation_1.AbstractOperation {\n  constructor(command, options) {\n    super(options);\n    this.command = command;\n    this.options = options;\n    this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n  }\n  get commandName() {\n    return 'runCommand';\n  }\n  async execute(server, session) {\n    this.server = server;\n    const res = await server.command(this.ns, this.command, {\n      ...this.options,\n      readPreference: this.readPreference,\n      session\n    });\n    return res;\n  }\n}\nexports.RunAdminCommandOperation = RunAdminCommandOperation;","map":{"version":3,"mappings":";;;;;;AAOA;AACA;AAUA;AACA,MAAaA,mBAAkC,SAAQC,6BAAoB;EACzEC,YACEC,MAAU,EACHC,OAAiB,EACRC,OAA0E;IAE1F,KAAK,CAACA,OAAO,CAAC;IAHP,YAAO,GAAPD,OAAO;IACE,YAAO,GAAPC,OAAO;IAGvB,IAAI,CAACC,EAAE,GAAGH,MAAM,CAACI,CAAC,CAACC,SAAS,CAACC,cAAc,CAAC,MAAM,CAAC;EACrD;EAEA,IAAaC,WAAW;IACtB,OAAO,YAAqB;EAC9B;EAES,MAAMC,OAAO,CAACC,MAAc,EAAEC,OAAkC;IACvE,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,MAAME,GAAG,GAAmB,MAAMF,MAAM,CAACR,OAAO,CAC9C,IAAI,CAACE,EAAE,EACP,IAAI,CAACF,OAAO,EACZ;MACE,GAAG,IAAI,CAACC,OAAO;MACfU,cAAc,EAAE,IAAI,CAACA,cAAc;MACnCF;KACD,EACD,IAAI,CAACR,OAAO,CAACW,YAAY,CAC1B;IACD,OAAOF,GAAG;EACZ;;AA3BFG;AA8BA,MAAaC,wBAAuC,SAAQjB,6BAAoB;EAC9EC,YACSE,OAAiB,EACRC,OAGf;IAED,KAAK,CAACA,OAAO,CAAC;IANP,YAAO,GAAPD,OAAO;IACE,YAAO,GAAPC,OAAO;IAMvB,IAAI,CAACC,EAAE,GAAG,IAAIa,wBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC;EACjD;EAEA,IAAaT,WAAW;IACtB,OAAO,YAAqB;EAC9B;EAES,MAAMC,OAAO,CAACC,MAAc,EAAEC,OAAkC;IACvE,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,MAAME,GAAG,GAAmB,MAAMF,MAAM,CAACR,OAAO,CAAC,IAAI,CAACE,EAAE,EAAE,IAAI,CAACF,OAAO,EAAE;MACtE,GAAG,IAAI,CAACC,OAAO;MACfU,cAAc,EAAE,IAAI,CAACA,cAAc;MACnCF;KACD,CAAC;IACF,OAAOC,GAAG;EACZ;;AAxBFG","names":["RunCommandOperation","operation_1","constructor","parent","command","options","ns","s","namespace","withCollection","commandName","execute","server","session","res","readPreference","responseType","exports","RunAdminCommandOperation","utils_1"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/operations/run_command.ts"],"sourcesContent":["import type { BSONSerializeOptions, Document } from '../bson';\nimport { type MongoDBResponseConstructor } from '../cmap/wire_protocol/responses';\nimport { type Db } from '../db';\nimport { type TODO_NODE_3286 } from '../mongo_types';\nimport type { ReadPreferenceLike } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { MongoDBNamespace } from '../utils';\nimport { AbstractOperation } from './operation';\n\n/** @public */\nexport type RunCommandOptions = {\n  /** Specify ClientSession for this command */\n  session?: ClientSession;\n  /** The read preference */\n  readPreference?: ReadPreferenceLike;\n} & BSONSerializeOptions;\n\n/** @internal */\nexport class RunCommandOperation<T = Document> extends AbstractOperation<T> {\n  constructor(\n    parent: Db,\n    public command: Document,\n    public override options: RunCommandOptions & { responseType?: MongoDBResponseConstructor }\n  ) {\n    super(options);\n    this.ns = parent.s.namespace.withCollection('$cmd');\n  }\n\n  override get commandName() {\n    return 'runCommand' as const;\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<T> {\n    this.server = server;\n    const res: TODO_NODE_3286 = await server.command(\n      this.ns,\n      this.command,\n      {\n        ...this.options,\n        readPreference: this.readPreference,\n        session\n      },\n      this.options.responseType\n    );\n    return res;\n  }\n}\n\nexport class RunAdminCommandOperation<T = Document> extends AbstractOperation<T> {\n  constructor(\n    public command: Document,\n    public override options: RunCommandOptions & {\n      noResponse?: boolean;\n      bypassPinningCheck?: boolean;\n    }\n  ) {\n    super(options);\n    this.ns = new MongoDBNamespace('admin', '$cmd');\n  }\n\n  override get commandName() {\n    return 'runCommand' as const;\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<T> {\n    this.server = server;\n    const res: TODO_NODE_3286 = await server.command(this.ns, this.command, {\n      ...this.options,\n      readPreference: this.readPreference,\n      session\n    });\n    return res;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}