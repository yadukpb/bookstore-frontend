{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nvar NoopMeter = /** @class */function () {\n  function NoopMeter() {}\n  /**\n   * @see {@link Meter.createGauge}\n   */\n  NoopMeter.prototype.createGauge = function (_name, _options) {\n    return NOOP_GAUGE_METRIC;\n  };\n  /**\n   * @see {@link Meter.createHistogram}\n   */\n  NoopMeter.prototype.createHistogram = function (_name, _options) {\n    return NOOP_HISTOGRAM_METRIC;\n  };\n  /**\n   * @see {@link Meter.createCounter}\n   */\n  NoopMeter.prototype.createCounter = function (_name, _options) {\n    return NOOP_COUNTER_METRIC;\n  };\n  /**\n   * @see {@link Meter.createUpDownCounter}\n   */\n  NoopMeter.prototype.createUpDownCounter = function (_name, _options) {\n    return NOOP_UP_DOWN_COUNTER_METRIC;\n  };\n  /**\n   * @see {@link Meter.createObservableGauge}\n   */\n  NoopMeter.prototype.createObservableGauge = function (_name, _options) {\n    return NOOP_OBSERVABLE_GAUGE_METRIC;\n  };\n  /**\n   * @see {@link Meter.createObservableCounter}\n   */\n  NoopMeter.prototype.createObservableCounter = function (_name, _options) {\n    return NOOP_OBSERVABLE_COUNTER_METRIC;\n  };\n  /**\n   * @see {@link Meter.createObservableUpDownCounter}\n   */\n  NoopMeter.prototype.createObservableUpDownCounter = function (_name, _options) {\n    return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n  };\n  /**\n   * @see {@link Meter.addBatchObservableCallback}\n   */\n  NoopMeter.prototype.addBatchObservableCallback = function (_callback, _observables) {};\n  /**\n   * @see {@link Meter.removeBatchObservableCallback}\n   */\n  NoopMeter.prototype.removeBatchObservableCallback = function (_callback) {};\n  return NoopMeter;\n}();\nexport { NoopMeter };\nvar NoopMetric = /** @class */function () {\n  function NoopMetric() {}\n  return NoopMetric;\n}();\nexport { NoopMetric };\nvar NoopCounterMetric = /** @class */function (_super) {\n  __extends(NoopCounterMetric, _super);\n  function NoopCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NoopCounterMetric.prototype.add = function (_value, _attributes) {};\n  return NoopCounterMetric;\n}(NoopMetric);\nexport { NoopCounterMetric };\nvar NoopUpDownCounterMetric = /** @class */function (_super) {\n  __extends(NoopUpDownCounterMetric, _super);\n  function NoopUpDownCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NoopUpDownCounterMetric.prototype.add = function (_value, _attributes) {};\n  return NoopUpDownCounterMetric;\n}(NoopMetric);\nexport { NoopUpDownCounterMetric };\nvar NoopGaugeMetric = /** @class */function (_super) {\n  __extends(NoopGaugeMetric, _super);\n  function NoopGaugeMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NoopGaugeMetric.prototype.record = function (_value, _attributes) {};\n  return NoopGaugeMetric;\n}(NoopMetric);\nexport { NoopGaugeMetric };\nvar NoopHistogramMetric = /** @class */function (_super) {\n  __extends(NoopHistogramMetric, _super);\n  function NoopHistogramMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NoopHistogramMetric.prototype.record = function (_value, _attributes) {};\n  return NoopHistogramMetric;\n}(NoopMetric);\nexport { NoopHistogramMetric };\nvar NoopObservableMetric = /** @class */function () {\n  function NoopObservableMetric() {}\n  NoopObservableMetric.prototype.addCallback = function (_callback) {};\n  NoopObservableMetric.prototype.removeCallback = function (_callback) {};\n  return NoopObservableMetric;\n}();\nexport { NoopObservableMetric };\nvar NoopObservableCounterMetric = /** @class */function (_super) {\n  __extends(NoopObservableCounterMetric, _super);\n  function NoopObservableCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return NoopObservableCounterMetric;\n}(NoopObservableMetric);\nexport { NoopObservableCounterMetric };\nvar NoopObservableGaugeMetric = /** @class */function (_super) {\n  __extends(NoopObservableGaugeMetric, _super);\n  function NoopObservableGaugeMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return NoopObservableGaugeMetric;\n}(NoopObservableMetric);\nexport { NoopObservableGaugeMetric };\nvar NoopObservableUpDownCounterMetric = /** @class */function (_super) {\n  __extends(NoopObservableUpDownCounterMetric, _super);\n  function NoopObservableUpDownCounterMetric() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return NoopObservableUpDownCounterMetric;\n}(NoopObservableMetric);\nexport { NoopObservableUpDownCounterMetric };\nexport var NOOP_METER = new NoopMeter();\n// Synchronous instruments\nexport var NOOP_COUNTER_METRIC = new NoopCounterMetric();\nexport var NOOP_GAUGE_METRIC = new NoopGaugeMetric();\nexport var NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nexport var NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n// Asynchronous instruments\nexport var NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\nexport var NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\nexport var NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric();\n/**\n * Create a no-op Meter\n */\nexport function createNoopMeter() {\n  return NOOP_METER;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;AAIA;EACE,sBAAe;EAEf;;;EAGAA,+BAAW,GAAX,UAAYC,KAAa,EAAEC,QAAwB;IACjD,OAAOC,iBAAiB;EAC1B,CAAC;EAED;;;EAGAH,mCAAe,GAAf,UAAgBC,KAAa,EAAEC,QAAwB;IACrD,OAAOE,qBAAqB;EAC9B,CAAC;EAED;;;EAGAJ,iCAAa,GAAb,UAAcC,KAAa,EAAEC,QAAwB;IACnD,OAAOG,mBAAmB;EAC5B,CAAC;EAED;;;EAGAL,uCAAmB,GAAnB,UAAoBC,KAAa,EAAEC,QAAwB;IACzD,OAAOI,2BAA2B;EACpC,CAAC;EAED;;;EAGAN,yCAAqB,GAArB,UACEC,KAAa,EACbC,QAAwB;IAExB,OAAOK,4BAA4B;EACrC,CAAC;EAED;;;EAGAP,2CAAuB,GAAvB,UACEC,KAAa,EACbC,QAAwB;IAExB,OAAOM,8BAA8B;EACvC,CAAC;EAED;;;EAGAR,iDAA6B,GAA7B,UACEC,KAAa,EACbC,QAAwB;IAExB,OAAOO,sCAAsC;EAC/C,CAAC;EAED;;;EAGAT,8CAA0B,GAA1B,UACEU,SAAkC,EAClCC,YAA0B,GACnB,CAAC;EAEV;;;EAGAX,iDAA6B,GAA7B,UAA8BU,SAAkC,GAAS,CAAC;EAC5E,gBAAC;AAAD,CAAC,EAzED;;AA2EA;EAAA,uBAAyB;EAAA,iBAAC;AAAD,CAAC,EAA1B;;AAEA;EAAuCE;EAAvC;;EAEA;EADEC,+BAAG,GAAH,UAAIC,MAAc,EAAEC,WAA6B,GAAS,CAAC;EAC7D,wBAAC;AAAD,CAAC,CAFsCC,UAAU;;AAIjD;EACUJ;EADV;;EAKA;EADEK,qCAAG,GAAH,UAAIH,MAAc,EAAEC,WAA6B,GAAS,CAAC;EAC7D,8BAAC;AAAD,CAAC,CAJSC,UAAU;;AAMpB;EAAqCJ;EAArC;;EAEA;EADEM,gCAAM,GAAN,UAAOJ,MAAc,EAAEC,WAA6B,GAAS,CAAC;EAChE,sBAAC;AAAD,CAAC,CAFoCC,UAAU;;AAI/C;EAAyCJ;EAAzC;;EAEA;EADEO,oCAAM,GAAN,UAAOL,MAAc,EAAEC,WAA6B,GAAS,CAAC;EAChE,0BAAC;AAAD,CAAC,CAFwCC,UAAU;;AAInD;EAAA,iCAIA;EAHEI,0CAAW,GAAX,UAAYV,SAA6B,GAAG,CAAC;EAE7CU,6CAAc,GAAd,UAAeV,SAA6B,GAAG,CAAC;EAClD,2BAAC;AAAD,CAAC,EAJD;;AAMA;EACUE;EADV;;EAEgC;EAAA,kCAAC;AAAD,CAAC,CADvBQ,oBAAoB;;AAG9B;EACUR;EADV;;EAE8B;EAAA,gCAAC;AAAD,CAAC,CADrBQ,oBAAoB;;AAG9B;EACUR;EADV;;EAEsC;EAAA,wCAAC;AAAD,CAAC,CAD7BQ,oBAAoB;;AAG9B,OAAO,IAAMC,UAAU,GAAG,IAAIrB,SAAS,EAAE;AAEzC;AACA,OAAO,IAAMK,mBAAmB,GAAG,IAAIQ,iBAAiB,EAAE;AAC1D,OAAO,IAAMV,iBAAiB,GAAG,IAAIe,eAAe,EAAE;AACtD,OAAO,IAAMd,qBAAqB,GAAG,IAAIe,mBAAmB,EAAE;AAC9D,OAAO,IAAMb,2BAA2B,GAAG,IAAIW,uBAAuB,EAAE;AAExE;AACA,OAAO,IAAMT,8BAA8B,GAAG,IAAIc,2BAA2B,EAAE;AAC/E,OAAO,IAAMf,4BAA4B,GAAG,IAAIgB,yBAAyB,EAAE;AAC3E,OAAO,IAAMd,sCAAsC,GACjD,IAAIe,iCAAiC,EAAE;AAEzC;;;AAGA,OAAM,SAAUC,eAAe;EAC7B,OAAOJ,UAAU;AACnB","names":["NoopMeter","_name","_options","NOOP_GAUGE_METRIC","NOOP_HISTOGRAM_METRIC","NOOP_COUNTER_METRIC","NOOP_UP_DOWN_COUNTER_METRIC","NOOP_OBSERVABLE_GAUGE_METRIC","NOOP_OBSERVABLE_COUNTER_METRIC","NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC","_callback","_observables","__extends","NoopCounterMetric","_value","_attributes","NoopMetric","NoopUpDownCounterMetric","NoopGaugeMetric","NoopHistogramMetric","NoopObservableMetric","NOOP_METER","NoopObservableCounterMetric","NoopObservableGaugeMetric","NoopObservableUpDownCounterMetric","createNoopMeter"],"sources":["/home/yadu/Music/Gifty/node_modules/@opentelemetry/api/src/metrics/NoopMeter.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Meter } from './Meter';\nimport {\n  BatchObservableCallback,\n  Counter,\n  Gauge,\n  Histogram,\n  MetricAttributes,\n  MetricOptions,\n  Observable,\n  ObservableCallback,\n  ObservableCounter,\n  ObservableGauge,\n  ObservableUpDownCounter,\n  UpDownCounter,\n} from './Metric';\n\n/**\n * NoopMeter is a noop implementation of the {@link Meter} interface. It reuses\n * constant NoopMetrics for all of its methods.\n */\nexport class NoopMeter implements Meter {\n  constructor() {}\n\n  /**\n   * @see {@link Meter.createGauge}\n   */\n  createGauge(_name: string, _options?: MetricOptions): Gauge {\n    return NOOP_GAUGE_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createHistogram}\n   */\n  createHistogram(_name: string, _options?: MetricOptions): Histogram {\n    return NOOP_HISTOGRAM_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createCounter}\n   */\n  createCounter(_name: string, _options?: MetricOptions): Counter {\n    return NOOP_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createUpDownCounter}\n   */\n  createUpDownCounter(_name: string, _options?: MetricOptions): UpDownCounter {\n    return NOOP_UP_DOWN_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableGauge}\n   */\n  createObservableGauge(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableGauge {\n    return NOOP_OBSERVABLE_GAUGE_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableCounter}\n   */\n  createObservableCounter(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableCounter {\n    return NOOP_OBSERVABLE_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.createObservableUpDownCounter}\n   */\n  createObservableUpDownCounter(\n    _name: string,\n    _options?: MetricOptions\n  ): ObservableUpDownCounter {\n    return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;\n  }\n\n  /**\n   * @see {@link Meter.addBatchObservableCallback}\n   */\n  addBatchObservableCallback(\n    _callback: BatchObservableCallback,\n    _observables: Observable[]\n  ): void {}\n\n  /**\n   * @see {@link Meter.removeBatchObservableCallback}\n   */\n  removeBatchObservableCallback(_callback: BatchObservableCallback): void {}\n}\n\nexport class NoopMetric {}\n\nexport class NoopCounterMetric extends NoopMetric implements Counter {\n  add(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopUpDownCounterMetric\n  extends NoopMetric\n  implements UpDownCounter\n{\n  add(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopGaugeMetric extends NoopMetric implements Gauge {\n  record(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopHistogramMetric extends NoopMetric implements Histogram {\n  record(_value: number, _attributes: MetricAttributes): void {}\n}\n\nexport class NoopObservableMetric {\n  addCallback(_callback: ObservableCallback) {}\n\n  removeCallback(_callback: ObservableCallback) {}\n}\n\nexport class NoopObservableCounterMetric\n  extends NoopObservableMetric\n  implements ObservableCounter {}\n\nexport class NoopObservableGaugeMetric\n  extends NoopObservableMetric\n  implements ObservableGauge {}\n\nexport class NoopObservableUpDownCounterMetric\n  extends NoopObservableMetric\n  implements ObservableUpDownCounter {}\n\nexport const NOOP_METER = new NoopMeter();\n\n// Synchronous instruments\nexport const NOOP_COUNTER_METRIC = new NoopCounterMetric();\nexport const NOOP_GAUGE_METRIC = new NoopGaugeMetric();\nexport const NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();\nexport const NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();\n\n// Asynchronous instruments\nexport const NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();\nexport const NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();\nexport const NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC =\n  new NoopObservableUpDownCounterMetric();\n\n/**\n * Create a no-op Meter\n */\nexport function createNoopMeter(): Meter {\n  return NOOP_METER;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}