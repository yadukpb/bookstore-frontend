{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPAN_CONTEXT } from './invalid-span-constants';\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NonRecordingSpan = /** @class */function () {\n  function NonRecordingSpan(_spanContext) {\n    if (_spanContext === void 0) {\n      _spanContext = INVALID_SPAN_CONTEXT;\n    }\n    this._spanContext = _spanContext;\n  }\n  // Returns a SpanContext.\n  NonRecordingSpan.prototype.spanContext = function () {\n    return this._spanContext;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.setAttribute = function (_key, _value) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.setAttributes = function (_attributes) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {\n    return this;\n  };\n  NonRecordingSpan.prototype.addLink = function (_link) {\n    return this;\n  };\n  NonRecordingSpan.prototype.addLinks = function (_links) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.setStatus = function (_status) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.updateName = function (_name) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.end = function (_endTime) {};\n  // isRecording always returns false for NonRecordingSpan.\n  NonRecordingSpan.prototype.isRecording = function () {\n    return false;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.recordException = function (_exception, _time) {};\n  return NonRecordingSpan;\n}();\nexport { NonRecordingSpan };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAmBA,SAASA,oBAAoB,QAAQ,0BAA0B;AAM/D;;;;;AAKA;EACE,0BACmBC,YAAgD;IAAhD;MAAAA,mCAAgD;IAAA;IAAhD,iBAAY,GAAZA,YAAY;EAC5B;EAEH;EACAC,sCAAW,GAAX;IACE,OAAO,IAAI,CAACD,YAAY;EAC1B,CAAC;EAED;EACAC,uCAAY,GAAZ,UAAaC,IAAY,EAAEC,MAAe;IACxC,OAAO,IAAI;EACb,CAAC;EAED;EACAF,wCAAa,GAAb,UAAcG,WAA2B;IACvC,OAAO,IAAI;EACb,CAAC;EAED;EACAH,mCAAQ,GAAR,UAASI,KAAa,EAAED,WAA4B;IAClD,OAAO,IAAI;EACb,CAAC;EAEDH,kCAAO,GAAP,UAAQK,KAAW;IACjB,OAAO,IAAI;EACb,CAAC;EAEDL,mCAAQ,GAAR,UAASM,MAAc;IACrB,OAAO,IAAI;EACb,CAAC;EAED;EACAN,oCAAS,GAAT,UAAUO,OAAmB;IAC3B,OAAO,IAAI;EACb,CAAC;EAED;EACAP,qCAAU,GAAV,UAAWI,KAAa;IACtB,OAAO,IAAI;EACb,CAAC;EAED;EACAJ,8BAAG,GAAH,UAAIQ,QAAoB,GAAS,CAAC;EAElC;EACAR,sCAAW,GAAX;IACE,OAAO,KAAK;EACd,CAAC;EAED;EACAA,0CAAe,GAAf,UAAgBS,UAAqB,EAAEC,KAAiB,GAAS,CAAC;EACpE,uBAAC;AAAD,CAAC,EArDD","names":["INVALID_SPAN_CONTEXT","_spanContext","NonRecordingSpan","_key","_value","_attributes","_name","_link","_links","_status","_endTime","_exception","_time"],"sources":["/home/yadu/Music/Gifty/node_modules/@opentelemetry/api/src/trace/NonRecordingSpan.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '../common/Exception';\nimport { TimeInput } from '../common/Time';\nimport { SpanAttributes } from './attributes';\nimport { INVALID_SPAN_CONTEXT } from './invalid-span-constants';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\nimport { SpanStatus } from './status';\nimport { Link } from './link';\n\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nexport class NonRecordingSpan implements Span {\n  constructor(\n    private readonly _spanContext: SpanContext = INVALID_SPAN_CONTEXT\n  ) {}\n\n  // Returns a SpanContext.\n  spanContext(): SpanContext {\n    return this._spanContext;\n  }\n\n  // By default does nothing\n  setAttribute(_key: string, _value: unknown): this {\n    return this;\n  }\n\n  // By default does nothing\n  setAttributes(_attributes: SpanAttributes): this {\n    return this;\n  }\n\n  // By default does nothing\n  addEvent(_name: string, _attributes?: SpanAttributes): this {\n    return this;\n  }\n\n  addLink(_link: Link): this {\n    return this;\n  }\n\n  addLinks(_links: Link[]): this {\n    return this;\n  }\n\n  // By default does nothing\n  setStatus(_status: SpanStatus): this {\n    return this;\n  }\n\n  // By default does nothing\n  updateName(_name: string): this {\n    return this;\n  }\n\n  // By default does nothing\n  end(_endTime?: TimeInput): void {}\n\n  // isRecording always returns false for NonRecordingSpan.\n  isRecording(): boolean {\n    return false;\n  }\n\n  // By default does nothing\n  recordException(_exception: Exception, _time?: TimeInput): void {}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}