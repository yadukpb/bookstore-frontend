{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { ROOT_CONTEXT } from './context';\nvar NoopContextManager = /** @class */function () {\n  function NoopContextManager() {}\n  NoopContextManager.prototype.active = function () {\n    return ROOT_CONTEXT;\n  };\n  NoopContextManager.prototype.with = function (_context, fn, thisArg) {\n    var args = [];\n    for (var _i = 3; _i < arguments.length; _i++) {\n      args[_i - 3] = arguments[_i];\n    }\n    return fn.call.apply(fn, __spreadArray([thisArg], __read(args), false));\n  };\n  NoopContextManager.prototype.bind = function (_context, target) {\n    return target;\n  };\n  NoopContextManager.prototype.enable = function () {\n    return this;\n  };\n  NoopContextManager.prototype.disable = function () {\n    return this;\n  };\n  return NoopContextManager;\n}();\nexport { NoopContextManager };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA,SAASA,YAAY,QAAQ,WAAW;AAGxC;EAAA,+BAyBA;EAxBEC,mCAAM,GAAN;IACE,OAAOD,YAAY;EACrB,CAAC;EAEDC,iCAAI,GAAJ,UACEC,QAAuB,EACvBC,EAAK,EACLC,OAA8B;IAC9B;SAAA,UAAU,EAAVC,qBAAU,EAAVA,IAAU;MAAVC;;IAEA,OAAOH,EAAE,CAACI,IAAI,OAAPJ,EAAE,iBAAMC,OAAO,UAAKE,IAAI;EACjC,CAAC;EAEDL,iCAAI,GAAJ,UAAQC,QAAuB,EAAEM,MAAS;IACxC,OAAOA,MAAM;EACf,CAAC;EAEDP,mCAAM,GAAN;IACE,OAAO,IAAI;EACb,CAAC;EAEDA,oCAAO,GAAP;IACE,OAAO,IAAI;EACb,CAAC;EACH,yBAAC;AAAD,CAAC,EAzBD","names":["ROOT_CONTEXT","NoopContextManager","_context","fn","thisArg","_i","args","call","target"],"sources":["/home/yadu/Music/Gifty/node_modules/@opentelemetry/api/src/context/NoopContextManager.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ROOT_CONTEXT } from './context';\nimport * as types from './types';\n\nexport class NoopContextManager implements types.ContextManager {\n  active(): types.Context {\n    return ROOT_CONTEXT;\n  }\n\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    _context: types.Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    return fn.call(thisArg, ...args);\n  }\n\n  bind<T>(_context: types.Context, target: T): T {\n    return target;\n  }\n\n  enable(): this {\n    return this;\n  }\n\n  disable(): this {\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}