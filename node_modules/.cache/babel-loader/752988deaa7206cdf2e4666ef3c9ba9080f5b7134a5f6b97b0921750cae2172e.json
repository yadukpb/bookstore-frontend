{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '../context/context';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { ContextAPI } from '../api/context';\n/**\n * span key\n */\nvar SPAN_KEY = createContextKey('OpenTelemetry Context Key SPAN');\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nexport function getSpan(context) {\n  return context.getValue(SPAN_KEY) || undefined;\n}\n/**\n * Gets the span from the current context, if one exists.\n */\nexport function getActiveSpan() {\n  return getSpan(ContextAPI.getInstance().active());\n}\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nexport function setSpan(context, span) {\n  return context.setValue(SPAN_KEY, span);\n}\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nexport function deleteSpan(context) {\n  return context.deleteValue(SPAN_KEY);\n}\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nexport function setSpanContext(context, spanContext) {\n  return setSpan(context, new NonRecordingSpan(spanContext));\n}\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nexport function getSpanContext(context) {\n  var _a;\n  return (_a = getSpan(context)) === null || _a === void 0 ? void 0 : _a.spanContext();\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,gBAAgB,QAAQ,oBAAoB;AAIrD,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,UAAU,QAAQ,gBAAgB;AAE3C;;;AAGA,IAAMC,QAAQ,GAAGH,gBAAgB,CAAC,gCAAgC,CAAC;AAEnE;;;;;AAKA,OAAM,SAAUI,OAAO,CAACC,OAAgB;EACtC,OAAQA,OAAO,CAACC,QAAQ,CAACH,QAAQ,CAAU,IAAII,SAAS;AAC1D;AAEA;;;AAGA,OAAM,SAAUC,aAAa;EAC3B,OAAOJ,OAAO,CAACF,UAAU,CAACO,WAAW,EAAE,CAACC,MAAM,EAAE,CAAC;AACnD;AAEA;;;;;;AAMA,OAAM,SAAUC,OAAO,CAACN,OAAgB,EAAEO,IAAU;EAClD,OAAOP,OAAO,CAACQ,QAAQ,CAACV,QAAQ,EAAES,IAAI,CAAC;AACzC;AAEA;;;;;AAKA,OAAM,SAAUE,UAAU,CAACT,OAAgB;EACzC,OAAOA,OAAO,CAACU,WAAW,CAACZ,QAAQ,CAAC;AACtC;AAEA;;;;;;;AAOA,OAAM,SAAUa,cAAc,CAC5BX,OAAgB,EAChBY,WAAwB;EAExB,OAAON,OAAO,CAACN,OAAO,EAAE,IAAIJ,gBAAgB,CAACgB,WAAW,CAAC,CAAC;AAC5D;AAEA;;;;;AAKA,OAAM,SAAUC,cAAc,CAACb,OAAgB;;EAC7C,OAAO,aAAO,CAACA,OAAO,CAAC,0CAAEY,WAAW,EAAE;AACxC","names":["createContextKey","NonRecordingSpan","ContextAPI","SPAN_KEY","getSpan","context","getValue","undefined","getActiveSpan","getInstance","active","setSpan","span","setValue","deleteSpan","deleteValue","setSpanContext","spanContext","getSpanContext"],"sources":["/home/yadu/Music/Gifty/node_modules/@opentelemetry/api/src/trace/context-utils.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContextKey } from '../context/context';\nimport { Context } from '../context/types';\nimport { Span } from './span';\nimport { SpanContext } from './span_context';\nimport { NonRecordingSpan } from './NonRecordingSpan';\nimport { ContextAPI } from '../api/context';\n\n/**\n * span key\n */\nconst SPAN_KEY = createContextKey('OpenTelemetry Context Key SPAN');\n\n/**\n * Return the span if one exists\n *\n * @param context context to get span from\n */\nexport function getSpan(context: Context): Span | undefined {\n  return (context.getValue(SPAN_KEY) as Span) || undefined;\n}\n\n/**\n * Gets the span from the current context, if one exists.\n */\nexport function getActiveSpan(): Span | undefined {\n  return getSpan(ContextAPI.getInstance().active());\n}\n\n/**\n * Set the span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nexport function setSpan(context: Context, span: Span): Context {\n  return context.setValue(SPAN_KEY, span);\n}\n\n/**\n * Remove current span stored in the context\n *\n * @param context context to delete span from\n */\nexport function deleteSpan(context: Context): Context {\n  return context.deleteValue(SPAN_KEY);\n}\n\n/**\n * Wrap span context in a NoopSpan and set as span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nexport function setSpanContext(\n  context: Context,\n  spanContext: SpanContext\n): Context {\n  return setSpan(context, new NonRecordingSpan(spanContext));\n}\n\n/**\n * Get the span context of the span if it exists.\n *\n * @param context context to get values from\n */\nexport function getSpanContext(context: Context): SpanContext | undefined {\n  return getSpan(context)?.spanContext();\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}