{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnorderedBulkOperation = void 0;\nconst BSON = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst common_1 = require(\"./common\");\n/** @public */\nclass UnorderedBulkOperation extends common_1.BulkOperationBase {\n  /** @internal */\n  constructor(collection, options) {\n    super(collection, options, false);\n  }\n  handleWriteError(writeResult) {\n    if (this.s.batches.length) {\n      return;\n    }\n    return super.handleWriteError(writeResult);\n  }\n  addToOperationsList(batchType, document) {\n    // Get the bsonSize\n    const bsonSize = BSON.calculateObjectSize(document, {\n      checkKeys: false,\n      // Since we don't know what the user selected for BSON options here,\n      // err on the safe side, and check the size with ignoreUndefined: false.\n      ignoreUndefined: false\n    });\n    // Throw error if the doc is bigger than the max BSON size\n    if (bsonSize >= this.s.maxBsonObjectSize) {\n      // TODO(NODE-3483): Change this to MongoBSONError\n      throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n    }\n    // Holds the current batch\n    this.s.currentBatch = undefined;\n    // Get the right type of batch\n    if (batchType === common_1.BatchType.INSERT) {\n      this.s.currentBatch = this.s.currentInsertBatch;\n    } else if (batchType === common_1.BatchType.UPDATE) {\n      this.s.currentBatch = this.s.currentUpdateBatch;\n    } else if (batchType === common_1.BatchType.DELETE) {\n      this.s.currentBatch = this.s.currentRemoveBatch;\n    }\n    const maxKeySize = this.s.maxKeySize;\n    // Create a new batch object if we don't have a current one\n    if (this.s.currentBatch == null) {\n      this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n    }\n    // Check if we need to create a new batch\n    if (\n    // New batch if we exceed the max batch op size\n    this.s.currentBatch.size + 1 >= this.s.maxWriteBatchSize ||\n    // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n    // since we can't sent an empty batch\n    this.s.currentBatch.size > 0 && this.s.currentBatch.sizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes ||\n    // New batch if the new op does not have the same op type as the current batch\n    this.s.currentBatch.batchType !== batchType) {\n      // Save the batch to the execution stack\n      this.s.batches.push(this.s.currentBatch);\n      // Create a new batch\n      this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n    }\n    // We have an array of documents\n    if (Array.isArray(document)) {\n      throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n    }\n    this.s.currentBatch.operations.push(document);\n    this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n    this.s.currentIndex = this.s.currentIndex + 1;\n    // Save back the current Batch to the right type\n    if (batchType === common_1.BatchType.INSERT) {\n      this.s.currentInsertBatch = this.s.currentBatch;\n      this.s.bulkResult.insertedIds.push({\n        index: this.s.bulkResult.insertedIds.length,\n        _id: document._id\n      });\n    } else if (batchType === common_1.BatchType.UPDATE) {\n      this.s.currentUpdateBatch = this.s.currentBatch;\n    } else if (batchType === common_1.BatchType.DELETE) {\n      this.s.currentRemoveBatch = this.s.currentBatch;\n    }\n    // Update current batch size\n    this.s.currentBatch.size += 1;\n    this.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n    return this;\n  }\n}\nexports.UnorderedBulkOperation = UnorderedBulkOperation;","map":{"version":3,"mappings":"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","names":["UnorderedBulkOperation","common_1","constructor","collection","options","handleWriteError","writeResult","s","batches","length","addToOperationsList","batchType","document","bsonSize","BSON","calculateObjectSize","checkKeys","ignoreUndefined","maxBsonObjectSize","error_1","currentBatch","undefined","INSERT","currentInsertBatch","UPDATE","currentUpdateBatch","DELETE","currentRemoveBatch","maxKeySize","currentIndex","size","maxWriteBatchSize","sizeBytes","maxBatchSizeBytes","push","Array","isArray","operations","originalIndexes","bulkResult","insertedIds","index","_id","exports"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/bulk/unordered.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport * as BSON from '../bson';\nimport type { Collection } from '../collection';\nimport { MongoInvalidArgumentError } from '../error';\nimport type { DeleteStatement } from '../operations/delete';\nimport type { UpdateStatement } from '../operations/update';\nimport {\n  Batch,\n  BatchType,\n  BulkOperationBase,\n  type BulkWriteOptions,\n  type BulkWriteResult\n} from './common';\n\n/** @public */\nexport class UnorderedBulkOperation extends BulkOperationBase {\n  /** @internal */\n  constructor(collection: Collection, options: BulkWriteOptions) {\n    super(collection, options, false);\n  }\n\n  override handleWriteError(writeResult: BulkWriteResult): void {\n    if (this.s.batches.length) {\n      return;\n    }\n\n    return super.handleWriteError(writeResult);\n  }\n\n  addToOperationsList(\n    batchType: BatchType,\n    document: Document | UpdateStatement | DeleteStatement\n  ): this {\n    // Get the bsonSize\n    const bsonSize = BSON.calculateObjectSize(document, {\n      checkKeys: false,\n\n      // Since we don't know what the user selected for BSON options here,\n      // err on the safe side, and check the size with ignoreUndefined: false.\n      ignoreUndefined: false\n    } as any);\n\n    // Throw error if the doc is bigger than the max BSON size\n    if (bsonSize >= this.s.maxBsonObjectSize) {\n      // TODO(NODE-3483): Change this to MongoBSONError\n      throw new MongoInvalidArgumentError(\n        `Document is larger than the maximum size ${this.s.maxBsonObjectSize}`\n      );\n    }\n\n    // Holds the current batch\n    this.s.currentBatch = undefined;\n    // Get the right type of batch\n    if (batchType === BatchType.INSERT) {\n      this.s.currentBatch = this.s.currentInsertBatch;\n    } else if (batchType === BatchType.UPDATE) {\n      this.s.currentBatch = this.s.currentUpdateBatch;\n    } else if (batchType === BatchType.DELETE) {\n      this.s.currentBatch = this.s.currentRemoveBatch;\n    }\n\n    const maxKeySize = this.s.maxKeySize;\n\n    // Create a new batch object if we don't have a current one\n    if (this.s.currentBatch == null) {\n      this.s.currentBatch = new Batch(batchType, this.s.currentIndex);\n    }\n\n    // Check if we need to create a new batch\n    if (\n      // New batch if we exceed the max batch op size\n      this.s.currentBatch.size + 1 >= this.s.maxWriteBatchSize ||\n      // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n      // since we can't sent an empty batch\n      (this.s.currentBatch.size > 0 &&\n        this.s.currentBatch.sizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n      // New batch if the new op does not have the same op type as the current batch\n      this.s.currentBatch.batchType !== batchType\n    ) {\n      // Save the batch to the execution stack\n      this.s.batches.push(this.s.currentBatch);\n\n      // Create a new batch\n      this.s.currentBatch = new Batch(batchType, this.s.currentIndex);\n    }\n\n    // We have an array of documents\n    if (Array.isArray(document)) {\n      throw new MongoInvalidArgumentError('Operation passed in cannot be an Array');\n    }\n\n    this.s.currentBatch.operations.push(document);\n    this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n    this.s.currentIndex = this.s.currentIndex + 1;\n\n    // Save back the current Batch to the right type\n    if (batchType === BatchType.INSERT) {\n      this.s.currentInsertBatch = this.s.currentBatch;\n      this.s.bulkResult.insertedIds.push({\n        index: this.s.bulkResult.insertedIds.length,\n        _id: (document as Document)._id\n      });\n    } else if (batchType === BatchType.UPDATE) {\n      this.s.currentUpdateBatch = this.s.currentBatch;\n    } else if (batchType === BatchType.DELETE) {\n      this.s.currentRemoveBatch = this.s.currentBatch;\n    }\n\n    // Update current batch size\n    this.s.currentBatch.size += 1;\n    this.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}