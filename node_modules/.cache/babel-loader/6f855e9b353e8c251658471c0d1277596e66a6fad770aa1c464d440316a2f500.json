{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Get a key to uniquely identify a context value */\nexport function createContextKey(description) {\n  // The specification states that for the same input, multiple calls should\n  // return different keys. Due to the nature of the JS dependency management\n  // system, this creates problems where multiple versions of some package\n  // could hold different keys for the same property.\n  //\n  // Therefore, we use Symbol.for which returns the same key for the same input.\n  return Symbol.for(description);\n}\nvar BaseContext = /** @class */function () {\n  /**\n   * Construct a new context which inherits values from an optional parent context.\n   *\n   * @param parentContext a context from which to inherit values\n   */\n  function BaseContext(parentContext) {\n    // for minification\n    var self = this;\n    self._currentContext = parentContext ? new Map(parentContext) : new Map();\n    self.getValue = function (key) {\n      return self._currentContext.get(key);\n    };\n    self.setValue = function (key, value) {\n      var context = new BaseContext(self._currentContext);\n      context._currentContext.set(key, value);\n      return context;\n    };\n    self.deleteValue = function (key) {\n      var context = new BaseContext(self._currentContext);\n      context._currentContext.delete(key);\n      return context;\n    };\n  }\n  return BaseContext;\n}();\n/** The root context is used as the default parent context when there is no active context */\nexport var ROOT_CONTEXT = new BaseContext();","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAkBA;AACA,OAAM,SAAUA,gBAAgB,CAACC,WAAmB;EAClD;EACA;EACA;EACA;EACA;EACA;EACA,OAAOC,MAAM,CAACC,GAAG,CAACF,WAAW,CAAC;AAChC;AAEA;EAGE;;;;;EAKA,qBAAYG,aAAoC;IAC9C;IACA,IAAMC,IAAI,GAAG,IAAI;IAEjBA,IAAI,CAACC,eAAe,GAAGF,aAAa,GAAG,IAAIG,GAAG,CAACH,aAAa,CAAC,GAAG,IAAIG,GAAG,EAAE;IAEzEF,IAAI,CAACG,QAAQ,GAAG,UAACC,GAAW;MAAK,WAAI,CAACH,eAAe,CAACI,GAAG,CAACD,GAAG,CAAC;IAA7B,CAA6B;IAE9DJ,IAAI,CAACM,QAAQ,GAAG,UAACF,GAAW,EAAEG,KAAc;MAC1C,IAAMC,OAAO,GAAG,IAAIC,WAAW,CAACT,IAAI,CAACC,eAAe,CAAC;MACrDO,OAAO,CAACP,eAAe,CAACS,GAAG,CAACN,GAAG,EAAEG,KAAK,CAAC;MACvC,OAAOC,OAAO;IAChB,CAAC;IAEDR,IAAI,CAACW,WAAW,GAAG,UAACP,GAAW;MAC7B,IAAMI,OAAO,GAAG,IAAIC,WAAW,CAACT,IAAI,CAACC,eAAe,CAAC;MACrDO,OAAO,CAACP,eAAe,CAACW,MAAM,CAACR,GAAG,CAAC;MACnC,OAAOI,OAAO;IAChB,CAAC;EACH;EAyBF,kBAAC;AAAD,CAAC,EApDD;AAsDA;AACA,OAAO,IAAMK,YAAY,GAAY,IAAIJ,WAAW,EAAE","names":["createContextKey","description","Symbol","for","parentContext","self","_currentContext","Map","getValue","key","get","setValue","value","context","BaseContext","set","deleteValue","delete","ROOT_CONTEXT"],"sources":["/home/yadu/Music/Gifty/node_modules/@opentelemetry/api/src/context/context.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from './types';\n\n/** Get a key to uniquely identify a context value */\nexport function createContextKey(description: string) {\n  // The specification states that for the same input, multiple calls should\n  // return different keys. Due to the nature of the JS dependency management\n  // system, this creates problems where multiple versions of some package\n  // could hold different keys for the same property.\n  //\n  // Therefore, we use Symbol.for which returns the same key for the same input.\n  return Symbol.for(description);\n}\n\nclass BaseContext implements Context {\n  private _currentContext!: Map<symbol, unknown>;\n\n  /**\n   * Construct a new context which inherits values from an optional parent context.\n   *\n   * @param parentContext a context from which to inherit values\n   */\n  constructor(parentContext?: Map<symbol, unknown>) {\n    // for minification\n    const self = this;\n\n    self._currentContext = parentContext ? new Map(parentContext) : new Map();\n\n    self.getValue = (key: symbol) => self._currentContext.get(key);\n\n    self.setValue = (key: symbol, value: unknown): Context => {\n      const context = new BaseContext(self._currentContext);\n      context._currentContext.set(key, value);\n      return context;\n    };\n\n    self.deleteValue = (key: symbol): Context => {\n      const context = new BaseContext(self._currentContext);\n      context._currentContext.delete(key);\n      return context;\n    };\n  }\n\n  /**\n   * Get a value from the context.\n   *\n   * @param key key which identifies a context value\n   */\n  public getValue!: (key: symbol) => unknown;\n\n  /**\n   * Create a new context which inherits from this context and has\n   * the given key set to the given value.\n   *\n   * @param key context key for which to set the value\n   * @param value value to set for the given key\n   */\n  public setValue!: (key: symbol, value: unknown) => Context;\n\n  /**\n   * Return a new context which inherits from this context but does\n   * not contain a value for the given key.\n   *\n   * @param key context key for which to clear a value\n   */\n  public deleteValue!: (key: symbol) => Context;\n}\n\n/** The root context is used as the default parent context when there is no active context */\nexport const ROOT_CONTEXT: Context = new BaseContext();\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}