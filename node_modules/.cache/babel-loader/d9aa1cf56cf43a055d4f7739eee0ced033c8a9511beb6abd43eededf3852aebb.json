{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _BaseExternalAccountClient_instances, _BaseExternalAccountClient_pendingAccessToken, _BaseExternalAccountClient_internalRefreshAccessTokenAsync;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseExternalAccountClient = exports.DEFAULT_UNIVERSE = exports.CLOUD_RESOURCE_MANAGER = exports.EXTERNAL_ACCOUNT_TYPE = exports.EXPIRATION_TIME_OFFSET = void 0;\nconst stream = require(\"stream\");\nconst authclient_1 = require(\"./authclient\");\nconst sts = require(\"./stscredentials\");\nconst util_1 = require(\"../util\");\n/**\n * The required token exchange grant_type: rfc8693#section-2.1\n */\nconst STS_GRANT_TYPE = 'urn:ietf:params:oauth:grant-type:token-exchange';\n/**\n * The requested token exchange requested_token_type: rfc8693#section-2.1\n */\nconst STS_REQUEST_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/** The default OAuth scope to request when none is provided. */\nconst DEFAULT_OAUTH_SCOPE = 'https://www.googleapis.com/auth/cloud-platform';\n/** Default impersonated token lifespan in seconds.*/\nconst DEFAULT_TOKEN_LIFESPAN = 3600;\n/**\n * Offset to take into account network delays and server clock skews.\n */\nexports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\n/**\n * The credentials JSON file type for external account clients.\n * There are 3 types of JSON configs:\n * 1. authorized_user => Google end user credential\n * 2. service_account => Google service account credential\n * 3. external_Account => non-GCP service (eg. AWS, Azure, K8s)\n */\nexports.EXTERNAL_ACCOUNT_TYPE = 'external_account';\n/**\n * Cloud resource manager URL used to retrieve project information.\n *\n * @deprecated use {@link BaseExternalAccountClient.cloudResourceManagerURL} instead\n **/\nexports.CLOUD_RESOURCE_MANAGER = 'https://cloudresourcemanager.googleapis.com/v1/projects/';\n/** The workforce audience pattern. */\nconst WORKFORCE_AUDIENCE_PATTERN = '//iam\\\\.googleapis\\\\.com/locations/[^/]+/workforcePools/[^/]+/providers/.+';\nconst DEFAULT_TOKEN_URL = 'https://sts.{universeDomain}/v1/token';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pkg = require('../../../package.json');\n/**\n * For backwards compatibility.\n */\nvar authclient_2 = require(\"./authclient\");\nObject.defineProperty(exports, \"DEFAULT_UNIVERSE\", {\n  enumerable: true,\n  get: function () {\n    return authclient_2.DEFAULT_UNIVERSE;\n  }\n});\n/**\n * Base external account client. This is used to instantiate AuthClients for\n * exchanging external account credentials for GCP access token and authorizing\n * requests to GCP APIs.\n * The base class implements common logic for exchanging various type of\n * external credentials for GCP access token. The logic of determining and\n * retrieving the external credential based on the environment and\n * credential_source will be left for the subclasses.\n */\nclass BaseExternalAccountClient extends authclient_1.AuthClient {\n  /**\n   * Instantiate a BaseExternalAccountClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * @param options The external account options object typically loaded\n   *   from the external account JSON credential file. The camelCased options\n   *   are aliases for the snake_cased options.\n   * @param additionalOptions **DEPRECATED, all options are available in the\n   *   `options` parameter.** Optional additional behavior customization options.\n   *   These currently customize expiration threshold time and whether to retry\n   *   on 401/403 API request errors.\n   */\n  constructor(options, additionalOptions) {\n    var _a;\n    super({\n      ...options,\n      ...additionalOptions\n    });\n    _BaseExternalAccountClient_instances.add(this);\n    /**\n     * A pending access token request. Used for concurrent calls.\n     */\n    _BaseExternalAccountClient_pendingAccessToken.set(this, null);\n    const opts = (0, util_1.originalOrCamelOptions)(options);\n    const type = opts.get('type');\n    if (type && type !== exports.EXTERNAL_ACCOUNT_TYPE) {\n      throw new Error(`Expected \"${exports.EXTERNAL_ACCOUNT_TYPE}\" type but ` + `received \"${options.type}\"`);\n    }\n    const clientId = opts.get('client_id');\n    const clientSecret = opts.get('client_secret');\n    const tokenUrl = (_a = opts.get('token_url')) !== null && _a !== void 0 ? _a : DEFAULT_TOKEN_URL.replace('{universeDomain}', this.universeDomain);\n    const subjectTokenType = opts.get('subject_token_type');\n    const workforcePoolUserProject = opts.get('workforce_pool_user_project');\n    const serviceAccountImpersonationUrl = opts.get('service_account_impersonation_url');\n    const serviceAccountImpersonation = opts.get('service_account_impersonation');\n    const serviceAccountImpersonationLifetime = (0, util_1.originalOrCamelOptions)(serviceAccountImpersonation).get('token_lifetime_seconds');\n    this.cloudResourceManagerURL = new URL(opts.get('cloud_resource_manager_url') || `https://cloudresourcemanager.${this.universeDomain}/v1/projects/`);\n    if (clientId) {\n      this.clientAuth = {\n        confidentialClientType: 'basic',\n        clientId,\n        clientSecret\n      };\n    }\n    this.stsCredential = new sts.StsCredentials(tokenUrl, this.clientAuth);\n    this.scopes = opts.get('scopes') || [DEFAULT_OAUTH_SCOPE];\n    this.cachedAccessToken = null;\n    this.audience = opts.get('audience');\n    this.subjectTokenType = subjectTokenType;\n    this.workforcePoolUserProject = workforcePoolUserProject;\n    const workforceAudiencePattern = new RegExp(WORKFORCE_AUDIENCE_PATTERN);\n    if (this.workforcePoolUserProject && !this.audience.match(workforceAudiencePattern)) {\n      throw new Error('workforcePoolUserProject should not be set for non-workforce pool ' + 'credentials.');\n    }\n    this.serviceAccountImpersonationUrl = serviceAccountImpersonationUrl;\n    this.serviceAccountImpersonationLifetime = serviceAccountImpersonationLifetime;\n    if (this.serviceAccountImpersonationLifetime) {\n      this.configLifetimeRequested = true;\n    } else {\n      this.configLifetimeRequested = false;\n      this.serviceAccountImpersonationLifetime = DEFAULT_TOKEN_LIFESPAN;\n    }\n    this.projectNumber = this.getProjectNumber(this.audience);\n    this.supplierContext = {\n      audience: this.audience,\n      subjectTokenType: this.subjectTokenType,\n      transporter: this.transporter\n    };\n  }\n  /** The service account email to be impersonated, if available. */\n  getServiceAccountEmail() {\n    var _a;\n    if (this.serviceAccountImpersonationUrl) {\n      if (this.serviceAccountImpersonationUrl.length > 256) {\n        /**\n         * Prevents DOS attacks.\n         * @see {@link https://github.com/googleapis/google-auth-library-nodejs/security/code-scanning/84}\n         **/\n        throw new RangeError(`URL is too long: ${this.serviceAccountImpersonationUrl}`);\n      }\n      // Parse email from URL. The formal looks as follows:\n      // https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/name@project-id.iam.gserviceaccount.com:generateAccessToken\n      const re = /serviceAccounts\\/(?<email>[^:]+):generateAccessToken$/;\n      const result = re.exec(this.serviceAccountImpersonationUrl);\n      return ((_a = result === null || result === void 0 ? void 0 : result.groups) === null || _a === void 0 ? void 0 : _a.email) || null;\n    }\n    return null;\n  }\n  /**\n   * Provides a mechanism to inject GCP access tokens directly.\n   * When the provided credential expires, a new credential, using the\n   * external account options, is retrieved.\n   * @param credentials The Credentials object to set on the current client.\n   */\n  setCredentials(credentials) {\n    super.setCredentials(credentials);\n    this.cachedAccessToken = credentials;\n  }\n  /**\n   * @return A promise that resolves with the current GCP access token\n   *   response. If the current credential is expired, a new one is retrieved.\n   */\n  async getAccessToken() {\n    // If cached access token is unavailable or expired, force refresh.\n    if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n      await this.refreshAccessTokenAsync();\n    }\n    // Return GCP access token in GetAccessTokenResponse format.\n    return {\n      token: this.cachedAccessToken.access_token,\n      res: this.cachedAccessToken.res\n    };\n  }\n  /**\n   * The main authentication interface. It takes an optional url which when\n   * present is the endpoint being accessed, and returns a Promise which\n   * resolves with authorization header fields.\n   *\n   * The result has the form:\n   * { Authorization: 'Bearer <access_token_value>' }\n   */\n  async getRequestHeaders() {\n    const accessTokenResponse = await this.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessTokenResponse.token}`\n    };\n    return this.addSharedMetadataHeaders(headers);\n  }\n  request(opts, callback) {\n    if (callback) {\n      this.requestAsync(opts).then(r => callback(null, r), e => {\n        return callback(e, e.response);\n      });\n    } else {\n      return this.requestAsync(opts);\n    }\n  }\n  /**\n   * @return A promise that resolves with the project ID corresponding to the\n   *   current workload identity pool or current workforce pool if\n   *   determinable. For workforce pool credential, it returns the project ID\n   *   corresponding to the workforcePoolUserProject.\n   *   This is introduced to match the current pattern of using the Auth\n   *   library:\n   *   const projectId = await auth.getProjectId();\n   *   const url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;\n   *   const res = await client.request({ url });\n   *   The resource may not have permission\n   *   (resourcemanager.projects.get) to call this API or the required\n   *   scopes may not be selected:\n   *   https://cloud.google.com/resource-manager/reference/rest/v1/projects/get#authorization-scopes\n   */\n  async getProjectId() {\n    const projectNumber = this.projectNumber || this.workforcePoolUserProject;\n    if (this.projectId) {\n      // Return previously determined project ID.\n      return this.projectId;\n    } else if (projectNumber) {\n      // Preferable not to use request() to avoid retrial policies.\n      const headers = await this.getRequestHeaders();\n      const response = await this.transporter.request({\n        ...BaseExternalAccountClient.RETRY_CONFIG,\n        headers,\n        url: `${this.cloudResourceManagerURL.toString()}${projectNumber}`,\n        responseType: 'json'\n      });\n      this.projectId = response.data.projectId;\n      return this.projectId;\n    }\n    return null;\n  }\n  /**\n   * Authenticates the provided HTTP request, processes it and resolves with the\n   * returned response.\n   * @param opts The HTTP request options.\n   * @param reAuthRetried Whether the current attempt is a retry after a failed attempt due to an auth failure.\n   * @return A promise that resolves with the successful response.\n   */\n  async requestAsync(opts) {\n    let reAuthRetried = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let response;\n    try {\n      const requestHeaders = await this.getRequestHeaders();\n      opts.headers = opts.headers || {};\n      if (requestHeaders && requestHeaders['x-goog-user-project']) {\n        opts.headers['x-goog-user-project'] = requestHeaders['x-goog-user-project'];\n      }\n      if (requestHeaders && requestHeaders.Authorization) {\n        opts.headers.Authorization = requestHeaders.Authorization;\n      }\n      response = await this.transporter.request(opts);\n    } catch (e) {\n      const res = e.response;\n      if (res) {\n        const statusCode = res.status;\n        // Retry the request for metadata if the following criteria are true:\n        // - We haven't already retried.  It only makes sense to retry once.\n        // - The response was a 401 or a 403\n        // - The request didn't send a readableStream\n        // - forceRefreshOnFailure is true\n        const isReadableStream = res.config.data instanceof stream.Readable;\n        const isAuthErr = statusCode === 401 || statusCode === 403;\n        if (!reAuthRetried && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {\n          await this.refreshAccessTokenAsync();\n          return await this.requestAsync(opts, true);\n        }\n      }\n      throw e;\n    }\n    return response;\n  }\n  /**\n   * Forces token refresh, even if unexpired tokens are currently cached.\n   * External credentials are exchanged for GCP access tokens via the token\n   * exchange endpoint and other settings provided in the client options\n   * object.\n   * If the service_account_impersonation_url is provided, an additional\n   * step to exchange the external account GCP access token for a service\n   * account impersonated token is performed.\n   * @return A promise that resolves with the fresh GCP access tokens.\n   */\n  async refreshAccessTokenAsync() {\n    // Use an existing access token request, or cache a new one\n    __classPrivateFieldSet(this, _BaseExternalAccountClient_pendingAccessToken, __classPrivateFieldGet(this, _BaseExternalAccountClient_pendingAccessToken, \"f\") || __classPrivateFieldGet(this, _BaseExternalAccountClient_instances, \"m\", _BaseExternalAccountClient_internalRefreshAccessTokenAsync).call(this), \"f\");\n    try {\n      return await __classPrivateFieldGet(this, _BaseExternalAccountClient_pendingAccessToken, \"f\");\n    } finally {\n      // clear pending access token for future requests\n      __classPrivateFieldSet(this, _BaseExternalAccountClient_pendingAccessToken, null, \"f\");\n    }\n  }\n  /**\n   * Returns the workload identity pool project number if it is determinable\n   * from the audience resource name.\n   * @param audience The STS audience used to determine the project number.\n   * @return The project number associated with the workload identity pool, if\n   *   this can be determined from the STS audience field. Otherwise, null is\n   *   returned.\n   */\n  getProjectNumber(audience) {\n    // STS audience pattern:\n    // //iam.googleapis.com/projects/$PROJECT_NUMBER/locations/...\n    const match = audience.match(/\\/projects\\/([^/]+)/);\n    if (!match) {\n      return null;\n    }\n    return match[1];\n  }\n  /**\n   * Exchanges an external account GCP access token for a service\n   * account impersonated access token using iamcredentials\n   * GenerateAccessToken API.\n   * @param token The access token to exchange for a service account access\n   *   token.\n   * @return A promise that resolves with the service account impersonated\n   *   credentials response.\n   */\n  async getImpersonatedAccessToken(token) {\n    const opts = {\n      ...BaseExternalAccountClient.RETRY_CONFIG,\n      url: this.serviceAccountImpersonationUrl,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      },\n      data: {\n        scope: this.getScopesArray(),\n        lifetime: this.serviceAccountImpersonationLifetime + 's'\n      },\n      responseType: 'json'\n    };\n    const response = await this.transporter.request(opts);\n    const successResponse = response.data;\n    return {\n      access_token: successResponse.accessToken,\n      // Convert from ISO format to timestamp.\n      expiry_date: new Date(successResponse.expireTime).getTime(),\n      res: response\n    };\n  }\n  /**\n   * Returns whether the provided credentials are expired or not.\n   * If there is no expiry time, assumes the token is not expired or expiring.\n   * @param accessToken The credentials to check for expiration.\n   * @return Whether the credentials are expired or not.\n   */\n  isExpired(accessToken) {\n    const now = new Date().getTime();\n    return accessToken.expiry_date ? now >= accessToken.expiry_date - this.eagerRefreshThresholdMillis : false;\n  }\n  /**\n   * @return The list of scopes for the requested GCP access token.\n   */\n  getScopesArray() {\n    // Since scopes can be provided as string or array, the type should\n    // be normalized.\n    if (typeof this.scopes === 'string') {\n      return [this.scopes];\n    }\n    return this.scopes || [DEFAULT_OAUTH_SCOPE];\n  }\n  getMetricsHeaderValue() {\n    const nodeVersion = process.version.replace(/^v/, '');\n    const saImpersonation = this.serviceAccountImpersonationUrl !== undefined;\n    const credentialSourceType = this.credentialSourceType ? this.credentialSourceType : 'unknown';\n    return `gl-node/${nodeVersion} auth/${pkg.version} google-byoid-sdk source/${credentialSourceType} sa-impersonation/${saImpersonation} config-lifetime/${this.configLifetimeRequested}`;\n  }\n}\nexports.BaseExternalAccountClient = BaseExternalAccountClient;\n_BaseExternalAccountClient_pendingAccessToken = new WeakMap(), _BaseExternalAccountClient_instances = new WeakSet(), _BaseExternalAccountClient_internalRefreshAccessTokenAsync = async function _BaseExternalAccountClient_internalRefreshAccessTokenAsync() {\n  // Retrieve the external credential.\n  const subjectToken = await this.retrieveSubjectToken();\n  // Construct the STS credentials options.\n  const stsCredentialsOptions = {\n    grantType: STS_GRANT_TYPE,\n    audience: this.audience,\n    requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n    subjectToken,\n    subjectTokenType: this.subjectTokenType,\n    // generateAccessToken requires the provided access token to have\n    // scopes:\n    // https://www.googleapis.com/auth/iam or\n    // https://www.googleapis.com/auth/cloud-platform\n    // The new service account access token scopes will match the user\n    // provided ones.\n    scope: this.serviceAccountImpersonationUrl ? [DEFAULT_OAUTH_SCOPE] : this.getScopesArray()\n  };\n  // Exchange the external credentials for a GCP access token.\n  // Client auth is prioritized over passing the workforcePoolUserProject\n  // parameter for STS token exchange.\n  const additionalOptions = !this.clientAuth && this.workforcePoolUserProject ? {\n    userProject: this.workforcePoolUserProject\n  } : undefined;\n  const additionalHeaders = {\n    'x-goog-api-client': this.getMetricsHeaderValue()\n  };\n  const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, additionalHeaders, additionalOptions);\n  if (this.serviceAccountImpersonationUrl) {\n    this.cachedAccessToken = await this.getImpersonatedAccessToken(stsResponse.access_token);\n  } else if (stsResponse.expires_in) {\n    // Save response in cached access token.\n    this.cachedAccessToken = {\n      access_token: stsResponse.access_token,\n      expiry_date: new Date().getTime() + stsResponse.expires_in * 1000,\n      res: stsResponse.res\n    };\n  } else {\n    // Save response in cached access token.\n    this.cachedAccessToken = {\n      access_token: stsResponse.access_token,\n      res: stsResponse.res\n    };\n  }\n  // Save credentials.\n  this.credentials = {};\n  Object.assign(this.credentials, this.cachedAccessToken);\n  delete this.credentials.res;\n  // Trigger tokens event to notify external listeners.\n  this.emit('tokens', {\n    refresh_token: null,\n    expiry_date: this.cachedAccessToken.expiry_date,\n    access_token: this.cachedAccessToken.access_token,\n    token_type: 'Bearer',\n    id_token: null\n  });\n  // Return the cached access token.\n  return this.cachedAccessToken;\n};","map":{"version":3,"names":["__classPrivateFieldGet","receiver","state","kind","f","TypeError","has","call","value","get","__classPrivateFieldSet","set","_BaseExternalAccountClient_instances","_BaseExternalAccountClient_pendingAccessToken","_BaseExternalAccountClient_internalRefreshAccessTokenAsync","Object","defineProperty","exports","BaseExternalAccountClient","DEFAULT_UNIVERSE","CLOUD_RESOURCE_MANAGER","EXTERNAL_ACCOUNT_TYPE","EXPIRATION_TIME_OFFSET","stream","require","authclient_1","sts","util_1","STS_GRANT_TYPE","STS_REQUEST_TOKEN_TYPE","DEFAULT_OAUTH_SCOPE","DEFAULT_TOKEN_LIFESPAN","WORKFORCE_AUDIENCE_PATTERN","DEFAULT_TOKEN_URL","pkg","authclient_2","enumerable","AuthClient","constructor","options","additionalOptions","_a","add","opts","originalOrCamelOptions","type","Error","clientId","clientSecret","tokenUrl","replace","universeDomain","subjectTokenType","workforcePoolUserProject","serviceAccountImpersonationUrl","serviceAccountImpersonation","serviceAccountImpersonationLifetime","cloudResourceManagerURL","URL","clientAuth","confidentialClientType","stsCredential","StsCredentials","scopes","cachedAccessToken","audience","workforceAudiencePattern","RegExp","match","configLifetimeRequested","projectNumber","getProjectNumber","supplierContext","transporter","getServiceAccountEmail","length","RangeError","re","result","exec","groups","email","setCredentials","credentials","getAccessToken","isExpired","refreshAccessTokenAsync","token","access_token","res","getRequestHeaders","accessTokenResponse","headers","Authorization","addSharedMetadataHeaders","request","callback","requestAsync","then","r","e","response","getProjectId","projectId","RETRY_CONFIG","url","toString","responseType","data","reAuthRetried","requestHeaders","statusCode","status","isReadableStream","config","Readable","isAuthErr","forceRefreshOnFailure","getImpersonatedAccessToken","method","scope","getScopesArray","lifetime","successResponse","accessToken","expiry_date","Date","expireTime","getTime","now","eagerRefreshThresholdMillis","getMetricsHeaderValue","nodeVersion","process","version","saImpersonation","undefined","credentialSourceType","WeakMap","WeakSet","subjectToken","retrieveSubjectToken","stsCredentialsOptions","grantType","requestedTokenType","userProject","additionalHeaders","stsResponse","exchangeToken","expires_in","assign","emit","refresh_token","token_type","id_token"],"sources":["/home/yadu/Music/Gifty/node_modules/google-auth-library/build/src/auth/baseexternalclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _BaseExternalAccountClient_instances, _BaseExternalAccountClient_pendingAccessToken, _BaseExternalAccountClient_internalRefreshAccessTokenAsync;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseExternalAccountClient = exports.DEFAULT_UNIVERSE = exports.CLOUD_RESOURCE_MANAGER = exports.EXTERNAL_ACCOUNT_TYPE = exports.EXPIRATION_TIME_OFFSET = void 0;\nconst stream = require(\"stream\");\nconst authclient_1 = require(\"./authclient\");\nconst sts = require(\"./stscredentials\");\nconst util_1 = require(\"../util\");\n/**\n * The required token exchange grant_type: rfc8693#section-2.1\n */\nconst STS_GRANT_TYPE = 'urn:ietf:params:oauth:grant-type:token-exchange';\n/**\n * The requested token exchange requested_token_type: rfc8693#section-2.1\n */\nconst STS_REQUEST_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/** The default OAuth scope to request when none is provided. */\nconst DEFAULT_OAUTH_SCOPE = 'https://www.googleapis.com/auth/cloud-platform';\n/** Default impersonated token lifespan in seconds.*/\nconst DEFAULT_TOKEN_LIFESPAN = 3600;\n/**\n * Offset to take into account network delays and server clock skews.\n */\nexports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\n/**\n * The credentials JSON file type for external account clients.\n * There are 3 types of JSON configs:\n * 1. authorized_user => Google end user credential\n * 2. service_account => Google service account credential\n * 3. external_Account => non-GCP service (eg. AWS, Azure, K8s)\n */\nexports.EXTERNAL_ACCOUNT_TYPE = 'external_account';\n/**\n * Cloud resource manager URL used to retrieve project information.\n *\n * @deprecated use {@link BaseExternalAccountClient.cloudResourceManagerURL} instead\n **/\nexports.CLOUD_RESOURCE_MANAGER = 'https://cloudresourcemanager.googleapis.com/v1/projects/';\n/** The workforce audience pattern. */\nconst WORKFORCE_AUDIENCE_PATTERN = '//iam\\\\.googleapis\\\\.com/locations/[^/]+/workforcePools/[^/]+/providers/.+';\nconst DEFAULT_TOKEN_URL = 'https://sts.{universeDomain}/v1/token';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst pkg = require('../../../package.json');\n/**\n * For backwards compatibility.\n */\nvar authclient_2 = require(\"./authclient\");\nObject.defineProperty(exports, \"DEFAULT_UNIVERSE\", { enumerable: true, get: function () { return authclient_2.DEFAULT_UNIVERSE; } });\n/**\n * Base external account client. This is used to instantiate AuthClients for\n * exchanging external account credentials for GCP access token and authorizing\n * requests to GCP APIs.\n * The base class implements common logic for exchanging various type of\n * external credentials for GCP access token. The logic of determining and\n * retrieving the external credential based on the environment and\n * credential_source will be left for the subclasses.\n */\nclass BaseExternalAccountClient extends authclient_1.AuthClient {\n    /**\n     * Instantiate a BaseExternalAccountClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file. The camelCased options\n     *   are aliases for the snake_cased options.\n     * @param additionalOptions **DEPRECATED, all options are available in the\n     *   `options` parameter.** Optional additional behavior customization options.\n     *   These currently customize expiration threshold time and whether to retry\n     *   on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        var _a;\n        super({ ...options, ...additionalOptions });\n        _BaseExternalAccountClient_instances.add(this);\n        /**\n         * A pending access token request. Used for concurrent calls.\n         */\n        _BaseExternalAccountClient_pendingAccessToken.set(this, null);\n        const opts = (0, util_1.originalOrCamelOptions)(options);\n        const type = opts.get('type');\n        if (type && type !== exports.EXTERNAL_ACCOUNT_TYPE) {\n            throw new Error(`Expected \"${exports.EXTERNAL_ACCOUNT_TYPE}\" type but ` +\n                `received \"${options.type}\"`);\n        }\n        const clientId = opts.get('client_id');\n        const clientSecret = opts.get('client_secret');\n        const tokenUrl = (_a = opts.get('token_url')) !== null && _a !== void 0 ? _a : DEFAULT_TOKEN_URL.replace('{universeDomain}', this.universeDomain);\n        const subjectTokenType = opts.get('subject_token_type');\n        const workforcePoolUserProject = opts.get('workforce_pool_user_project');\n        const serviceAccountImpersonationUrl = opts.get('service_account_impersonation_url');\n        const serviceAccountImpersonation = opts.get('service_account_impersonation');\n        const serviceAccountImpersonationLifetime = (0, util_1.originalOrCamelOptions)(serviceAccountImpersonation).get('token_lifetime_seconds');\n        this.cloudResourceManagerURL = new URL(opts.get('cloud_resource_manager_url') ||\n            `https://cloudresourcemanager.${this.universeDomain}/v1/projects/`);\n        if (clientId) {\n            this.clientAuth = {\n                confidentialClientType: 'basic',\n                clientId,\n                clientSecret,\n            };\n        }\n        this.stsCredential = new sts.StsCredentials(tokenUrl, this.clientAuth);\n        this.scopes = opts.get('scopes') || [DEFAULT_OAUTH_SCOPE];\n        this.cachedAccessToken = null;\n        this.audience = opts.get('audience');\n        this.subjectTokenType = subjectTokenType;\n        this.workforcePoolUserProject = workforcePoolUserProject;\n        const workforceAudiencePattern = new RegExp(WORKFORCE_AUDIENCE_PATTERN);\n        if (this.workforcePoolUserProject &&\n            !this.audience.match(workforceAudiencePattern)) {\n            throw new Error('workforcePoolUserProject should not be set for non-workforce pool ' +\n                'credentials.');\n        }\n        this.serviceAccountImpersonationUrl = serviceAccountImpersonationUrl;\n        this.serviceAccountImpersonationLifetime =\n            serviceAccountImpersonationLifetime;\n        if (this.serviceAccountImpersonationLifetime) {\n            this.configLifetimeRequested = true;\n        }\n        else {\n            this.configLifetimeRequested = false;\n            this.serviceAccountImpersonationLifetime = DEFAULT_TOKEN_LIFESPAN;\n        }\n        this.projectNumber = this.getProjectNumber(this.audience);\n        this.supplierContext = {\n            audience: this.audience,\n            subjectTokenType: this.subjectTokenType,\n            transporter: this.transporter,\n        };\n    }\n    /** The service account email to be impersonated, if available. */\n    getServiceAccountEmail() {\n        var _a;\n        if (this.serviceAccountImpersonationUrl) {\n            if (this.serviceAccountImpersonationUrl.length > 256) {\n                /**\n                 * Prevents DOS attacks.\n                 * @see {@link https://github.com/googleapis/google-auth-library-nodejs/security/code-scanning/84}\n                 **/\n                throw new RangeError(`URL is too long: ${this.serviceAccountImpersonationUrl}`);\n            }\n            // Parse email from URL. The formal looks as follows:\n            // https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/name@project-id.iam.gserviceaccount.com:generateAccessToken\n            const re = /serviceAccounts\\/(?<email>[^:]+):generateAccessToken$/;\n            const result = re.exec(this.serviceAccountImpersonationUrl);\n            return ((_a = result === null || result === void 0 ? void 0 : result.groups) === null || _a === void 0 ? void 0 : _a.email) || null;\n        }\n        return null;\n    }\n    /**\n     * Provides a mechanism to inject GCP access tokens directly.\n     * When the provided credential expires, a new credential, using the\n     * external account options, is retrieved.\n     * @param credentials The Credentials object to set on the current client.\n     */\n    setCredentials(credentials) {\n        super.setCredentials(credentials);\n        this.cachedAccessToken = credentials;\n    }\n    /**\n     * @return A promise that resolves with the current GCP access token\n     *   response. If the current credential is expired, a new one is retrieved.\n     */\n    async getAccessToken() {\n        // If cached access token is unavailable or expired, force refresh.\n        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n            await this.refreshAccessTokenAsync();\n        }\n        // Return GCP access token in GetAccessTokenResponse format.\n        return {\n            token: this.cachedAccessToken.access_token,\n            res: this.cachedAccessToken.res,\n        };\n    }\n    /**\n     * The main authentication interface. It takes an optional url which when\n     * present is the endpoint being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * The result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     */\n    async getRequestHeaders() {\n        const accessTokenResponse = await this.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessTokenResponse.token}`,\n        };\n        return this.addSharedMetadataHeaders(headers);\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then(r => callback(null, r), e => {\n                return callback(e, e.response);\n            });\n        }\n        else {\n            return this.requestAsync(opts);\n        }\n    }\n    /**\n     * @return A promise that resolves with the project ID corresponding to the\n     *   current workload identity pool or current workforce pool if\n     *   determinable. For workforce pool credential, it returns the project ID\n     *   corresponding to the workforcePoolUserProject.\n     *   This is introduced to match the current pattern of using the Auth\n     *   library:\n     *   const projectId = await auth.getProjectId();\n     *   const url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;\n     *   const res = await client.request({ url });\n     *   The resource may not have permission\n     *   (resourcemanager.projects.get) to call this API or the required\n     *   scopes may not be selected:\n     *   https://cloud.google.com/resource-manager/reference/rest/v1/projects/get#authorization-scopes\n     */\n    async getProjectId() {\n        const projectNumber = this.projectNumber || this.workforcePoolUserProject;\n        if (this.projectId) {\n            // Return previously determined project ID.\n            return this.projectId;\n        }\n        else if (projectNumber) {\n            // Preferable not to use request() to avoid retrial policies.\n            const headers = await this.getRequestHeaders();\n            const response = await this.transporter.request({\n                ...BaseExternalAccountClient.RETRY_CONFIG,\n                headers,\n                url: `${this.cloudResourceManagerURL.toString()}${projectNumber}`,\n                responseType: 'json',\n            });\n            this.projectId = response.data.projectId;\n            return this.projectId;\n        }\n        return null;\n    }\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param reAuthRetried Whether the current attempt is a retry after a failed attempt due to an auth failure.\n     * @return A promise that resolves with the successful response.\n     */\n    async requestAsync(opts, reAuthRetried = false) {\n        let response;\n        try {\n            const requestHeaders = await this.getRequestHeaders();\n            opts.headers = opts.headers || {};\n            if (requestHeaders && requestHeaders['x-goog-user-project']) {\n                opts.headers['x-goog-user-project'] =\n                    requestHeaders['x-goog-user-project'];\n            }\n            if (requestHeaders && requestHeaders.Authorization) {\n                opts.headers.Authorization = requestHeaders.Authorization;\n            }\n            response = await this.transporter.request(opts);\n        }\n        catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!reAuthRetried &&\n                    isAuthErr &&\n                    !isReadableStream &&\n                    this.forceRefreshOnFailure) {\n                    await this.refreshAccessTokenAsync();\n                    return await this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * External credentials are exchanged for GCP access tokens via the token\n     * exchange endpoint and other settings provided in the client options\n     * object.\n     * If the service_account_impersonation_url is provided, an additional\n     * step to exchange the external account GCP access token for a service\n     * account impersonated token is performed.\n     * @return A promise that resolves with the fresh GCP access tokens.\n     */\n    async refreshAccessTokenAsync() {\n        // Use an existing access token request, or cache a new one\n        __classPrivateFieldSet(this, _BaseExternalAccountClient_pendingAccessToken, __classPrivateFieldGet(this, _BaseExternalAccountClient_pendingAccessToken, \"f\") || __classPrivateFieldGet(this, _BaseExternalAccountClient_instances, \"m\", _BaseExternalAccountClient_internalRefreshAccessTokenAsync).call(this), \"f\");\n        try {\n            return await __classPrivateFieldGet(this, _BaseExternalAccountClient_pendingAccessToken, \"f\");\n        }\n        finally {\n            // clear pending access token for future requests\n            __classPrivateFieldSet(this, _BaseExternalAccountClient_pendingAccessToken, null, \"f\");\n        }\n    }\n    /**\n     * Returns the workload identity pool project number if it is determinable\n     * from the audience resource name.\n     * @param audience The STS audience used to determine the project number.\n     * @return The project number associated with the workload identity pool, if\n     *   this can be determined from the STS audience field. Otherwise, null is\n     *   returned.\n     */\n    getProjectNumber(audience) {\n        // STS audience pattern:\n        // //iam.googleapis.com/projects/$PROJECT_NUMBER/locations/...\n        const match = audience.match(/\\/projects\\/([^/]+)/);\n        if (!match) {\n            return null;\n        }\n        return match[1];\n    }\n    /**\n     * Exchanges an external account GCP access token for a service\n     * account impersonated access token using iamcredentials\n     * GenerateAccessToken API.\n     * @param token The access token to exchange for a service account access\n     *   token.\n     * @return A promise that resolves with the service account impersonated\n     *   credentials response.\n     */\n    async getImpersonatedAccessToken(token) {\n        const opts = {\n            ...BaseExternalAccountClient.RETRY_CONFIG,\n            url: this.serviceAccountImpersonationUrl,\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`,\n            },\n            data: {\n                scope: this.getScopesArray(),\n                lifetime: this.serviceAccountImpersonationLifetime + 's',\n            },\n            responseType: 'json',\n        };\n        const response = await this.transporter.request(opts);\n        const successResponse = response.data;\n        return {\n            access_token: successResponse.accessToken,\n            // Convert from ISO format to timestamp.\n            expiry_date: new Date(successResponse.expireTime).getTime(),\n            res: response,\n        };\n    }\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param accessToken The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */\n    isExpired(accessToken) {\n        const now = new Date().getTime();\n        return accessToken.expiry_date\n            ? now >= accessToken.expiry_date - this.eagerRefreshThresholdMillis\n            : false;\n    }\n    /**\n     * @return The list of scopes for the requested GCP access token.\n     */\n    getScopesArray() {\n        // Since scopes can be provided as string or array, the type should\n        // be normalized.\n        if (typeof this.scopes === 'string') {\n            return [this.scopes];\n        }\n        return this.scopes || [DEFAULT_OAUTH_SCOPE];\n    }\n    getMetricsHeaderValue() {\n        const nodeVersion = process.version.replace(/^v/, '');\n        const saImpersonation = this.serviceAccountImpersonationUrl !== undefined;\n        const credentialSourceType = this.credentialSourceType\n            ? this.credentialSourceType\n            : 'unknown';\n        return `gl-node/${nodeVersion} auth/${pkg.version} google-byoid-sdk source/${credentialSourceType} sa-impersonation/${saImpersonation} config-lifetime/${this.configLifetimeRequested}`;\n    }\n}\nexports.BaseExternalAccountClient = BaseExternalAccountClient;\n_BaseExternalAccountClient_pendingAccessToken = new WeakMap(), _BaseExternalAccountClient_instances = new WeakSet(), _BaseExternalAccountClient_internalRefreshAccessTokenAsync = async function _BaseExternalAccountClient_internalRefreshAccessTokenAsync() {\n    // Retrieve the external credential.\n    const subjectToken = await this.retrieveSubjectToken();\n    // Construct the STS credentials options.\n    const stsCredentialsOptions = {\n        grantType: STS_GRANT_TYPE,\n        audience: this.audience,\n        requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n        subjectToken,\n        subjectTokenType: this.subjectTokenType,\n        // generateAccessToken requires the provided access token to have\n        // scopes:\n        // https://www.googleapis.com/auth/iam or\n        // https://www.googleapis.com/auth/cloud-platform\n        // The new service account access token scopes will match the user\n        // provided ones.\n        scope: this.serviceAccountImpersonationUrl\n            ? [DEFAULT_OAUTH_SCOPE]\n            : this.getScopesArray(),\n    };\n    // Exchange the external credentials for a GCP access token.\n    // Client auth is prioritized over passing the workforcePoolUserProject\n    // parameter for STS token exchange.\n    const additionalOptions = !this.clientAuth && this.workforcePoolUserProject\n        ? { userProject: this.workforcePoolUserProject }\n        : undefined;\n    const additionalHeaders = {\n        'x-goog-api-client': this.getMetricsHeaderValue(),\n    };\n    const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, additionalHeaders, additionalOptions);\n    if (this.serviceAccountImpersonationUrl) {\n        this.cachedAccessToken = await this.getImpersonatedAccessToken(stsResponse.access_token);\n    }\n    else if (stsResponse.expires_in) {\n        // Save response in cached access token.\n        this.cachedAccessToken = {\n            access_token: stsResponse.access_token,\n            expiry_date: new Date().getTime() + stsResponse.expires_in * 1000,\n            res: stsResponse.res,\n        };\n    }\n    else {\n        // Save response in cached access token.\n        this.cachedAccessToken = {\n            access_token: stsResponse.access_token,\n            res: stsResponse.res,\n        };\n    }\n    // Save credentials.\n    this.credentials = {};\n    Object.assign(this.credentials, this.cachedAccessToken);\n    delete this.credentials.res;\n    // Trigger tokens event to notify external listeners.\n    this.emit('tokens', {\n        refresh_token: null,\n        expiry_date: this.cachedAccessToken.expiry_date,\n        access_token: this.cachedAccessToken.access_token,\n        token_type: 'Bearer',\n        id_token: null,\n    });\n    // Return the cached access token.\n    return this.cachedAccessToken;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}