{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RenameOperation = void 0;\nconst collection_1 = require(\"../collection\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass RenameOperation extends command_1.CommandOperation {\n  constructor(collection, newName, options) {\n    super(collection, options);\n    this.collection = collection;\n    this.newName = newName;\n    this.options = options;\n    this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n  }\n  get commandName() {\n    return 'renameCollection';\n  }\n  async execute(server, session) {\n    // Build the command\n    const renameCollection = this.collection.namespace;\n    const toCollection = this.collection.s.namespace.withCollection(this.newName).toString();\n    const dropTarget = typeof this.options.dropTarget === 'boolean' ? this.options.dropTarget : false;\n    const command = {\n      renameCollection: renameCollection,\n      to: toCollection,\n      dropTarget: dropTarget\n    };\n    await super.executeCommand(server, session, command);\n    return new collection_1.Collection(this.collection.s.db, this.newName, this.collection.s.options);\n  }\n}\nexports.RenameOperation = RenameOperation;\n(0, operation_1.defineAspects)(RenameOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"mappings":";;;;;;AACA;AAGA;AACA;AACA;AAUA;AACA,MAAaA,eAAgB,SAAQC,0BAA0B;EAC7DC,YACSC,UAAsB,EACtBC,OAAe,EACNC,OAAsB;IAEtC,KAAK,CAACF,UAAU,EAAEE,OAAO,CAAC;IAJnB,eAAU,GAAVF,UAAU;IACV,YAAO,GAAPC,OAAO;IACE,YAAO,GAAPC,OAAO;IAGvB,IAAI,CAACC,EAAE,GAAG,IAAIC,wBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC;EACjD;EAEA,IAAaC,WAAW;IACtB,OAAO,kBAA2B;EACpC;EAES,MAAMC,OAAO,CAACC,MAAc,EAAEC,OAAkC;IACvE;IACA,MAAMC,gBAAgB,GAAG,IAAI,CAACT,UAAU,CAACU,SAAS;IAClD,MAAMC,YAAY,GAAG,IAAI,CAACX,UAAU,CAACY,CAAC,CAACF,SAAS,CAACG,cAAc,CAAC,IAAI,CAACZ,OAAO,CAAC,CAACa,QAAQ,EAAE;IACxF,MAAMC,UAAU,GACd,OAAO,IAAI,CAACb,OAAO,CAACa,UAAU,KAAK,SAAS,GAAG,IAAI,CAACb,OAAO,CAACa,UAAU,GAAG,KAAK;IAEhF,MAAMC,OAAO,GAAG;MACdP,gBAAgB,EAAEA,gBAAgB;MAClCQ,EAAE,EAAEN,YAAY;MAChBI,UAAU,EAAEA;KACb;IAED,MAAM,KAAK,CAACG,cAAc,CAACX,MAAM,EAAEC,OAAO,EAAEQ,OAAO,CAAC;IACpD,OAAO,IAAIG,uBAAU,CAAC,IAAI,CAACnB,UAAU,CAACY,CAAC,CAACQ,EAAE,EAAE,IAAI,CAACnB,OAAO,EAAE,IAAI,CAACD,UAAU,CAACY,CAAC,CAACV,OAAO,CAAC;EACtF;;AA7BFmB;AAgCA,6BAAa,EAACxB,eAAe,EAAE,CAACyB,kBAAM,CAACC,eAAe,CAAC,CAAC","names":["RenameOperation","command_1","constructor","collection","newName","options","ns","utils_1","commandName","execute","server","session","renameCollection","namespace","toCollection","s","withCollection","toString","dropTarget","command","to","executeCommand","collection_1","db","exports","operation_1","WRITE_OPERATION"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/operations/rename.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport { Collection } from '../collection';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { MongoDBNamespace } from '../utils';\nimport { CommandOperation, type CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\n\n/** @public */\nexport interface RenameOptions extends CommandOperationOptions {\n  /** Drop the target name collection if it previously exists. */\n  dropTarget?: boolean;\n  /** Unclear */\n  new_collection?: boolean;\n}\n\n/** @internal */\nexport class RenameOperation extends CommandOperation<Document> {\n  constructor(\n    public collection: Collection,\n    public newName: string,\n    public override options: RenameOptions\n  ) {\n    super(collection, options);\n    this.ns = new MongoDBNamespace('admin', '$cmd');\n  }\n\n  override get commandName(): string {\n    return 'renameCollection' as const;\n  }\n\n  override async execute(server: Server, session: ClientSession | undefined): Promise<Collection> {\n    // Build the command\n    const renameCollection = this.collection.namespace;\n    const toCollection = this.collection.s.namespace.withCollection(this.newName).toString();\n    const dropTarget =\n      typeof this.options.dropTarget === 'boolean' ? this.options.dropTarget : false;\n\n    const command = {\n      renameCollection: renameCollection,\n      to: toCollection,\n      dropTarget: dropTarget\n    };\n\n    await super.executeCommand(server, session, command);\n    return new Collection(this.collection.s.db, this.newName, this.collection.s.options);\n  }\n}\n\ndefineAspects(RenameOperation, [Aspect.WRITE_OPERATION]);\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}