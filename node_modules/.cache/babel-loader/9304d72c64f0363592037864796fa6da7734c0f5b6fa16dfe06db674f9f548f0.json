{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RTTSampler = exports.MonitorInterval = exports.RTTPinger = exports.Monitor = exports.ServerMonitoringMode = void 0;\nconst timers_1 = require(\"timers\");\nconst bson_1 = require(\"../bson\");\nconst connect_1 = require(\"../cmap/connect\");\nconst client_metadata_1 = require(\"../cmap/handshake/client_metadata\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_logger_1 = require(\"../mongo_logger\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst server_1 = require(\"./server\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, STATE_IDLE, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, common_1.STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, common_1.STATE_CLOSING]\n});\nconst INVALID_REQUEST_CHECK_STATES = new Set([common_1.STATE_CLOSING, common_1.STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor) {\n  return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @public */\nexports.ServerMonitoringMode = Object.freeze({\n  auto: 'auto',\n  poll: 'poll',\n  stream: 'stream'\n});\n/** @internal */\nclass Monitor extends mongo_types_1.TypedEventEmitter {\n  constructor(server, options) {\n    super();\n    /** @internal */\n    this.component = mongo_logger_1.MongoLoggableComponent.TOPOLOGY;\n    this[kServer] = server;\n    this.connection = null;\n    this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kMonitorId] = undefined;\n    this.s = {\n      state: common_1.STATE_CLOSED\n    };\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500,\n      serverMonitoringMode: options.serverMonitoringMode\n    });\n    this.isRunningInFaasEnv = (0, client_metadata_1.getFAASEnv)() != null;\n    this.mongoLogger = this[kServer].topology.client?.mongoLogger;\n    this.rttSampler = new RTTSampler(10);\n    const cancellationToken = this[kCancellationToken];\n    // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n    const connectOptions = {\n      id: '<monitor>',\n      generation: server.pool.generation,\n      cancellationToken,\n      hostAddress: server.description.hostAddress,\n      ...options,\n      // force BSON serialization options\n      raw: false,\n      useBigInt64: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: true\n    };\n    // ensure no authentication is used for monitoring\n    delete connectOptions.credentials;\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n    this.connectOptions = Object.freeze(connectOptions);\n  }\n  connect() {\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    }\n    // start\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n      immediate: true\n    });\n  }\n  requestCheck() {\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n    this[kMonitorId]?.wake();\n  }\n  reset() {\n    const topologyVersion = this[kServer].description.topologyVersion;\n    if (isInCloseState(this) || topologyVersion == null) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CLOSING);\n    resetMonitorState(this);\n    // restart monitor\n    stateTransition(this, STATE_IDLE);\n    // restart monitoring\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n    });\n  }\n  close() {\n    if (isInCloseState(this)) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CLOSING);\n    resetMonitorState(this);\n    // close monitor\n    this.emit('close');\n    stateTransition(this, common_1.STATE_CLOSED);\n  }\n  get roundTripTime() {\n    return this.rttSampler.average();\n  }\n  get minRoundTripTime() {\n    return this.rttSampler.min();\n  }\n  get latestRtt() {\n    return this.rttSampler.last;\n  }\n  addRttSample(rtt) {\n    this.rttSampler.addSample(rtt);\n  }\n  clearRttSamples() {\n    this.rttSampler.clear();\n  }\n}\nexports.Monitor = Monitor;\nfunction resetMonitorState(monitor) {\n  monitor[kMonitorId]?.stop();\n  monitor[kMonitorId] = undefined;\n  monitor.rttPinger?.close();\n  monitor.rttPinger = undefined;\n  monitor[kCancellationToken].emit('cancel');\n  monitor.connection?.destroy();\n  monitor.connection = null;\n  monitor.clearRttSamples();\n}\nfunction useStreamingProtocol(monitor, topologyVersion) {\n  // If we have no topology version we always poll no matter\n  // what the user provided, since the server does not support\n  // the streaming protocol.\n  if (topologyVersion == null) return false;\n  const serverMonitoringMode = monitor.options.serverMonitoringMode;\n  if (serverMonitoringMode === exports.ServerMonitoringMode.poll) return false;\n  if (serverMonitoringMode === exports.ServerMonitoringMode.stream) return true;\n  // If we are in auto mode, we need to figure out if we're in a FaaS\n  // environment or not and choose the appropriate mode.\n  if (monitor.isRunningInFaasEnv) return false;\n  return true;\n}\nfunction checkServer(monitor, callback) {\n  let start;\n  let awaited;\n  const topologyVersion = monitor[kServer].description.topologyVersion;\n  const isAwaitable = useStreamingProtocol(monitor, topologyVersion);\n  monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_STARTED, monitor[kServer].topology.s.id, undefined, new events_1.ServerHeartbeatStartedEvent(monitor.address, isAwaitable));\n  function onHeartbeatFailed(err) {\n    monitor.connection?.destroy();\n    monitor.connection = null;\n    monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_FAILED, monitor[kServer].topology.s.id, undefined, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err, awaited));\n    const error = !(err instanceof error_1.MongoError) ? new error_1.MongoError(error_1.MongoError.buildErrorMessage(err), {\n      cause: err\n    }) : err;\n    error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n    if (error instanceof error_1.MongoNetworkTimeoutError) {\n      error.addErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n    }\n    monitor.emit('resetServer', error);\n    callback(err);\n  }\n  function onHeartbeatSucceeded(hello) {\n    if (!('isWritablePrimary' in hello)) {\n      // Provide hello-style response document.\n      hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];\n    }\n    // NOTE: here we use the latestRtt as this measurement corresponds with the value\n    // obtained for this successful heartbeat, if there is no latestRtt, then we calculate the\n    // duration\n    const duration = isAwaitable && monitor.rttPinger ? monitor.rttPinger.latestRtt ?? (0, utils_1.calculateDurationInMs)(start) : (0, utils_1.calculateDurationInMs)(start);\n    monitor.addRttSample(duration);\n    monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, monitor[kServer].topology.s.id, hello.connectionId, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello, isAwaitable));\n    if (isAwaitable) {\n      // If we are using the streaming protocol then we immediately issue another 'started'\n      // event, otherwise the \"check\" is complete and return to the main monitor loop\n      monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_STARTED, monitor[kServer].topology.s.id, undefined, new events_1.ServerHeartbeatStartedEvent(monitor.address, true));\n      // We have not actually sent an outgoing handshake, but when we get the next response we\n      // want the duration to reflect the time since we last heard from the server\n      start = (0, utils_1.now)();\n    } else {\n      monitor.rttPinger?.close();\n      monitor.rttPinger = undefined;\n      callback(undefined, hello);\n    }\n  }\n  const {\n    connection\n  } = monitor;\n  if (connection && !connection.closed) {\n    const {\n      serverApi,\n      helloOk\n    } = connection;\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n    const cmd = {\n      [serverApi?.version || helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n      ...(isAwaitable && topologyVersion ? {\n        maxAwaitTimeMS,\n        topologyVersion: makeTopologyVersion(topologyVersion)\n      } : {})\n    };\n    const options = isAwaitable ? {\n      socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n      exhaustAllowed: true\n    } : {\n      socketTimeoutMS: connectTimeoutMS\n    };\n    if (isAwaitable && monitor.rttPinger == null) {\n      monitor.rttPinger = new RTTPinger(monitor);\n    }\n    // Record new start time before sending handshake\n    start = (0, utils_1.now)();\n    if (isAwaitable) {\n      awaited = true;\n      return connection.exhaustCommand((0, utils_1.ns)('admin.$cmd'), cmd, options, (error, hello) => {\n        if (error) return onHeartbeatFailed(error);\n        return onHeartbeatSucceeded(hello);\n      });\n    }\n    awaited = false;\n    connection.command((0, utils_1.ns)('admin.$cmd'), cmd, options).then(onHeartbeatSucceeded, onHeartbeatFailed);\n    return;\n  }\n  // connecting does an implicit `hello`\n  (async () => {\n    const socket = await (0, connect_1.makeSocket)(monitor.connectOptions);\n    const connection = (0, connect_1.makeConnection)(monitor.connectOptions, socket);\n    // The start time is after socket creation but before the handshake\n    start = (0, utils_1.now)();\n    try {\n      await (0, connect_1.performInitialHandshake)(connection, monitor.connectOptions);\n      return connection;\n    } catch (error) {\n      connection.destroy();\n      throw error;\n    }\n  })().then(connection => {\n    if (isInCloseState(monitor)) {\n      connection.destroy();\n      return;\n    }\n    const duration = (0, utils_1.calculateDurationInMs)(start);\n    monitor.addRttSample(duration);\n    monitor.connection = connection;\n    monitor.emitAndLogHeartbeat(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, monitor[kServer].topology.s.id, connection.hello?.connectionId, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, connection.hello, useStreamingProtocol(monitor, connection.hello?.topologyVersion)));\n    callback(undefined, connection.hello);\n  }, error => {\n    monitor.connection = null;\n    awaited = false;\n    onHeartbeatFailed(error);\n  });\n}\nfunction monitorServer(monitor) {\n  return callback => {\n    if (monitor.s.state === STATE_MONITORING) {\n      process.nextTick(callback);\n      return;\n    }\n    stateTransition(monitor, STATE_MONITORING);\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n      callback();\n    }\n    checkServer(monitor, (err, hello) => {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === common_1.ServerType.Unknown) {\n          return done();\n        }\n      }\n      // if the check indicates streaming is supported, immediately reschedule monitoring\n      if (useStreamingProtocol(monitor, hello?.topologyVersion)) {\n        (0, timers_1.setTimeout)(() => {\n          if (!isInCloseState(monitor)) {\n            monitor[kMonitorId]?.wake();\n          }\n        }, 0);\n      }\n      done();\n    });\n  };\n}\nfunction makeTopologyVersion(tv) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n  };\n}\n/** @internal */\nclass RTTPinger {\n  constructor(monitor) {\n    this.connection = undefined;\n    this[kCancellationToken] = monitor[kCancellationToken];\n    this.closed = false;\n    this.monitor = monitor;\n    this.latestRtt = monitor.latestRtt ?? undefined;\n    const heartbeatFrequencyMS = monitor.options.heartbeatFrequencyMS;\n    this[kMonitorId] = (0, timers_1.setTimeout)(() => this.measureRoundTripTime(), heartbeatFrequencyMS);\n  }\n  get roundTripTime() {\n    return this.monitor.roundTripTime;\n  }\n  get minRoundTripTime() {\n    return this.monitor.minRoundTripTime;\n  }\n  close() {\n    this.closed = true;\n    (0, timers_1.clearTimeout)(this[kMonitorId]);\n    this.connection?.destroy();\n    this.connection = undefined;\n  }\n  measureAndReschedule(start, conn) {\n    if (this.closed) {\n      conn?.destroy();\n      return;\n    }\n    if (this.connection == null) {\n      this.connection = conn;\n    }\n    this.latestRtt = (0, utils_1.calculateDurationInMs)(start);\n    this[kMonitorId] = (0, timers_1.setTimeout)(() => this.measureRoundTripTime(), this.monitor.options.heartbeatFrequencyMS);\n  }\n  measureRoundTripTime() {\n    const start = (0, utils_1.now)();\n    if (this.closed) {\n      return;\n    }\n    const connection = this.connection;\n    if (connection == null) {\n      (0, connect_1.connect)(this.monitor.connectOptions).then(connection => {\n        this.measureAndReschedule(start, connection);\n      }, () => {\n        this.connection = undefined;\n      });\n      return;\n    }\n    const commandName = connection.serverApi?.version || connection.helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND;\n    connection.command((0, utils_1.ns)('admin.$cmd'), {\n      [commandName]: 1\n    }, undefined).then(() => this.measureAndReschedule(start), () => {\n      this.connection?.destroy();\n      this.connection = undefined;\n      return;\n    });\n  }\n}\nexports.RTTPinger = RTTPinger;\n/**\n * @internal\n */\nclass MonitorInterval {\n  constructor(fn) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.isExpeditedCallToFnScheduled = false;\n    this.stopped = false;\n    this.isExecutionInProgress = false;\n    this.hasExecutedOnce = false;\n    this._executeAndReschedule = () => {\n      if (this.stopped) return;\n      if (this.timerId) {\n        (0, timers_1.clearTimeout)(this.timerId);\n      }\n      this.isExpeditedCallToFnScheduled = false;\n      this.isExecutionInProgress = true;\n      this.fn(() => {\n        this.lastExecutionEnded = (0, utils_1.now)();\n        this.isExecutionInProgress = false;\n        this._reschedule(this.heartbeatFrequencyMS);\n      });\n    };\n    this.fn = fn;\n    this.lastExecutionEnded = -Infinity;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n    this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n    if (options.immediate) {\n      this._executeAndReschedule();\n    } else {\n      this._reschedule(undefined);\n    }\n  }\n  wake() {\n    const currentTime = (0, utils_1.now)();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n    // TODO(NODE-4674): Add error handling and logging to the monitor\n    if (timeSinceLastCall < 0) {\n      return this._executeAndReschedule();\n    }\n    if (this.isExecutionInProgress) {\n      return;\n    }\n    // debounce multiple calls to wake within the `minInterval`\n    if (this.isExpeditedCallToFnScheduled) {\n      return;\n    }\n    // reschedule a call as soon as possible, ensuring the call never happens\n    // faster than the `minInterval`\n    if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n      this.isExpeditedCallToFnScheduled = true;\n      this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n      return;\n    }\n    this._executeAndReschedule();\n  }\n  stop() {\n    this.stopped = true;\n    if (this.timerId) {\n      (0, timers_1.clearTimeout)(this.timerId);\n      this.timerId = undefined;\n    }\n    this.lastExecutionEnded = -Infinity;\n    this.isExpeditedCallToFnScheduled = false;\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  toJSON() {\n    const currentTime = (0, utils_1.now)();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n    return {\n      timerId: this.timerId != null ? 'set' : 'cleared',\n      lastCallTime: this.lastExecutionEnded,\n      isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n      stopped: this.stopped,\n      heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n      currentTime,\n      timeSinceLastCall\n    };\n  }\n  _reschedule(ms) {\n    if (this.stopped) return;\n    if (this.timerId) {\n      (0, timers_1.clearTimeout)(this.timerId);\n    }\n    this.timerId = (0, timers_1.setTimeout)(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n  }\n}\nexports.MonitorInterval = MonitorInterval;\n/** @internal\n * This class implements the RTT sampling logic specified for [CSOT](https://github.com/mongodb/specifications/blob/bbb335e60cd7ea1e0f7cd9a9443cb95fc9d3b64d/source/client-side-operations-timeout/client-side-operations-timeout.md#drivers-use-minimum-rtt-to-short-circuit-operations)\n *\n * This is implemented as a [circular buffer](https://en.wikipedia.org/wiki/Circular_buffer) keeping\n * the most recent `windowSize` samples\n * */\nclass RTTSampler {\n  constructor() {\n    let windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n    this.rttSamples = new Float64Array(windowSize);\n    this.length = 0;\n    this.writeIndex = 0;\n  }\n  /**\n   * Adds an rtt sample to the end of the circular buffer\n   * When `windowSize` samples have been collected, `addSample` overwrites the least recently added\n   * sample\n   */\n  addSample(sample) {\n    this.rttSamples[this.writeIndex++] = sample;\n    if (this.length < this.rttSamples.length) {\n      this.length++;\n    }\n    this.writeIndex %= this.rttSamples.length;\n  }\n  /**\n   * When \\< 2 samples have been collected, returns 0\n   * Otherwise computes the minimum value samples contained in the buffer\n   */\n  min() {\n    if (this.length < 2) return 0;\n    let min = this.rttSamples[0];\n    for (let i = 1; i < this.length; i++) {\n      if (this.rttSamples[i] < min) min = this.rttSamples[i];\n    }\n    return min;\n  }\n  /**\n   * Returns mean of samples contained in the buffer\n   */\n  average() {\n    if (this.length === 0) return 0;\n    let sum = 0;\n    for (let i = 0; i < this.length; i++) {\n      sum += this.rttSamples[i];\n    }\n    return sum / this.length;\n  }\n  /**\n   * Returns most recently inserted element in the buffer\n   * Returns null if the buffer is empty\n   * */\n  get last() {\n    if (this.length === 0) return null;\n    return this.rttSamples[this.writeIndex === 0 ? this.length - 1 : this.writeIndex - 1];\n  }\n  /**\n   * Clear the buffer\n   * NOTE: this does not overwrite the data held in the internal array, just the pointers into\n   * this array\n   */\n  clear() {\n    this.length = 0;\n    this.writeIndex = 0;\n  }\n}\nexports.RTTSampler = RTTSampler;","map":{"version":3,"mappings":"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","names":["kServer","Symbol","kMonitorId","kCancellationToken","STATE_IDLE","STATE_MONITORING","stateTransition","common_1","INVALID_REQUEST_CHECK_STATES","Set","isInCloseState","monitor","s","state","exports","Object","freeze","auto","poll","stream","Monitor","mongo_types_1","constructor","server","options","mongo_logger_1","TOPOLOGY","connection","setMaxListeners","Infinity","undefined","address","description","connectTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","serverMonitoringMode","isRunningInFaasEnv","mongoLogger","topology","client","rttSampler","RTTSampler","cancellationToken","connectOptions","id","generation","pool","hostAddress","raw","useBigInt64","promoteLongs","promoteValues","promoteBuffers","credentials","autoEncrypter","connect","MonitorInterval","monitorServer","immediate","requestCheck","has","wake","reset","topologyVersion","resetMonitorState","close","emit","roundTripTime","average","minRoundTripTime","min","latestRtt","last","addRttSample","rtt","addSample","clearRttSamples","clear","stop","rttPinger","destroy","useStreamingProtocol","checkServer","callback","start","awaited","isAwaitable","emitAndLogHeartbeat","server_1","SERVER_HEARTBEAT_STARTED","events_1","onHeartbeatFailed","err","SERVER_HEARTBEAT_FAILED","error","error_1","buildErrorMessage","cause","addErrorLabel","ResetPool","InterruptInUseConnections","onHeartbeatSucceeded","hello","isWritablePrimary","constants_1","duration","SERVER_HEARTBEAT_SUCCEEDED","connectionId","closed","serverApi","helloOk","maxAwaitTimeMS","cmd","version","makeTopologyVersion","socketTimeoutMS","exhaustAllowed","RTTPinger","exhaustCommand","command","then","socket","process","nextTick","done","type","Unknown","tv","processId","counter","bson_1","isLong","fromNumber","measureRoundTripTime","measureAndReschedule","conn","commandName","fn","stopped","timerId","isExpeditedCallToFnScheduled","isExecutionInProgress","lastExecutionEnded","_reschedule","_executeAndReschedule","currentTime","timeSinceLastCall","toString","JSON","stringify","toJSON","lastCallTime","isExpeditedCheckScheduled","ms","windowSize","rttSamples","Float64Array","length","writeIndex","sample","i","sum"],"sources":["/home/yadu/Music/Gifty/node_modules/mongodb/src/sdam/monitor.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\n\nimport { type Document, Long } from '../bson';\nimport { connect, makeConnection, makeSocket, performInitialHandshake } from '../cmap/connect';\nimport type { Connection, ConnectionOptions } from '../cmap/connection';\nimport { getFAASEnv } from '../cmap/handshake/client_metadata';\nimport { LEGACY_HELLO_COMMAND } from '../constants';\nimport { MongoError, MongoErrorLabel, MongoNetworkTimeoutError } from '../error';\nimport { MongoLoggableComponent } from '../mongo_logger';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport {\n  calculateDurationInMs,\n  type Callback,\n  type EventEmitterWithState,\n  makeStateMachine,\n  now,\n  ns\n} from '../utils';\nimport { ServerType, STATE_CLOSED, STATE_CLOSING } from './common';\nimport {\n  ServerHeartbeatFailedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent\n} from './events';\nimport { Server } from './server';\nimport type { TopologyVersion } from './server_description';\n\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_IDLE, STATE_CLOSED],\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, STATE_CLOSING]\n});\n\nconst INVALID_REQUEST_CHECK_STATES = new Set([STATE_CLOSING, STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor: Monitor) {\n  return monitor.s.state === STATE_CLOSED || monitor.s.state === STATE_CLOSING;\n}\n\n/** @public */\nexport const ServerMonitoringMode = Object.freeze({\n  auto: 'auto',\n  poll: 'poll',\n  stream: 'stream'\n} as const);\n\n/** @public */\nexport type ServerMonitoringMode = (typeof ServerMonitoringMode)[keyof typeof ServerMonitoringMode];\n\n/** @internal */\nexport interface MonitorPrivate {\n  state: string;\n}\n\n/** @public */\nexport interface MonitorOptions\n  extends Omit<ConnectionOptions, 'id' | 'generation' | 'hostAddress'> {\n  connectTimeoutMS: number;\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n  serverMonitoringMode: ServerMonitoringMode;\n}\n\n/** @public */\nexport type MonitorEvents = {\n  serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;\n  serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;\n  serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;\n  resetServer(error?: MongoError): void;\n  resetConnectionPool(): void;\n  close(): void;\n} & EventEmitterWithState;\n\n/** @internal */\nexport class Monitor extends TypedEventEmitter<MonitorEvents> {\n  /** @internal */\n  s: MonitorPrivate;\n  address: string;\n  options: Readonly<\n    Pick<\n      MonitorOptions,\n      | 'connectTimeoutMS'\n      | 'heartbeatFrequencyMS'\n      | 'minHeartbeatFrequencyMS'\n      | 'serverMonitoringMode'\n    >\n  >;\n  connectOptions: ConnectionOptions;\n  isRunningInFaasEnv: boolean;\n  [kServer]: Server;\n  connection: Connection | null;\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kMonitorId]?: MonitorInterval;\n  rttPinger?: RTTPinger;\n  /** @internal */\n  override component = MongoLoggableComponent.TOPOLOGY;\n  /** @internal */\n  private rttSampler: RTTSampler;\n\n  constructor(server: Server, options: MonitorOptions) {\n    super();\n\n    this[kServer] = server;\n    this.connection = null;\n    this[kCancellationToken] = new CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kMonitorId] = undefined;\n    this.s = {\n      state: STATE_CLOSED\n    };\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500,\n      serverMonitoringMode: options.serverMonitoringMode\n    });\n    this.isRunningInFaasEnv = getFAASEnv() != null;\n    this.mongoLogger = this[kServer].topology.client?.mongoLogger;\n    this.rttSampler = new RTTSampler(10);\n\n    const cancellationToken = this[kCancellationToken];\n    // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n    const connectOptions = {\n      id: '<monitor>' as const,\n      generation: server.pool.generation,\n      cancellationToken,\n      hostAddress: server.description.hostAddress,\n      ...options,\n      // force BSON serialization options\n      raw: false,\n      useBigInt64: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: true\n    };\n\n    // ensure no authentication is used for monitoring\n    delete connectOptions.credentials;\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n\n    this.connectOptions = Object.freeze(connectOptions);\n  }\n\n  connect(): void {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    // start\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n      immediate: true\n    });\n  }\n\n  requestCheck(): void {\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n\n    this[kMonitorId]?.wake();\n  }\n\n  reset(): void {\n    const topologyVersion = this[kServer].description.topologyVersion;\n    if (isInCloseState(this) || topologyVersion == null) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // restart monitor\n    stateTransition(this, STATE_IDLE);\n\n    // restart monitoring\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n      heartbeatFrequencyMS: heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n    });\n  }\n\n  close(): void {\n    if (isInCloseState(this)) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // close monitor\n    this.emit('close');\n    stateTransition(this, STATE_CLOSED);\n  }\n\n  get roundTripTime(): number {\n    return this.rttSampler.average();\n  }\n\n  get minRoundTripTime(): number {\n    return this.rttSampler.min();\n  }\n\n  get latestRtt(): number | null {\n    return this.rttSampler.last;\n  }\n\n  addRttSample(rtt: number) {\n    this.rttSampler.addSample(rtt);\n  }\n\n  clearRttSamples() {\n    this.rttSampler.clear();\n  }\n}\n\nfunction resetMonitorState(monitor: Monitor) {\n  monitor[kMonitorId]?.stop();\n  monitor[kMonitorId] = undefined;\n\n  monitor.rttPinger?.close();\n  monitor.rttPinger = undefined;\n\n  monitor[kCancellationToken].emit('cancel');\n\n  monitor.connection?.destroy();\n  monitor.connection = null;\n\n  monitor.clearRttSamples();\n}\n\nfunction useStreamingProtocol(monitor: Monitor, topologyVersion: TopologyVersion | null): boolean {\n  // If we have no topology version we always poll no matter\n  // what the user provided, since the server does not support\n  // the streaming protocol.\n  if (topologyVersion == null) return false;\n\n  const serverMonitoringMode = monitor.options.serverMonitoringMode;\n  if (serverMonitoringMode === ServerMonitoringMode.poll) return false;\n  if (serverMonitoringMode === ServerMonitoringMode.stream) return true;\n\n  // If we are in auto mode, we need to figure out if we're in a FaaS\n  // environment or not and choose the appropriate mode.\n  if (monitor.isRunningInFaasEnv) return false;\n  return true;\n}\n\nfunction checkServer(monitor: Monitor, callback: Callback<Document | null>) {\n  let start: number;\n  let awaited: boolean;\n  const topologyVersion = monitor[kServer].description.topologyVersion;\n  const isAwaitable = useStreamingProtocol(monitor, topologyVersion);\n  monitor.emitAndLogHeartbeat(\n    Server.SERVER_HEARTBEAT_STARTED,\n    monitor[kServer].topology.s.id,\n    undefined,\n    new ServerHeartbeatStartedEvent(monitor.address, isAwaitable)\n  );\n\n  function onHeartbeatFailed(err: Error) {\n    monitor.connection?.destroy();\n    monitor.connection = null;\n    monitor.emitAndLogHeartbeat(\n      Server.SERVER_HEARTBEAT_FAILED,\n      monitor[kServer].topology.s.id,\n      undefined,\n      new ServerHeartbeatFailedEvent(monitor.address, calculateDurationInMs(start), err, awaited)\n    );\n\n    const error = !(err instanceof MongoError)\n      ? new MongoError(MongoError.buildErrorMessage(err), { cause: err })\n      : err;\n    error.addErrorLabel(MongoErrorLabel.ResetPool);\n    if (error instanceof MongoNetworkTimeoutError) {\n      error.addErrorLabel(MongoErrorLabel.InterruptInUseConnections);\n    }\n\n    monitor.emit('resetServer', error);\n    callback(err);\n  }\n\n  function onHeartbeatSucceeded(hello: Document) {\n    if (!('isWritablePrimary' in hello)) {\n      // Provide hello-style response document.\n      hello.isWritablePrimary = hello[LEGACY_HELLO_COMMAND];\n    }\n\n    // NOTE: here we use the latestRtt as this measurement corresponds with the value\n    // obtained for this successful heartbeat, if there is no latestRtt, then we calculate the\n    // duration\n    const duration =\n      isAwaitable && monitor.rttPinger\n        ? (monitor.rttPinger.latestRtt ?? calculateDurationInMs(start))\n        : calculateDurationInMs(start);\n\n    monitor.addRttSample(duration);\n\n    monitor.emitAndLogHeartbeat(\n      Server.SERVER_HEARTBEAT_SUCCEEDED,\n      monitor[kServer].topology.s.id,\n      hello.connectionId,\n      new ServerHeartbeatSucceededEvent(monitor.address, duration, hello, isAwaitable)\n    );\n\n    if (isAwaitable) {\n      // If we are using the streaming protocol then we immediately issue another 'started'\n      // event, otherwise the \"check\" is complete and return to the main monitor loop\n      monitor.emitAndLogHeartbeat(\n        Server.SERVER_HEARTBEAT_STARTED,\n        monitor[kServer].topology.s.id,\n        undefined,\n        new ServerHeartbeatStartedEvent(monitor.address, true)\n      );\n      // We have not actually sent an outgoing handshake, but when we get the next response we\n      // want the duration to reflect the time since we last heard from the server\n      start = now();\n    } else {\n      monitor.rttPinger?.close();\n      monitor.rttPinger = undefined;\n\n      callback(undefined, hello);\n    }\n  }\n\n  const { connection } = monitor;\n  if (connection && !connection.closed) {\n    const { serverApi, helloOk } = connection;\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n\n    const cmd = {\n      [serverApi?.version || helloOk ? 'hello' : LEGACY_HELLO_COMMAND]: 1,\n      ...(isAwaitable && topologyVersion\n        ? { maxAwaitTimeMS, topologyVersion: makeTopologyVersion(topologyVersion) }\n        : {})\n    };\n\n    const options = isAwaitable\n      ? {\n          socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n          exhaustAllowed: true\n        }\n      : { socketTimeoutMS: connectTimeoutMS };\n\n    if (isAwaitable && monitor.rttPinger == null) {\n      monitor.rttPinger = new RTTPinger(monitor);\n    }\n\n    // Record new start time before sending handshake\n    start = now();\n\n    if (isAwaitable) {\n      awaited = true;\n      return connection.exhaustCommand(ns('admin.$cmd'), cmd, options, (error, hello) => {\n        if (error) return onHeartbeatFailed(error);\n        return onHeartbeatSucceeded(hello);\n      });\n    }\n\n    awaited = false;\n    connection\n      .command(ns('admin.$cmd'), cmd, options)\n\n      .then(onHeartbeatSucceeded, onHeartbeatFailed);\n\n    return;\n  }\n\n  // connecting does an implicit `hello`\n  (async () => {\n    const socket = await makeSocket(monitor.connectOptions);\n    const connection = makeConnection(monitor.connectOptions, socket);\n    // The start time is after socket creation but before the handshake\n    start = now();\n    try {\n      await performInitialHandshake(connection, monitor.connectOptions);\n      return connection;\n    } catch (error) {\n      connection.destroy();\n      throw error;\n    }\n  })().then(\n    connection => {\n      if (isInCloseState(monitor)) {\n        connection.destroy();\n        return;\n      }\n      const duration = calculateDurationInMs(start);\n      monitor.addRttSample(duration);\n\n      monitor.connection = connection;\n      monitor.emitAndLogHeartbeat(\n        Server.SERVER_HEARTBEAT_SUCCEEDED,\n        monitor[kServer].topology.s.id,\n        connection.hello?.connectionId,\n        new ServerHeartbeatSucceededEvent(\n          monitor.address,\n          duration,\n          connection.hello,\n          useStreamingProtocol(monitor, connection.hello?.topologyVersion)\n        )\n      );\n\n      callback(undefined, connection.hello);\n    },\n    error => {\n      monitor.connection = null;\n      awaited = false;\n      onHeartbeatFailed(error);\n    }\n  );\n}\n\nfunction monitorServer(monitor: Monitor) {\n  return (callback: Callback) => {\n    if (monitor.s.state === STATE_MONITORING) {\n      process.nextTick(callback);\n      return;\n    }\n    stateTransition(monitor, STATE_MONITORING);\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n\n      callback();\n    }\n\n    checkServer(monitor, (err, hello) => {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === ServerType.Unknown) {\n          return done();\n        }\n      }\n\n      // if the check indicates streaming is supported, immediately reschedule monitoring\n      if (useStreamingProtocol(monitor, hello?.topologyVersion)) {\n        setTimeout(() => {\n          if (!isInCloseState(monitor)) {\n            monitor[kMonitorId]?.wake();\n          }\n        }, 0);\n      }\n\n      done();\n    });\n  };\n}\n\nfunction makeTopologyVersion(tv: TopologyVersion) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    counter: Long.isLong(tv.counter) ? tv.counter : Long.fromNumber(tv.counter)\n  };\n}\n\n/** @internal */\nexport interface RTTPingerOptions extends ConnectionOptions {\n  heartbeatFrequencyMS: number;\n}\n\n/** @internal */\nexport class RTTPinger {\n  connection?: Connection;\n  /** @internal */\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kMonitorId]: NodeJS.Timeout;\n  /** @internal */\n  monitor: Monitor;\n  closed: boolean;\n  /** @internal */\n  latestRtt?: number;\n\n  constructor(monitor: Monitor) {\n    this.connection = undefined;\n    this[kCancellationToken] = monitor[kCancellationToken];\n    this.closed = false;\n    this.monitor = monitor;\n    this.latestRtt = monitor.latestRtt ?? undefined;\n\n    const heartbeatFrequencyMS = monitor.options.heartbeatFrequencyMS;\n    this[kMonitorId] = setTimeout(() => this.measureRoundTripTime(), heartbeatFrequencyMS);\n  }\n\n  get roundTripTime(): number {\n    return this.monitor.roundTripTime;\n  }\n\n  get minRoundTripTime(): number {\n    return this.monitor.minRoundTripTime;\n  }\n\n  close(): void {\n    this.closed = true;\n    clearTimeout(this[kMonitorId]);\n\n    this.connection?.destroy();\n    this.connection = undefined;\n  }\n\n  private measureAndReschedule(start: number, conn?: Connection) {\n    if (this.closed) {\n      conn?.destroy();\n      return;\n    }\n\n    if (this.connection == null) {\n      this.connection = conn;\n    }\n\n    this.latestRtt = calculateDurationInMs(start);\n    this[kMonitorId] = setTimeout(\n      () => this.measureRoundTripTime(),\n      this.monitor.options.heartbeatFrequencyMS\n    );\n  }\n\n  private measureRoundTripTime() {\n    const start = now();\n\n    if (this.closed) {\n      return;\n    }\n\n    const connection = this.connection;\n    if (connection == null) {\n      connect(this.monitor.connectOptions).then(\n        connection => {\n          this.measureAndReschedule(start, connection);\n        },\n        () => {\n          this.connection = undefined;\n        }\n      );\n      return;\n    }\n\n    const commandName =\n      connection.serverApi?.version || connection.helloOk ? 'hello' : LEGACY_HELLO_COMMAND;\n\n    connection.command(ns('admin.$cmd'), { [commandName]: 1 }, undefined).then(\n      () => this.measureAndReschedule(start),\n      () => {\n        this.connection?.destroy();\n        this.connection = undefined;\n        return;\n      }\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport interface MonitorIntervalOptions {\n  /** The interval to execute a method on */\n  heartbeatFrequencyMS: number;\n  /** A minimum interval that must elapse before the method is called */\n  minHeartbeatFrequencyMS: number;\n  /** Whether the method should be called immediately when the interval is started  */\n  immediate: boolean;\n}\n\n/**\n * @internal\n */\nexport class MonitorInterval {\n  fn: (callback: Callback) => void;\n  timerId: NodeJS.Timeout | undefined;\n  lastExecutionEnded: number;\n  isExpeditedCallToFnScheduled = false;\n  stopped = false;\n  isExecutionInProgress = false;\n  hasExecutedOnce = false;\n\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n\n  constructor(fn: (callback: Callback) => void, options: Partial<MonitorIntervalOptions> = {}) {\n    this.fn = fn;\n    this.lastExecutionEnded = -Infinity;\n\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n    this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n\n    if (options.immediate) {\n      this._executeAndReschedule();\n    } else {\n      this._reschedule(undefined);\n    }\n  }\n\n  wake() {\n    const currentTime = now();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n\n    // TODO(NODE-4674): Add error handling and logging to the monitor\n    if (timeSinceLastCall < 0) {\n      return this._executeAndReschedule();\n    }\n\n    if (this.isExecutionInProgress) {\n      return;\n    }\n\n    // debounce multiple calls to wake within the `minInterval`\n    if (this.isExpeditedCallToFnScheduled) {\n      return;\n    }\n\n    // reschedule a call as soon as possible, ensuring the call never happens\n    // faster than the `minInterval`\n    if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n      this.isExpeditedCallToFnScheduled = true;\n      this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n      return;\n    }\n\n    this._executeAndReschedule();\n  }\n\n  stop() {\n    this.stopped = true;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n      this.timerId = undefined;\n    }\n\n    this.lastExecutionEnded = -Infinity;\n    this.isExpeditedCallToFnScheduled = false;\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n  toJSON() {\n    const currentTime = now();\n    const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n    return {\n      timerId: this.timerId != null ? 'set' : 'cleared',\n      lastCallTime: this.lastExecutionEnded,\n      isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n      stopped: this.stopped,\n      heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n      currentTime,\n      timeSinceLastCall\n    };\n  }\n\n  private _reschedule(ms?: number) {\n    if (this.stopped) return;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n    }\n\n    this.timerId = setTimeout(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n  }\n\n  private _executeAndReschedule = () => {\n    if (this.stopped) return;\n    if (this.timerId) {\n      clearTimeout(this.timerId);\n    }\n\n    this.isExpeditedCallToFnScheduled = false;\n    this.isExecutionInProgress = true;\n\n    this.fn(() => {\n      this.lastExecutionEnded = now();\n      this.isExecutionInProgress = false;\n      this._reschedule(this.heartbeatFrequencyMS);\n    });\n  };\n}\n\n/** @internal\n * This class implements the RTT sampling logic specified for [CSOT](https://github.com/mongodb/specifications/blob/bbb335e60cd7ea1e0f7cd9a9443cb95fc9d3b64d/source/client-side-operations-timeout/client-side-operations-timeout.md#drivers-use-minimum-rtt-to-short-circuit-operations)\n *\n * This is implemented as a [circular buffer](https://en.wikipedia.org/wiki/Circular_buffer) keeping\n * the most recent `windowSize` samples\n * */\nexport class RTTSampler {\n  /** Index of the next slot to be overwritten */\n  private writeIndex: number;\n  private length: number;\n  private rttSamples: Float64Array;\n\n  constructor(windowSize = 10) {\n    this.rttSamples = new Float64Array(windowSize);\n    this.length = 0;\n    this.writeIndex = 0;\n  }\n\n  /**\n   * Adds an rtt sample to the end of the circular buffer\n   * When `windowSize` samples have been collected, `addSample` overwrites the least recently added\n   * sample\n   */\n  addSample(sample: number) {\n    this.rttSamples[this.writeIndex++] = sample;\n    if (this.length < this.rttSamples.length) {\n      this.length++;\n    }\n\n    this.writeIndex %= this.rttSamples.length;\n  }\n\n  /**\n   * When \\< 2 samples have been collected, returns 0\n   * Otherwise computes the minimum value samples contained in the buffer\n   */\n  min(): number {\n    if (this.length < 2) return 0;\n    let min = this.rttSamples[0];\n    for (let i = 1; i < this.length; i++) {\n      if (this.rttSamples[i] < min) min = this.rttSamples[i];\n    }\n\n    return min;\n  }\n\n  /**\n   * Returns mean of samples contained in the buffer\n   */\n  average(): number {\n    if (this.length === 0) return 0;\n    let sum = 0;\n    for (let i = 0; i < this.length; i++) {\n      sum += this.rttSamples[i];\n    }\n\n    return sum / this.length;\n  }\n\n  /**\n   * Returns most recently inserted element in the buffer\n   * Returns null if the buffer is empty\n   * */\n  get last(): number | null {\n    if (this.length === 0) return null;\n    return this.rttSamples[this.writeIndex === 0 ? this.length - 1 : this.writeIndex - 1];\n  }\n\n  /**\n   * Clear the buffer\n   * NOTE: this does not overwrite the data held in the internal array, just the pointers into\n   * this array\n   */\n  clear() {\n    this.length = 0;\n    this.writeIndex = 0;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}